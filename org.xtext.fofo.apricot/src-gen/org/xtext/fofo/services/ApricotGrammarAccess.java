/*
* generated by Xtext
*/
package org.xtext.fofo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ApricotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final RuleCall cPackageDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Program:
		//	PackageDeclaration;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall() { return cPackageDeclarationParserRuleCall; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsAbstractElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName ";" imports+=Import* elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName ";" imports+=Import* elements+=AbstractElement*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_4_0() { return cElementsAbstractElementParserRuleCall_4_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final RuleCall cRefTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractElement:
		//	RefType;
		public ParserRule getRule() { return rule; }

		//RefType
		public RuleCall getRefTypeParserRuleCall() { return cRefTypeParserRuleCall; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonRefTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	NonRefType | RefType;
		public ParserRule getRule() { return rule; }

		//NonRefType | RefType
		public Alternatives getAlternatives() { return cAlternatives; }

		//NonRefType
		public RuleCall getNonRefTypeParserRuleCall_0() { return cNonRefTypeParserRuleCall_0; }

		//RefType
		public RuleCall getRefTypeParserRuleCall_1() { return cRefTypeParserRuleCall_1; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Modifier:
		//	"public" | "private";
		public ParserRule getRule() { return rule; }

		//"public" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"private"
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }
	}

	public class BuiltInModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInModifier");
		private final Keyword cNativeKeyword = (Keyword)rule.eContents().get(1);
		
		//BuiltInModifier:
		//	"Native";
		public ParserRule getRule() { return rule; }

		//"Native"
		public Keyword getNativeKeyword() { return cNativeKeyword; }
	}

	public class RefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RefType:
		//	Class | Interface;
		public ParserRule getRule() { return rule; }

		//Class | Interface
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }
	}

	public class NonRefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonRefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonRefType:
		//	BasicType | MathType;
		public ParserRule getRule() { return rule; }

		//BasicType | MathType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//MathType
		public RuleCall getMathTypeParserRuleCall_1() { return cMathTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cBTAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBTAlternatives_0 = (Alternatives)cBTAssignment.eContents().get(0);
		private final Keyword cBTVoidKeyword_0_0 = (Keyword)cBTAlternatives_0.eContents().get(0);
		private final Keyword cBTIntKeyword_0_1 = (Keyword)cBTAlternatives_0.eContents().get(1);
		private final Keyword cBTRealKeyword_0_2 = (Keyword)cBTAlternatives_0.eContents().get(2);
		private final Keyword cBTBooleanKeyword_0_3 = (Keyword)cBTAlternatives_0.eContents().get(3);
		private final Keyword cBTStringKeyword_0_4 = (Keyword)cBTAlternatives_0.eContents().get(4);
		
		//BasicType:
		//	BT=("void" | "int" | "real" | "boolean" | "String");
		public ParserRule getRule() { return rule; }

		//BT=("void" | "int" | "real" | "boolean" | "String")
		public Assignment getBTAssignment() { return cBTAssignment; }

		//"void" | "int" | "real" | "boolean" | "String"
		public Alternatives getBTAlternatives_0() { return cBTAlternatives_0; }

		//"void"
		public Keyword getBTVoidKeyword_0_0() { return cBTVoidKeyword_0_0; }

		//"int"
		public Keyword getBTIntKeyword_0_1() { return cBTIntKeyword_0_1; }

		//"real"
		public Keyword getBTRealKeyword_0_2() { return cBTRealKeyword_0_2; }

		//"boolean"
		public Keyword getBTBooleanKeyword_0_3() { return cBTBooleanKeyword_0_3; }

		//"String"
		public Keyword getBTStringKeyword_0_4() { return cBTStringKeyword_0_4; }
	}

	public class MathTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathType");
		private final Assignment cMTAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cMTAlternatives_0 = (Alternatives)cMTAssignment.eContents().get(0);
		private final Keyword cMTIntKeyword_0_0 = (Keyword)cMTAlternatives_0.eContents().get(0);
		private final Keyword cMTRealKeyword_0_1 = (Keyword)cMTAlternatives_0.eContents().get(1);
		
		//MathType:
		//	MT=("Int" | "Real");
		public ParserRule getRule() { return rule; }

		//MT=("Int" | "Real")
		public Assignment getMTAssignment() { return cMTAssignment; }

		//"Int" | "Real"
		public Alternatives getMTAlternatives_0() { return cMTAlternatives_0; }

		//"Int"
		public Keyword getMTIntKeyword_0_0() { return cMTIntKeyword_0_0; }

		//"Real"
		public Keyword getMTRealKeyword_0_1() { return cMTRealKeyword_0_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassInterfaceCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassInterfaceCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersAbstractInterfaceElementParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Interface:
		//	Modifier? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{"
		//	members+=AbstractInterfaceElement* "}";
		public ParserRule getRule() { return rule; }

		//Modifier? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{" members+=AbstractInterfaceElement*
		//"}"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superclass=[Interface|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superclass=[Interface|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }

		//[Interface|QualifiedName]
		public CrossReference getSuperclassInterfaceCrossReference_3_1_0() { return cSuperclassInterfaceCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=AbstractInterfaceElement*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//AbstractInterfaceElement
		public RuleCall getMembersAbstractInterfaceElementParserRuleCall_5_0() { return cMembersAbstractInterfaceElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassClassCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceclassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInterfaceclassInterfaceCrossReference_4_1_0 = (CrossReference)cInterfaceclassAssignment_4_1.eContents().get(0);
		private final RuleCall cInterfaceclassInterfaceQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cInterfaceclassInterfaceCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	Modifier? "class" name=ID ("extends" superclass=[Class|QualifiedName])? ("implements"
		//	interfaceclass=[Interface|QualifiedName])? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//Modifier? "class" name=ID ("extends" superclass=[Class|QualifiedName])? ("implements"
		//interfaceclass=[Interface|QualifiedName])? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superclass=[Class|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superclass=[Class|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }

		//[Class|QualifiedName]
		public CrossReference getSuperclassClassCrossReference_3_1_0() { return cSuperclassClassCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperclassClassQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassClassQualifiedNameParserRuleCall_3_1_0_1; }

		//("implements" interfaceclass=[Interface|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//interfaceclass=[Interface|QualifiedName]
		public Assignment getInterfaceclassAssignment_4_1() { return cInterfaceclassAssignment_4_1; }

		//[Interface|QualifiedName]
		public CrossReference getInterfaceclassInterfaceCrossReference_4_1_0() { return cInterfaceclassInterfaceCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getInterfaceclassInterfaceQualifiedNameParserRuleCall_4_1_0_1() { return cInterfaceclassInterfaceQualifiedNameParserRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Field | Method;
		public ParserRule getRule() { return rule; }

		//Field | Method
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}

	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUseTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFieldNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariniAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariniVariableInitializerParserRuleCall_2_1_0 = (RuleCall)cVariniAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Field:
		//	type=UseType name=FieldName ("=" varini=VariableInitializer)? ";";
		public ParserRule getRule() { return rule; }

		//type=UseType name=FieldName ("=" varini=VariableInitializer)? ";"
		public Group getGroup() { return cGroup; }

		//type=UseType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_0_0() { return cTypeUseTypeParserRuleCall_0_0; }

		//name=FieldName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FieldName
		public RuleCall getNameFieldNameParserRuleCall_1_0() { return cNameFieldNameParserRuleCall_1_0; }

		//("=" varini=VariableInitializer)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//varini=VariableInitializer
		public Assignment getVariniAssignment_2_1() { return cVariniAssignment_2_1; }

		//VariableInitializer
		public RuleCall getVariniVariableInitializerParserRuleCall_2_1_0() { return cVariniVariableInitializerParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyMethodBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Method:
		//	Modifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
		public ParserRule getRule() { return rule; }

		//Modifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//type=UseType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_0() { return cTypeUseTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//body=MethodBody
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_7_0() { return cBodyMethodBodyParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AbstractMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBuiltInModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeUseTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBodyAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBodyAbstractMethodBodyParserRuleCall_7_1_0 = (RuleCall)cBodyAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AbstractMethod:
		//	Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ("{"
		//	body=AbstractMethodBody "}")? ";";
		public ParserRule getRule() { return rule; }

		//Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ("{"
		//body=AbstractMethodBody "}")? ";"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//BuiltInModifier?
		public RuleCall getBuiltInModifierParserRuleCall_1() { return cBuiltInModifierParserRuleCall_1; }

		//type=UseType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_2_0() { return cTypeUseTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0_0() { return cParamsParameterParserRuleCall_5_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_1_1_0() { return cParamsParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//("{" body=AbstractMethodBody "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//body=AbstractMethodBody
		public Assignment getBodyAssignment_7_1() { return cBodyAssignment_7_1; }

		//AbstractMethodBody
		public RuleCall getBodyAbstractMethodBodyParserRuleCall_7_1_0() { return cBodyAbstractMethodBodyParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class UseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cType1Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cType1RefTypeCrossReference_0_0 = (CrossReference)cType1Assignment_0.eContents().get(0);
		private final RuleCall cType1RefTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cType1RefTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cType2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cType2NonRefTypeParserRuleCall_1_0 = (RuleCall)cType2Assignment_1.eContents().get(0);
		
		////THE MOST IMPORTANT RULE 
		//UseType:
		//	type1=[RefType] | type2=NonRefType;
		public ParserRule getRule() { return rule; }

		//type1=[RefType] | type2=NonRefType
		public Alternatives getAlternatives() { return cAlternatives; }

		//type1=[RefType]
		public Assignment getType1Assignment_0() { return cType1Assignment_0; }

		//[RefType]
		public CrossReference getType1RefTypeCrossReference_0_0() { return cType1RefTypeCrossReference_0_0; }

		//ID
		public RuleCall getType1RefTypeIDTerminalRuleCall_0_0_1() { return cType1RefTypeIDTerminalRuleCall_0_0_1; }

		//type2=NonRefType
		public Assignment getType2Assignment_1() { return cType2Assignment_1; }

		//NonRefType
		public RuleCall getType2NonRefTypeParserRuleCall_1_0() { return cType2NonRefTypeParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUseTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=UseType name=ID;
		public ParserRule getRule() { return rule; }

		//type=UseType name=ID
		public Group getGroup() { return cGroup; }

		//type=UseType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_0_0() { return cTypeUseTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedElement:
		//	Member | Parameter;
		public ParserRule getRule() { return rule; }

		//Member | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocvarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocvarsLocalVarDecParserRuleCall_0_0 = (RuleCall)cLocvarsAssignment_0.eContents().get(0);
		private final Assignment cReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnReturnStatementParserRuleCall_1_0 = (RuleCall)cReturnAssignment_1.eContents().get(0);
		
		//MethodBody:
		//	locvars+=LocalVarDec* return=ReturnStatement;
		public ParserRule getRule() { return rule; }

		//locvars+=LocalVarDec* return=ReturnStatement
		public Group getGroup() { return cGroup; }

		//locvars+=LocalVarDec*
		public Assignment getLocvarsAssignment_0() { return cLocvarsAssignment_0; }

		//LocalVarDec
		public RuleCall getLocvarsLocalVarDecParserRuleCall_0_0() { return cLocvarsLocalVarDecParserRuleCall_0_0; }

		//return=ReturnStatement
		public Assignment getReturnAssignment_1() { return cReturnAssignment_1; }

		//ReturnStatement
		public RuleCall getReturnReturnStatementParserRuleCall_1_0() { return cReturnReturnStatementParserRuleCall_1_0; }
	}

	public class AbstractMethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMethodBody");
		private final RuleCall cRequiresAbstractCompositionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractMethodBody:
		//	RequiresAbstractComposition;
		public ParserRule getRule() { return rule; }

		//RequiresAbstractComposition
		public RuleCall getRequiresAbstractCompositionParserRuleCall() { return cRequiresAbstractCompositionParserRuleCall; }
	}

	public class LocalVarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LocalVarName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class LocalVarDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUseTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLocalVarNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariniAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariniVariableInitializerParserRuleCall_2_1_0 = (RuleCall)cVariniAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LocalVarDec:
		//	type=UseType name=LocalVarName ("=" varini=VariableInitializer)? ";";
		public ParserRule getRule() { return rule; }

		//type=UseType name=LocalVarName ("=" varini=VariableInitializer)? ";"
		public Group getGroup() { return cGroup; }

		//type=UseType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_0_0() { return cTypeUseTypeParserRuleCall_0_0; }

		//name=LocalVarName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LocalVarName
		public RuleCall getNameLocalVarNameParserRuleCall_1_0() { return cNameLocalVarNameParserRuleCall_1_0; }

		//("=" varini=VariableInitializer)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//varini=VariableInitializer
		public Assignment getVariniAssignment_2_1() { return cVariniAssignment_2_1; }

		//VariableInitializer
		public RuleCall getVariniVariableInitializerParserRuleCall_2_1_0() { return cVariniVariableInitializerParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableInitializer");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VariableInitializer:
		//	Expression;
		public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//	"return" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"return" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cThisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNewByClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCastParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/// * 
		//Expression:		 
		//	
		//    TerminalExpression  
		//    =>(
		//        {Selection.receiver=current} '.' 
		//        message=[Member]
		//        ('(' (args+=Expression (',' args+=Expression)*)? ')')?
		//    )*     
		//    ;
		//
		// * / TerminalExpression returns Expression:
		//	This | ParamRef | NewByClass | => Cast | Constant | Paren;
		public ParserRule getRule() { return rule; }

		//This | ParamRef | NewByClass | => Cast | Constant | Paren
		public Alternatives getAlternatives() { return cAlternatives; }

		//This
		public RuleCall getThisParserRuleCall_0() { return cThisParserRuleCall_0; }

		//ParamRef
		public RuleCall getParamRefParserRuleCall_1() { return cParamRefParserRuleCall_1; }

		//NewByClass
		public RuleCall getNewByClassParserRuleCall_2() { return cNewByClassParserRuleCall_2; }

		//=> Cast
		public RuleCall getCastParserRuleCall_3() { return cCastParserRuleCall_3; }

		//Constant
		public RuleCall getConstantParserRuleCall_4() { return cConstantParserRuleCall_4; }

		//Paren
		public RuleCall getParenParserRuleCall_5() { return cParenParserRuleCall_5; }
	}

	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "This");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVariableThisKeyword_0 = (Keyword)cVariableAssignment.eContents().get(0);
		
		//This:
		//	variable="this";
		public ParserRule getRule() { return rule; }

		//variable="this"
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//"this"
		public Keyword getVariableThisKeyword_0() { return cVariableThisKeyword_0; }
	}

	public class ParamRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamRef");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//ParamRef:
		//	parameter=[Parameter];
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1() { return cParameterParameterIDTerminalRuleCall_0_1; }
	}

	public class NewByClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewByClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NewByClass:
		//	"new" type=[Class] "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" type=[Class] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=[Class]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Class]
		public CrossReference getTypeClassCrossReference_1_0() { return cTypeClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeClassIDTerminalRuleCall_1_0_1() { return cTypeClassIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Expression
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_0() { return cArgsExpressionParserRuleCall_3_0_0; }

		//("," args+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_1_0() { return cArgsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionTerminalExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Cast:
		//	"(" type=UseType ")" expression=TerminalExpression;
		public ParserRule getRule() { return rule; }

		//"(" type=UseType ")" expression=TerminalExpression
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=UseType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_0() { return cTypeUseTypeParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression=TerminalExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//TerminalExpression
		public RuleCall getExpressionTerminalExpressionParserRuleCall_3_0() { return cExpressionTerminalExpressionParserRuleCall_3_0; }
	}

	public class ParenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Paren returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	IntConstant | BoolConstant | StringConstant;
		public ParserRule getRule() { return rule; }

		//IntConstant | BoolConstant | StringConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntConstant
		public RuleCall getIntConstantParserRuleCall_0() { return cIntConstantParserRuleCall_0; }

		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_1() { return cBoolConstantParserRuleCall_1; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_2() { return cStringConstantParserRuleCall_2; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantSTRINGTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//StringConstant:
		//	constant=STRING;
		public ParserRule getRule() { return rule; }

		//constant=STRING
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//STRING
		public RuleCall getConstantSTRINGTerminalRuleCall_0() { return cConstantSTRINGTerminalRuleCall_0; }
	}

	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//IntConstant:
		//	constant=INT;
		public ParserRule getRule() { return rule; }

		//constant=INT
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//INT
		public RuleCall getConstantINTTerminalRuleCall_0() { return cConstantINTTerminalRuleCall_0; }
	}

	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cConstantAlternatives_0 = (Alternatives)cConstantAssignment.eContents().get(0);
		private final Keyword cConstantTrueKeyword_0_0 = (Keyword)cConstantAlternatives_0.eContents().get(0);
		private final Keyword cConstantFalseKeyword_0_1 = (Keyword)cConstantAlternatives_0.eContents().get(1);
		
		//BoolConstant:
		//	constant=("true" | "false");
		public ParserRule getRule() { return rule; }

		//constant=("true" | "false")
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//"true" | "false"
		public Alternatives getConstantAlternatives_0() { return cConstantAlternatives_0; }

		//"true"
		public Keyword getConstantTrueKeyword_0_0() { return cConstantTrueKeyword_0_0; }

		//"false"
		public Keyword getConstantFalseKeyword_0_1() { return cConstantFalseKeyword_0_1; }
	}

	public class AMOUNTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMOUNT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAMOUNT_GEONETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAMOUNT_ONE_OR_ZEROTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AMOUNT:
		//	AMOUNT_GEONE | AMOUNT_ONE_OR_ZERO;
		public ParserRule getRule() { return rule; }

		//AMOUNT_GEONE | AMOUNT_ONE_OR_ZERO
		public Alternatives getAlternatives() { return cAlternatives; }

		//AMOUNT_GEONE
		public RuleCall getAMOUNT_GEONETerminalRuleCall_0() { return cAMOUNT_GEONETerminalRuleCall_0; }

		//AMOUNT_ONE_OR_ZERO
		public RuleCall getAMOUNT_ONE_OR_ZEROTerminalRuleCall_1() { return cAMOUNT_ONE_OR_ZEROTerminalRuleCall_1; }
	}

	public class AbstractInterfaceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractInterfaceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequiresParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractInvariantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractInterfaceElement:
		//	AbstractMethod | Requires | ClockConstraint | AbstractInvariant;
		public ParserRule getRule() { return rule; }

		//AbstractMethod | Requires | ClockConstraint | AbstractInvariant
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractMethod
		public RuleCall getAbstractMethodParserRuleCall_0() { return cAbstractMethodParserRuleCall_0; }

		//Requires
		public RuleCall getRequiresParserRuleCall_1() { return cRequiresParserRuleCall_1; }

		//ClockConstraint
		public RuleCall getClockConstraintParserRuleCall_2() { return cClockConstraintParserRuleCall_2; }

		//AbstractInvariant
		public RuleCall getAbstractInvariantParserRuleCall_3() { return cAbstractInvariantParserRuleCall_3; }
	}

	public class RequiresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requires");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAMOUNTParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeUseTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Requires:
		//	"Requires" name=ID "[" AMOUNT "]" ":" type=UseType ";";
		public ParserRule getRule() { return rule; }

		//"Requires" name=ID "[" AMOUNT "]" ":" type=UseType ";"
		public Group getGroup() { return cGroup; }

		//"Requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_3() { return cAMOUNTParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//type=UseType
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_6_0() { return cTypeUseTypeParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class AbstractDynamicSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDynamicSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cType1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cType1RefTypeCrossReference_1_0 = (CrossReference)cType1Assignment_1.eContents().get(0);
		private final RuleCall cType1RefTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cType1RefTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cType2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cType2RefTypeCrossReference_2_1_0 = (CrossReference)cType2Assignment_2_1.eContents().get(0);
		private final RuleCall cType2RefTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cType2RefTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cType3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cType3RefTypeCrossReference_4_0 = (CrossReference)cType3Assignment_4.eContents().get(0);
		private final RuleCall cType3RefTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cType3RefTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cType4Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cType4RefTypeCrossReference_6_0 = (CrossReference)cType4Assignment_6.eContents().get(0);
		private final RuleCall cType4RefTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cType4RefTypeCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVerticalLineKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cType5Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cType5RefTypeCrossReference_7_1_0 = (CrossReference)cType5Assignment_7_1.eContents().get(0);
		private final RuleCall cType5RefTypeIDTerminalRuleCall_7_1_0_1 = (RuleCall)cType5RefTypeCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AbstractDynamicSwitch:
		//	"(" type1=[RefType] ("|" type2=[RefType])? "," type3=[RefType] "," type4=[RefType] ("|" type5=[RefType])? ")";
		public ParserRule getRule() { return rule; }

		//"(" type1=[RefType] ("|" type2=[RefType])? "," type3=[RefType] "," type4=[RefType] ("|" type5=[RefType])? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type1=[RefType]
		public Assignment getType1Assignment_1() { return cType1Assignment_1; }

		//[RefType]
		public CrossReference getType1RefTypeCrossReference_1_0() { return cType1RefTypeCrossReference_1_0; }

		//ID
		public RuleCall getType1RefTypeIDTerminalRuleCall_1_0_1() { return cType1RefTypeIDTerminalRuleCall_1_0_1; }

		//("|" type2=[RefType])?
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//type2=[RefType]
		public Assignment getType2Assignment_2_1() { return cType2Assignment_2_1; }

		//[RefType]
		public CrossReference getType2RefTypeCrossReference_2_1_0() { return cType2RefTypeCrossReference_2_1_0; }

		//ID
		public RuleCall getType2RefTypeIDTerminalRuleCall_2_1_0_1() { return cType2RefTypeIDTerminalRuleCall_2_1_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//type3=[RefType]
		public Assignment getType3Assignment_4() { return cType3Assignment_4; }

		//[RefType]
		public CrossReference getType3RefTypeCrossReference_4_0() { return cType3RefTypeCrossReference_4_0; }

		//ID
		public RuleCall getType3RefTypeIDTerminalRuleCall_4_0_1() { return cType3RefTypeIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//type4=[RefType]
		public Assignment getType4Assignment_6() { return cType4Assignment_6; }

		//[RefType]
		public CrossReference getType4RefTypeCrossReference_6_0() { return cType4RefTypeCrossReference_6_0; }

		//ID
		public RuleCall getType4RefTypeIDTerminalRuleCall_6_0_1() { return cType4RefTypeIDTerminalRuleCall_6_0_1; }

		//("|" type5=[RefType])?
		public Group getGroup_7() { return cGroup_7; }

		//"|"
		public Keyword getVerticalLineKeyword_7_0() { return cVerticalLineKeyword_7_0; }

		//type5=[RefType]
		public Assignment getType5Assignment_7_1() { return cType5Assignment_7_1; }

		//[RefType]
		public CrossReference getType5RefTypeCrossReference_7_1_0() { return cType5RefTypeCrossReference_7_1_0; }

		//ID
		public RuleCall getType5RefTypeIDTerminalRuleCall_7_1_0_1() { return cType5RefTypeIDTerminalRuleCall_7_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class RequiresAbstractCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiresAbstractComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAMOUNTParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cASYACTIONSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cAMOUNTParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAbstract_dynamic_switchAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0 = (RuleCall)cAbstract_dynamic_switchAssignment_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cABSTRACT_CONDTIONTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//RequiresAbstractComposition:
		//	"Requires" name=ID "[" AMOUNT "]" ASYACTIONS "[" AMOUNT "]" ":" abstract_dynamic_switch=AbstractDynamicSwitch "{"
		//	ABSTRACT_CONDTION "}" ";";
		public ParserRule getRule() { return rule; }

		//"Requires" name=ID "[" AMOUNT "]" ASYACTIONS "[" AMOUNT "]" ":" abstract_dynamic_switch=AbstractDynamicSwitch "{"
		//ABSTRACT_CONDTION "}" ";"
		public Group getGroup() { return cGroup; }

		//"Requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_3() { return cAMOUNTParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//ASYACTIONS
		public RuleCall getASYACTIONSTerminalRuleCall_5() { return cASYACTIONSTerminalRuleCall_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_7() { return cAMOUNTParserRuleCall_7; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//abstract_dynamic_switch=AbstractDynamicSwitch
		public Assignment getAbstract_dynamic_switchAssignment_10() { return cAbstract_dynamic_switchAssignment_10; }

		//AbstractDynamicSwitch
		public RuleCall getAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0() { return cAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//ABSTRACT_CONDTION
		public RuleCall getABSTRACT_CONDTIONTerminalRuleCall_12() { return cABSTRACT_CONDTIONTerminalRuleCall_12; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }

		//";"
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}

	public class ClockConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClockConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCLOCKTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClockConstraint:
		//	{ClockConstraint} "Constraint" name=CLOCK ";";
		public ParserRule getRule() { return rule; }

		//{ClockConstraint} "Constraint" name=CLOCK ";"
		public Group getGroup() { return cGroup; }

		//{ClockConstraint}
		public Action getClockConstraintAction_0() { return cClockConstraintAction_0; }

		//"Constraint"
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }

		//name=CLOCK
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CLOCK
		public RuleCall getNameCLOCKTerminalRuleCall_2_0() { return cNameCLOCKTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AbstractInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvariantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AbstractInvariant:
		//	{AbstractInvariant} "Invariant" "{" "}" ";";
		public ParserRule getRule() { return rule; }

		//{AbstractInvariant} "Invariant" "{" "}" ";"
		public Group getGroup() { return cGroup; }

		//{AbstractInvariant}
		public Action getAbstractInvariantAction_0() { return cAbstractInvariantAction_0; }

		//"Invariant"
		public Keyword getInvariantKeyword_1() { return cInvariantKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentoperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0 = (RuleCall)cAssignmentoperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		////expressions
		//Expression:
		//	ConditionalExpression (=> assignmentoperator=AssignmentOperator expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//ConditionalExpression (=> assignmentoperator=AssignmentOperator expression=Expression)?
		public Group getGroup() { return cGroup; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }

		//(=> assignmentoperator=AssignmentOperator expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> assignmentoperator=AssignmentOperator
		public Assignment getAssignmentoperatorAssignment_1_0() { return cAssignmentoperatorAssignment_1_0; }

		//AssignmentOperator
		public RuleCall getAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0() { return cAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPercentSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//AssignmentOperator:
		//	"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=";
		public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_8() { return cPercentSignEqualsSignKeyword_8; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0 = (RuleCall)cConditionalorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression2Assignment_1_3.eContents().get(0);
		
		//ConditionalExpression:
		//	conditionalorexpression=ConditionalOrExpression ("?" expression1=Expression ":" expression2=Expression)?;
		public ParserRule getRule() { return rule; }

		//conditionalorexpression=ConditionalOrExpression ("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup() { return cGroup; }

		//conditionalorexpression=ConditionalOrExpression
		public Assignment getConditionalorexpressionAssignment_0() { return cConditionalorexpressionAssignment_0; }

		//ConditionalOrExpression
		public RuleCall getConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0() { return cConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0; }

		//("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression1=Expression
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_0() { return cExpression1ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression2=Expression
		public Assignment getExpression2Assignment_1_3() { return cExpression2Assignment_1_3; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_3_0() { return cExpression2ExpressionParserRuleCall_1_3_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalandexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0 = (RuleCall)cConditionalandexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionalandexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionalandexpressionAssignment_1_1.eContents().get(0);
		
		//ConditionalOrExpression:
		//	conditionalandexpression+=ConditionalAndExpression ("or" conditionalandexpression+=ConditionalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//conditionalandexpression+=ConditionalAndExpression ("or" conditionalandexpression+=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//conditionalandexpression+=ConditionalAndExpression
		public Assignment getConditionalandexpressionAssignment_0() { return cConditionalandexpressionAssignment_0; }

		//ConditionalAndExpression
		public RuleCall getConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0() { return cConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0; }

		//("or" conditionalandexpression+=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//conditionalandexpression+=ConditionalAndExpression
		public Assignment getConditionalandexpressionAssignment_1_1() { return cConditionalandexpressionAssignment_1_1; }

		//ConditionalAndExpression
		public RuleCall getConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0() { return cConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclusiveorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0 = (RuleCall)cExclusiveorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExclusiveorexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0 = (RuleCall)cExclusiveorexpressionAssignment_1_1.eContents().get(0);
		
		//ConditionalAndExpression:
		//	exclusiveorexpression+=ExclusiveOrExpression ("and" exclusiveorexpression+=ExclusiveOrExpression)*;
		public ParserRule getRule() { return rule; }

		//exclusiveorexpression+=ExclusiveOrExpression ("and" exclusiveorexpression+=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }

		//exclusiveorexpression+=ExclusiveOrExpression
		public Assignment getExclusiveorexpressionAssignment_0() { return cExclusiveorexpressionAssignment_0; }

		//ExclusiveOrExpression
		public RuleCall getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0() { return cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0; }

		//("and" exclusiveorexpression+=ExclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//exclusiveorexpression+=ExclusiveOrExpression
		public Assignment getExclusiveorexpressionAssignment_1_1() { return cExclusiveorexpressionAssignment_1_1; }

		//ExclusiveOrExpression
		public RuleCall getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0() { return cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0; }
	}

	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEqualityexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEqualityexpressionEqualityExpressionParserRuleCall_0_0 = (RuleCall)cEqualityexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cXorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEqualityexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqualityexpressionEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cEqualityexpressionAssignment_1_1.eContents().get(0);
		
		//ExclusiveOrExpression:
		//	equalityexpression+=EqualityExpression ("xor" equalityexpression+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//equalityexpression+=EqualityExpression ("xor" equalityexpression+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//equalityexpression+=EqualityExpression
		public Assignment getEqualityexpressionAssignment_0() { return cEqualityexpressionAssignment_0; }

		//EqualityExpression
		public RuleCall getEqualityexpressionEqualityExpressionParserRuleCall_0_0() { return cEqualityexpressionEqualityExpressionParserRuleCall_0_0; }

		//("xor" equalityexpression+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"xor"
		public Keyword getXorKeyword_1_0() { return cXorKeyword_1_0; }

		//equalityexpression+=EqualityExpression
		public Assignment getEqualityexpressionAssignment_1_1() { return cEqualityexpressionAssignment_1_1; }

		//EqualityExpression
		public RuleCall getEqualityexpressionEqualityExpressionParserRuleCall_1_1_0() { return cEqualityexpressionEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceofexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0 = (RuleCall)cInstanceofexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cInstanceofexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0 = (RuleCall)cInstanceofexpressionAssignment_1_1.eContents().get(0);
		
		//EqualityExpression:
		//	instanceofexpression+=InstanceOfExpression (("==" | "!=") instanceofexpression+=InstanceOfExpression)*;
		public ParserRule getRule() { return rule; }

		//instanceofexpression+=InstanceOfExpression (("==" | "!=") instanceofexpression+=InstanceOfExpression)*
		public Group getGroup() { return cGroup; }

		//instanceofexpression+=InstanceOfExpression
		public Assignment getInstanceofexpressionAssignment_0() { return cInstanceofexpressionAssignment_0; }

		//InstanceOfExpression
		public RuleCall getInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0() { return cInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0; }

		//(("==" | "!=") instanceofexpression+=InstanceOfExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//instanceofexpression+=InstanceOfExpression
		public Assignment getInstanceofexpressionAssignment_1_1() { return cInstanceofexpressionAssignment_1_1; }

		//InstanceOfExpression
		public RuleCall getInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0() { return cInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0; }
	}

	public class InstanceOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInstanceofKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//InstanceOfExpression:
		//	RelationalExpression ("instanceof" type=UseType)?;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ("instanceof" type=UseType)?
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//("instanceof" type=UseType)?
		public Group getGroup_1() { return cGroup_1; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0() { return cInstanceofKeyword_1_0; }

		//type=UseType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_1_0() { return cTypeUseTypeParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditiveexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditiveexpressionAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cAdditiveexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRelationalopAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationalopRelationalOpParserRuleCall_1_0_0 = (RuleCall)cRelationalopAssignment_1_0.eContents().get(0);
		private final Assignment cAdditiveexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cAdditiveexpressionAssignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//	additiveexpression+=AdditiveExpression (relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//additiveexpression+=AdditiveExpression (relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//additiveexpression+=AdditiveExpression
		public Assignment getAdditiveexpressionAssignment_0() { return cAdditiveexpressionAssignment_0; }

		//AdditiveExpression
		public RuleCall getAdditiveexpressionAdditiveExpressionParserRuleCall_0_0() { return cAdditiveexpressionAdditiveExpressionParserRuleCall_0_0; }

		//(relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//relationalop+=RelationalOp
		public Assignment getRelationalopAssignment_1_0() { return cRelationalopAssignment_1_0; }

		//RelationalOp
		public RuleCall getRelationalopRelationalOpParserRuleCall_1_0_0() { return cRelationalopRelationalOpParserRuleCall_1_0_0; }

		//additiveexpression+=AdditiveExpression
		public Assignment getAdditiveexpressionAssignment_1_1() { return cAdditiveexpressionAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0() { return cAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelationalOp:
		//	"<" | "<=" | ">" | ">=";
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicativeexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cMultiplicativeexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMultiplicativeexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicativeexpressionAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//	multiplicativeexpression+=MultiplicativeExpression (("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//multiplicativeexpression+=MultiplicativeExpression (("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//multiplicativeexpression+=MultiplicativeExpression
		public Assignment getMultiplicativeexpressionAssignment_0() { return cMultiplicativeexpressionAssignment_0; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0() { return cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0; }

		//(("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//multiplicativeexpression+=MultiplicativeExpression
		public Assignment getMultiplicativeexpressionAssignment_1_1() { return cMultiplicativeexpressionAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0() { return cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_0_0 = (RuleCall)cUnaryexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cUnaryexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cUnaryexpressionAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//	unaryexpression+=UnaryExpression (("*" | "/" | "%") unaryexpression+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//unaryexpression+=UnaryExpression (("*" | "/" | "%") unaryexpression+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//unaryexpression+=UnaryExpression
		public Assignment getUnaryexpressionAssignment_0() { return cUnaryexpressionAssignment_0; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_0_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_0_0; }

		//(("*" | "/" | "%") unaryexpression+=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//unaryexpression+=UnaryExpression
		public Assignment getUnaryexpressionAssignment_1_1() { return cUnaryexpressionAssignment_1_1; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_1_1_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cUnaryExpressionNotPlusMinusParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//UnaryExpression:
		//	"+" UnaryExpression | "-" UnaryExpression | "++" UnaryExpression | "--" UnaryExpression |
		//	UnaryExpressionNotPlusMinus;
		public ParserRule getRule() { return rule; }

		//"+" UnaryExpression | "-" UnaryExpression | "++" UnaryExpression | "--" UnaryExpression | UnaryExpressionNotPlusMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//"-" UnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_1() { return cUnaryExpressionParserRuleCall_1_1; }

		//"++" UnaryExpression
		public Group getGroup_2() { return cGroup_2; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0() { return cPlusSignPlusSignKeyword_2_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_2_1() { return cUnaryExpressionParserRuleCall_2_1; }

		//"--" UnaryExpression
		public Group getGroup_3() { return cGroup_3; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3_0() { return cHyphenMinusHyphenMinusKeyword_3_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_3_1() { return cUnaryExpressionParserRuleCall_3_1; }

		//UnaryExpressionNotPlusMinus
		public RuleCall getUnaryExpressionNotPlusMinusParserRuleCall_4() { return cUnaryExpressionNotPlusMinusParserRuleCall_4; }
	}

	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpressionNotPlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryExpressionNotPlusMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cUnaryexpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0 = (RuleCall)cUnaryexpressionAssignment_1_0_1.eContents().get(0);
		private final Assignment cPrimaryAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPrimaryPrimaryParserRuleCall_1_1_0 = (RuleCall)cPrimaryAssignment_1_1.eContents().get(0);
		
		//UnaryExpressionNotPlusMinus:
		//	{UnaryExpressionNotPlusMinus} ("!" unaryexpression=UnaryExpression //	| castexpression=CastExpression
		//	| primary=Primary);
		public ParserRule getRule() { return rule; }

		//{UnaryExpressionNotPlusMinus} ("!" unaryexpression=UnaryExpression //	| castexpression=CastExpression
		//| primary=Primary)
		public Group getGroup() { return cGroup; }

		//{UnaryExpressionNotPlusMinus}
		public Action getUnaryExpressionNotPlusMinusAction_0() { return cUnaryExpressionNotPlusMinusAction_0; }

		//"!" unaryexpression=UnaryExpression //	| castexpression=CastExpression
		//| primary=Primary
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"!" unaryexpression=UnaryExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0_0() { return cExclamationMarkKeyword_1_0_0; }

		//unaryexpression=UnaryExpression
		public Assignment getUnaryexpressionAssignment_1_0_1() { return cUnaryexpressionAssignment_1_0_1; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0; }

		//primary=Primary
		public Assignment getPrimaryAssignment_1_1() { return cPrimaryAssignment_1_1; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_1_1_0() { return cPrimaryPrimaryParserRuleCall_1_1_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cParexpressionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cParexpressionParExpressionParserRuleCall_1_0_0 = (RuleCall)cParexpressionAssignment_1_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_1_0 = (RuleCall)cLiteralAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cThisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_2_1_1_0 = (RuleCall)cIdentifierAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cIdentifiersuffixAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cIdentifiersuffixIdentifierSuffixParserRuleCall_1_2_2_0 = (RuleCall)cIdentifiersuffixAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cIdentifierAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_3_0_0 = (RuleCall)cIdentifierAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cFullStopKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_3_1_1_0 = (RuleCall)cIdentifierAssignment_1_3_1_1.eContents().get(0);
		private final Assignment cIdentifiersuffixAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cIdentifiersuffixIdentifierSuffixParserRuleCall_1_3_2_0 = (RuleCall)cIdentifiersuffixAssignment_1_3_2.eContents().get(0);
		
		//Primary:
		//	{Primary} (parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
		//	// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
		//	| literal=Literal | "this" ("." identifier+=ID)* => identifiersuffix=IdentifierSuffix? | identifier+=ID ("."
		//	identifier+=ID)* => identifiersuffix=IdentifierSuffix?);
		public ParserRule getRule() { return rule; }

		//{Primary} (parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
		//// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
		//| literal=Literal | "this" ("." identifier+=ID)* => identifiersuffix=IdentifierSuffix? | identifier+=ID ("."
		//identifier+=ID)* => identifiersuffix=IdentifierSuffix?)
		public Group getGroup() { return cGroup; }

		//{Primary}
		public Action getPrimaryAction_0() { return cPrimaryAction_0; }

		//parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
		//// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
		//| literal=Literal | "this" ("." identifier+=ID)* => identifiersuffix=IdentifierSuffix? | identifier+=ID ("."
		//identifier+=ID)* => identifiersuffix=IdentifierSuffix?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//parexpression=ParExpression
		public Assignment getParexpressionAssignment_1_0() { return cParexpressionAssignment_1_0; }

		//ParExpression
		public RuleCall getParexpressionParExpressionParserRuleCall_1_0_0() { return cParexpressionParExpressionParserRuleCall_1_0_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_1_1() { return cLiteralAssignment_1_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_1_0() { return cLiteralLiteralParserRuleCall_1_1_0; }

		//"this" ("." identifier+=ID)* => identifiersuffix=IdentifierSuffix?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"this"
		public Keyword getThisKeyword_1_2_0() { return cThisKeyword_1_2_0; }

		//("." identifier+=ID)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"."
		public Keyword getFullStopKeyword_1_2_1_0() { return cFullStopKeyword_1_2_1_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_2_1_1() { return cIdentifierAssignment_1_2_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_2_1_1_0() { return cIdentifierIDTerminalRuleCall_1_2_1_1_0; }

		//=> identifiersuffix=IdentifierSuffix?
		public Assignment getIdentifiersuffixAssignment_1_2_2() { return cIdentifiersuffixAssignment_1_2_2; }

		//IdentifierSuffix
		public RuleCall getIdentifiersuffixIdentifierSuffixParserRuleCall_1_2_2_0() { return cIdentifiersuffixIdentifierSuffixParserRuleCall_1_2_2_0; }

		//identifier+=ID ("." identifier+=ID)* => identifiersuffix=IdentifierSuffix?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_3_0() { return cIdentifierAssignment_1_3_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_3_0_0() { return cIdentifierIDTerminalRuleCall_1_3_0_0; }

		//("." identifier+=ID)*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//"."
		public Keyword getFullStopKeyword_1_3_1_0() { return cFullStopKeyword_1_3_1_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_3_1_1() { return cIdentifierAssignment_1_3_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_3_1_1_0() { return cIdentifierIDTerminalRuleCall_1_3_1_1_0; }

		//=> identifiersuffix=IdentifierSuffix?
		public Assignment getIdentifiersuffixAssignment_1_3_2() { return cIdentifiersuffixAssignment_1_3_2; }

		//IdentifierSuffix
		public RuleCall getIdentifiersuffixIdentifierSuffixParserRuleCall_1_3_2_0() { return cIdentifiersuffixIdentifierSuffixParserRuleCall_1_3_2_0; }
	}

	public class IdentifierSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierSuffixAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cClassKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cClassKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFullStopKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cThisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cSuperKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_4_2_0 = (RuleCall)cArgumentsAssignment_1_4_2.eContents().get(0);
		
		//IdentifierSuffix:
		//	{IdentifierSuffix} (("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super"
		//	arguments=Arguments);
		public ParserRule getRule() { return rule; }

		//{IdentifierSuffix} (("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super"
		//arguments=Arguments)
		public Group getGroup() { return cGroup; }

		//{IdentifierSuffix}
		public Action getIdentifierSuffixAction_0() { return cIdentifierSuffixAction_0; }

		//("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super" arguments=Arguments
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//("[" "]")+ "." "class"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//("[" "]")+
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0_0() { return cLeftSquareBracketKeyword_1_0_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0_1() { return cRightSquareBracketKeyword_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//"class"
		public Keyword getClassKeyword_1_0_2() { return cClassKeyword_1_0_2; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_1_0() { return cArgumentsArgumentsParserRuleCall_1_1_0; }

		//"." "class"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//"class"
		public Keyword getClassKeyword_1_2_1() { return cClassKeyword_1_2_1; }

		//"." "this"
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"."
		public Keyword getFullStopKeyword_1_3_0() { return cFullStopKeyword_1_3_0; }

		//"this"
		public Keyword getThisKeyword_1_3_1() { return cThisKeyword_1_3_1; }

		//"." "super" arguments=Arguments
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"."
		public Keyword getFullStopKeyword_1_4_0() { return cFullStopKeyword_1_4_0; }

		//"super"
		public Keyword getSuperKeyword_1_4_1() { return cSuperKeyword_1_4_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_4_2() { return cArgumentsAssignment_1_4_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_4_2_0() { return cArgumentsArgumentsParserRuleCall_1_4_2_0; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//	{Arguments} "(" expressionlist=ExpressionList? ")";
		public ParserRule getRule() { return rule; }

		//{Arguments} "(" expressionlist=ExpressionList? ")"
		public Group getGroup() { return cGroup; }

		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressionlist=ExpressionList?
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }

		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_2_0() { return cExpressionlistExpressionListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expression1=Expression ("," expression2+=Expression)*;
		public ParserRule getRule() { return rule; }

		//expression1=Expression ("," expression2+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression1=Expression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_0_0() { return cExpression1ExpressionParserRuleCall_0_0; }

		//("," expression2+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }
	}

	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCastExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeUseTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnaryexpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_4_0 = (RuleCall)cUnaryexpressionAssignment_4.eContents().get(0);
		
		//CastExpression:
		//	{CastExpression} "(" type=UseType ")" unaryexpression=UnaryExpression;
		public ParserRule getRule() { return rule; }

		//{CastExpression} "(" type=UseType ")" unaryexpression=UnaryExpression
		public Group getGroup() { return cGroup; }

		//{CastExpression}
		public Action getCastExpressionAction_0() { return cCastExpressionAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=UseType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_2_0() { return cTypeUseTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//unaryexpression=UnaryExpression
		public Assignment getUnaryexpressionAssignment_4() { return cUnaryexpressionAssignment_4; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_4_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_4_0; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParExpression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATING_POINT_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Keyword cNullKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Literal:
		//	IntegerLiteral | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BooleanLiteral | "null";
		public ParserRule getRule() { return rule; }

		//IntegerLiteral | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BooleanLiteral | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//FLOATING_POINT_LITERAL
		public RuleCall getFLOATING_POINT_LITERALTerminalRuleCall_1() { return cFLOATING_POINT_LITERALTerminalRuleCall_1; }

		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_2() { return cCHARACTER_LITERALTerminalRuleCall_2; }

		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_3() { return cSTRING_LITERALTerminalRuleCall_3; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_4() { return cBooleanLiteralParserRuleCall_4; }

		//"null"
		public Keyword getNullKeyword_5() { return cNullKeyword_5; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEX_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOCTAL_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMAL_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntegerLiteral:
		//	HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL;
		public ParserRule getRule() { return rule; }

		//HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX_LITERAL
		public RuleCall getHEX_LITERALTerminalRuleCall_0() { return cHEX_LITERALTerminalRuleCall_0; }

		//OCTAL_LITERAL
		public RuleCall getOCTAL_LITERALTerminalRuleCall_1() { return cOCTAL_LITERALTerminalRuleCall_1; }

		//DECIMAL_LITERAL
		public RuleCall getDECIMAL_LITERALTerminalRuleCall_2() { return cDECIMAL_LITERALTerminalRuleCall_2; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class DE_LHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DE_LHS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVar1IDTerminalRuleCall_2_0 = (RuleCall)cVar1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVar2IDTerminalRuleCall_4_0 = (RuleCall)cVar2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOrderAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOrderINTTerminalRuleCall_6_0 = (RuleCall)cOrderAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////Differential Equations
		//DE_LHS:
		//	"dot" "(" var1=ID "," var2=ID "," order=INT ")";
		public ParserRule getRule() { return rule; }

		//"dot" "(" var1=ID "," var2=ID "," order=INT ")"
		public Group getGroup() { return cGroup; }

		//"dot"
		public Keyword getDotKeyword_0() { return cDotKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=ID
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//ID
		public RuleCall getVar1IDTerminalRuleCall_2_0() { return cVar1IDTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=ID
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//ID
		public RuleCall getVar2IDTerminalRuleCall_4_0() { return cVar2IDTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//order=INT
		public Assignment getOrderAssignment_6() { return cOrderAssignment_6; }

		//INT
		public RuleCall getOrderINTTerminalRuleCall_6_0() { return cOrderINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class DifferentialEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DifferentialEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLHSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLHSDE_LHSParserRuleCall_0_0 = (RuleCall)cLHSAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRHSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRHSExpressionParserRuleCall_2_0 = (RuleCall)cRHSAssignment_2.eContents().get(0);
		
		//DifferentialEquation:
		//	LHS=DE_LHS "==" RHS=Expression;
		public ParserRule getRule() { return rule; }

		//LHS=DE_LHS "==" RHS=Expression
		public Group getGroup() { return cGroup; }

		//LHS=DE_LHS
		public Assignment getLHSAssignment_0() { return cLHSAssignment_0; }

		//DE_LHS
		public RuleCall getLHSDE_LHSParserRuleCall_0_0() { return cLHSDE_LHSParserRuleCall_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }

		//RHS=Expression
		public Assignment getRHSAssignment_2() { return cRHSAssignment_2; }

		//Expression
		public RuleCall getRHSExpressionParserRuleCall_2_0() { return cRHSExpressionParserRuleCall_2_0; }
	}
	
	
	private ProgramElements pProgram;
	private PackageDeclarationElements pPackageDeclaration;
	private AbstractElementElements pAbstractElement;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private TypeElements pType;
	private ModifierElements pModifier;
	private BuiltInModifierElements pBuiltInModifier;
	private RefTypeElements pRefType;
	private NonRefTypeElements pNonRefType;
	private BasicTypeElements pBasicType;
	private MathTypeElements pMathType;
	private InterfaceElements pInterface;
	private ClassElements pClass;
	private MemberElements pMember;
	private FieldNameElements pFieldName;
	private FieldElements pField;
	private MethodElements pMethod;
	private AbstractMethodElements pAbstractMethod;
	private UseTypeElements pUseType;
	private ParameterElements pParameter;
	private TypedElementElements pTypedElement;
	private MethodBodyElements pMethodBody;
	private AbstractMethodBodyElements pAbstractMethodBody;
	private LocalVarNameElements pLocalVarName;
	private LocalVarDecElements pLocalVarDec;
	private VariableInitializerElements pVariableInitializer;
	private ReturnStatementElements pReturnStatement;
	private TerminalExpressionElements pTerminalExpression;
	private ThisElements pThis;
	private ParamRefElements pParamRef;
	private NewByClassElements pNewByClass;
	private CastElements pCast;
	private ParenElements pParen;
	private ConstantElements pConstant;
	private StringConstantElements pStringConstant;
	private IntConstantElements pIntConstant;
	private BoolConstantElements pBoolConstant;
	private TerminalRule tAMOUNT_GEONE;
	private TerminalRule tAMOUNT_ONE_OR_ZERO;
	private AMOUNTElements pAMOUNT;
	private AbstractInterfaceElementElements pAbstractInterfaceElement;
	private RequiresElements pRequires;
	private TerminalRule tASYACTIONS;
	private AbstractDynamicSwitchElements pAbstractDynamicSwitch;
	private TerminalRule tABSTRACT_CONDTION;
	private RequiresAbstractCompositionElements pRequiresAbstractComposition;
	private TerminalRule tCLOCK;
	private ClockConstraintElements pClockConstraint;
	private AbstractInvariantElements pAbstractInvariant;
	private ExpressionElements pExpression;
	private AssignmentOperatorElements pAssignmentOperator;
	private ConditionalExpressionElements pConditionalExpression;
	private ConditionalOrExpressionElements pConditionalOrExpression;
	private ConditionalAndExpressionElements pConditionalAndExpression;
	private ExclusiveOrExpressionElements pExclusiveOrExpression;
	private EqualityExpressionElements pEqualityExpression;
	private InstanceOfExpressionElements pInstanceOfExpression;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOpElements pRelationalOp;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private PrimaryElements pPrimary;
	private IdentifierSuffixElements pIdentifierSuffix;
	private ArgumentsElements pArguments;
	private ExpressionListElements pExpressionList;
	private CastExpressionElements pCastExpression;
	private ParExpressionElements pParExpression;
	private LiteralElements pLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private TerminalRule tHEX_LITERAL;
	private TerminalRule tDECIMAL_LITERAL;
	private TerminalRule tOCTAL_LITERAL;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tINTEGER_TYPE_SUFFIX;
	private TerminalRule tFLOATING_POINT_LITERAL;
	private TerminalRule tEXPONENT;
	private TerminalRule tFLOAT_TYPE_SUFFIX;
	private TerminalRule tCHARACTER_LITERAL;
	private TerminalRule tSTRING_LITERAL;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tOCTAL_ESCAPE;
	private TerminalRule tUNICODE_ESCAPE;
	private BooleanLiteralElements pBooleanLiteral;
	private DE_LHSElements pDE_LHS;
	private DifferentialEquationElements pDifferentialEquation;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ApricotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.fofo.Apricot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	PackageDeclaration;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName ";" imports+=Import* elements+=AbstractElement*;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//AbstractElement:
	//	RefType;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Type:
	//	NonRefType | RefType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Modifier:
	//	"public" | "private";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//BuiltInModifier:
	//	"Native";
	public BuiltInModifierElements getBuiltInModifierAccess() {
		return (pBuiltInModifier != null) ? pBuiltInModifier : (pBuiltInModifier = new BuiltInModifierElements());
	}
	
	public ParserRule getBuiltInModifierRule() {
		return getBuiltInModifierAccess().getRule();
	}

	//RefType:
	//	Class | Interface;
	public RefTypeElements getRefTypeAccess() {
		return (pRefType != null) ? pRefType : (pRefType = new RefTypeElements());
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}

	//NonRefType:
	//	BasicType | MathType;
	public NonRefTypeElements getNonRefTypeAccess() {
		return (pNonRefType != null) ? pNonRefType : (pNonRefType = new NonRefTypeElements());
	}
	
	public ParserRule getNonRefTypeRule() {
		return getNonRefTypeAccess().getRule();
	}

	//BasicType:
	//	BT=("void" | "int" | "real" | "boolean" | "String");
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//MathType:
	//	MT=("Int" | "Real");
	public MathTypeElements getMathTypeAccess() {
		return (pMathType != null) ? pMathType : (pMathType = new MathTypeElements());
	}
	
	public ParserRule getMathTypeRule() {
		return getMathTypeAccess().getRule();
	}

	//Interface:
	//	Modifier? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{"
	//	members+=AbstractInterfaceElement* "}";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Class:
	//	Modifier? "class" name=ID ("extends" superclass=[Class|QualifiedName])? ("implements"
	//	interfaceclass=[Interface|QualifiedName])? "{" members+=Member* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Member:
	//	Field | Method;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//FieldName:
	//	ID;
	public FieldNameElements getFieldNameAccess() {
		return (pFieldName != null) ? pFieldName : (pFieldName = new FieldNameElements());
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	//Field:
	//	type=UseType name=FieldName ("=" varini=VariableInitializer)? ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Method:
	//	Modifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//AbstractMethod:
	//	Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ("{"
	//	body=AbstractMethodBody "}")? ";";
	public AbstractMethodElements getAbstractMethodAccess() {
		return (pAbstractMethod != null) ? pAbstractMethod : (pAbstractMethod = new AbstractMethodElements());
	}
	
	public ParserRule getAbstractMethodRule() {
		return getAbstractMethodAccess().getRule();
	}

	////THE MOST IMPORTANT RULE 
	//UseType:
	//	type1=[RefType] | type2=NonRefType;
	public UseTypeElements getUseTypeAccess() {
		return (pUseType != null) ? pUseType : (pUseType = new UseTypeElements());
	}
	
	public ParserRule getUseTypeRule() {
		return getUseTypeAccess().getRule();
	}

	//Parameter:
	//	type=UseType name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//TypedElement:
	//	Member | Parameter;
	public TypedElementElements getTypedElementAccess() {
		return (pTypedElement != null) ? pTypedElement : (pTypedElement = new TypedElementElements());
	}
	
	public ParserRule getTypedElementRule() {
		return getTypedElementAccess().getRule();
	}

	//MethodBody:
	//	locvars+=LocalVarDec* return=ReturnStatement;
	public MethodBodyElements getMethodBodyAccess() {
		return (pMethodBody != null) ? pMethodBody : (pMethodBody = new MethodBodyElements());
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}

	//AbstractMethodBody:
	//	RequiresAbstractComposition;
	public AbstractMethodBodyElements getAbstractMethodBodyAccess() {
		return (pAbstractMethodBody != null) ? pAbstractMethodBody : (pAbstractMethodBody = new AbstractMethodBodyElements());
	}
	
	public ParserRule getAbstractMethodBodyRule() {
		return getAbstractMethodBodyAccess().getRule();
	}

	//LocalVarName:
	//	ID;
	public LocalVarNameElements getLocalVarNameAccess() {
		return (pLocalVarName != null) ? pLocalVarName : (pLocalVarName = new LocalVarNameElements());
	}
	
	public ParserRule getLocalVarNameRule() {
		return getLocalVarNameAccess().getRule();
	}

	//LocalVarDec:
	//	type=UseType name=LocalVarName ("=" varini=VariableInitializer)? ";";
	public LocalVarDecElements getLocalVarDecAccess() {
		return (pLocalVarDec != null) ? pLocalVarDec : (pLocalVarDec = new LocalVarDecElements());
	}
	
	public ParserRule getLocalVarDecRule() {
		return getLocalVarDecAccess().getRule();
	}

	//VariableInitializer:
	//	Expression;
	public VariableInitializerElements getVariableInitializerAccess() {
		return (pVariableInitializer != null) ? pVariableInitializer : (pVariableInitializer = new VariableInitializerElements());
	}
	
	public ParserRule getVariableInitializerRule() {
		return getVariableInitializerAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// * 
	//Expression:		 
	//	
	//    TerminalExpression  
	//    =>(
	//        {Selection.receiver=current} '.' 
	//        message=[Member]
	//        ('(' (args+=Expression (',' args+=Expression)*)? ')')?
	//    )*     
	//    ;
	//
	// * / TerminalExpression returns Expression:
	//	This | ParamRef | NewByClass | => Cast | Constant | Paren;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//This:
	//	variable="this";
	public ThisElements getThisAccess() {
		return (pThis != null) ? pThis : (pThis = new ThisElements());
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}

	//ParamRef:
	//	parameter=[Parameter];
	public ParamRefElements getParamRefAccess() {
		return (pParamRef != null) ? pParamRef : (pParamRef = new ParamRefElements());
	}
	
	public ParserRule getParamRefRule() {
		return getParamRefAccess().getRule();
	}

	//NewByClass:
	//	"new" type=[Class] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public NewByClassElements getNewByClassAccess() {
		return (pNewByClass != null) ? pNewByClass : (pNewByClass = new NewByClassElements());
	}
	
	public ParserRule getNewByClassRule() {
		return getNewByClassAccess().getRule();
	}

	//Cast:
	//	"(" type=UseType ")" expression=TerminalExpression;
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//Paren returns Expression:
	//	"(" Expression ")";
	public ParenElements getParenAccess() {
		return (pParen != null) ? pParen : (pParen = new ParenElements());
	}
	
	public ParserRule getParenRule() {
		return getParenAccess().getRule();
	}

	//Constant:
	//	IntConstant | BoolConstant | StringConstant;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//StringConstant:
	//	constant=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//IntConstant:
	//	constant=INT;
	public IntConstantElements getIntConstantAccess() {
		return (pIntConstant != null) ? pIntConstant : (pIntConstant = new IntConstantElements());
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}

	//BoolConstant:
	//	constant=("true" | "false");
	public BoolConstantElements getBoolConstantAccess() {
		return (pBoolConstant != null) ? pBoolConstant : (pBoolConstant = new BoolConstantElements());
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}

	////Requires
	//terminal AMOUNT_GEONE:
	//	"1..*";
	public TerminalRule getAMOUNT_GEONERule() {
		return (tAMOUNT_GEONE != null) ? tAMOUNT_GEONE : (tAMOUNT_GEONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMOUNT_GEONE"));
	} 

	//terminal AMOUNT_ONE_OR_ZERO:
	//	"0..1";
	public TerminalRule getAMOUNT_ONE_OR_ZERORule() {
		return (tAMOUNT_ONE_OR_ZERO != null) ? tAMOUNT_ONE_OR_ZERO : (tAMOUNT_ONE_OR_ZERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMOUNT_ONE_OR_ZERO"));
	} 

	//AMOUNT:
	//	AMOUNT_GEONE | AMOUNT_ONE_OR_ZERO;
	public AMOUNTElements getAMOUNTAccess() {
		return (pAMOUNT != null) ? pAMOUNT : (pAMOUNT = new AMOUNTElements());
	}
	
	public ParserRule getAMOUNTRule() {
		return getAMOUNTAccess().getRule();
	}

	//AbstractInterfaceElement:
	//	AbstractMethod | Requires | ClockConstraint | AbstractInvariant;
	public AbstractInterfaceElementElements getAbstractInterfaceElementAccess() {
		return (pAbstractInterfaceElement != null) ? pAbstractInterfaceElement : (pAbstractInterfaceElement = new AbstractInterfaceElementElements());
	}
	
	public ParserRule getAbstractInterfaceElementRule() {
		return getAbstractInterfaceElementAccess().getRule();
	}

	//Requires:
	//	"Requires" name=ID "[" AMOUNT "]" ":" type=UseType ";";
	public RequiresElements getRequiresAccess() {
		return (pRequires != null) ? pRequires : (pRequires = new RequiresElements());
	}
	
	public ParserRule getRequiresRule() {
		return getRequiresAccess().getRule();
	}

	//terminal ASYACTIONS:
	//	"(" "?" "|" "!" ")";
	public TerminalRule getASYACTIONSRule() {
		return (tASYACTIONS != null) ? tASYACTIONS : (tASYACTIONS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASYACTIONS"));
	} 

	//AbstractDynamicSwitch:
	//	"(" type1=[RefType] ("|" type2=[RefType])? "," type3=[RefType] "," type4=[RefType] ("|" type5=[RefType])? ")";
	public AbstractDynamicSwitchElements getAbstractDynamicSwitchAccess() {
		return (pAbstractDynamicSwitch != null) ? pAbstractDynamicSwitch : (pAbstractDynamicSwitch = new AbstractDynamicSwitchElements());
	}
	
	public ParserRule getAbstractDynamicSwitchRule() {
		return getAbstractDynamicSwitchAccess().getRule();
	}

	//terminal ABSTRACT_CONDTION:
	//	"Condition" "{" "}" ";";
	public TerminalRule getABSTRACT_CONDTIONRule() {
		return (tABSTRACT_CONDTION != null) ? tABSTRACT_CONDTION : (tABSTRACT_CONDTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ABSTRACT_CONDTION"));
	} 

	//RequiresAbstractComposition:
	//	"Requires" name=ID "[" AMOUNT "]" ASYACTIONS "[" AMOUNT "]" ":" abstract_dynamic_switch=AbstractDynamicSwitch "{"
	//	ABSTRACT_CONDTION "}" ";";
	public RequiresAbstractCompositionElements getRequiresAbstractCompositionAccess() {
		return (pRequiresAbstractComposition != null) ? pRequiresAbstractComposition : (pRequiresAbstractComposition = new RequiresAbstractCompositionElements());
	}
	
	public ParserRule getRequiresAbstractCompositionRule() {
		return getRequiresAbstractCompositionAccess().getRule();
	}

	//terminal CLOCK:
	//	"clock";
	public TerminalRule getCLOCKRule() {
		return (tCLOCK != null) ? tCLOCK : (tCLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLOCK"));
	} 

	//ClockConstraint:
	//	{ClockConstraint} "Constraint" name=CLOCK ";";
	public ClockConstraintElements getClockConstraintAccess() {
		return (pClockConstraint != null) ? pClockConstraint : (pClockConstraint = new ClockConstraintElements());
	}
	
	public ParserRule getClockConstraintRule() {
		return getClockConstraintAccess().getRule();
	}

	//AbstractInvariant:
	//	{AbstractInvariant} "Invariant" "{" "}" ";";
	public AbstractInvariantElements getAbstractInvariantAccess() {
		return (pAbstractInvariant != null) ? pAbstractInvariant : (pAbstractInvariant = new AbstractInvariantElements());
	}
	
	public ParserRule getAbstractInvariantRule() {
		return getAbstractInvariantAccess().getRule();
	}

	////expressions
	//Expression:
	//	ConditionalExpression (=> assignmentoperator=AssignmentOperator expression=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentOperator:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (pAssignmentOperator != null) ? pAssignmentOperator : (pAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//ConditionalExpression:
	//	conditionalorexpression=ConditionalOrExpression ("?" expression1=Expression ":" expression2=Expression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ConditionalOrExpression:
	//	conditionalandexpression+=ConditionalAndExpression ("or" conditionalandexpression+=ConditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return (pConditionalOrExpression != null) ? pConditionalOrExpression : (pConditionalOrExpression = new ConditionalOrExpressionElements());
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	//ConditionalAndExpression:
	//	exclusiveorexpression+=ExclusiveOrExpression ("and" exclusiveorexpression+=ExclusiveOrExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return (pConditionalAndExpression != null) ? pConditionalAndExpression : (pConditionalAndExpression = new ConditionalAndExpressionElements());
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//ExclusiveOrExpression:
	//	equalityexpression+=EqualityExpression ("xor" equalityexpression+=EqualityExpression)*;
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return (pExclusiveOrExpression != null) ? pExclusiveOrExpression : (pExclusiveOrExpression = new ExclusiveOrExpressionElements());
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}

	//EqualityExpression:
	//	instanceofexpression+=InstanceOfExpression (("==" | "!=") instanceofexpression+=InstanceOfExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//InstanceOfExpression:
	//	RelationalExpression ("instanceof" type=UseType)?;
	public InstanceOfExpressionElements getInstanceOfExpressionAccess() {
		return (pInstanceOfExpression != null) ? pInstanceOfExpression : (pInstanceOfExpression = new InstanceOfExpressionElements());
	}
	
	public ParserRule getInstanceOfExpressionRule() {
		return getInstanceOfExpressionAccess().getRule();
	}

	//RelationalExpression:
	//	additiveexpression+=AdditiveExpression (relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalOp:
	//	"<" | "<=" | ">" | ">=";
	public RelationalOpElements getRelationalOpAccess() {
		return (pRelationalOp != null) ? pRelationalOp : (pRelationalOp = new RelationalOpElements());
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//AdditiveExpression:
	//	multiplicativeexpression+=MultiplicativeExpression (("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	unaryexpression+=UnaryExpression (("*" | "/" | "%") unaryexpression+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression:
	//	"+" UnaryExpression | "-" UnaryExpression | "++" UnaryExpression | "--" UnaryExpression |
	//	UnaryExpressionNotPlusMinus;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryExpressionNotPlusMinus:
	//	{UnaryExpressionNotPlusMinus} ("!" unaryexpression=UnaryExpression //	| castexpression=CastExpression
	//	| primary=Primary);
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return (pUnaryExpressionNotPlusMinus != null) ? pUnaryExpressionNotPlusMinus : (pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements());
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}

	//Primary:
	//	{Primary} (parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
	//	// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
	//	| literal=Literal | "this" ("." identifier+=ID)* => identifiersuffix=IdentifierSuffix? | identifier+=ID ("."
	//	identifier+=ID)* => identifiersuffix=IdentifierSuffix?);
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//IdentifierSuffix:
	//	{IdentifierSuffix} (("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super"
	//	arguments=Arguments);
	public IdentifierSuffixElements getIdentifierSuffixAccess() {
		return (pIdentifierSuffix != null) ? pIdentifierSuffix : (pIdentifierSuffix = new IdentifierSuffixElements());
	}
	
	public ParserRule getIdentifierSuffixRule() {
		return getIdentifierSuffixAccess().getRule();
	}

	//Arguments:
	//	{Arguments} "(" expressionlist=ExpressionList? ")";
	public ArgumentsElements getArgumentsAccess() {
		return (pArguments != null) ? pArguments : (pArguments = new ArgumentsElements());
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//ExpressionList:
	//	expression1=Expression ("," expression2+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//CastExpression:
	//	{CastExpression} "(" type=UseType ")" unaryexpression=UnaryExpression;
	public CastExpressionElements getCastExpressionAccess() {
		return (pCastExpression != null) ? pCastExpression : (pCastExpression = new CastExpressionElements());
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}

	//ParExpression:
	//	"(" Expression ")";
	public ParExpressionElements getParExpressionAccess() {
		return (pParExpression != null) ? pParExpression : (pParExpression = new ParExpressionElements());
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//Literal:
	//	IntegerLiteral | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | BooleanLiteral | "null";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//terminal HEX_LITERAL:
	//	"0" ("x" | "X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return (tHEX_LITERAL != null) ? tHEX_LITERAL : (tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_LITERAL"));
	} 

	//terminal DECIMAL_LITERAL:
	//	("0" | "1".."9" "0".."9"*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return (tDECIMAL_LITERAL != null) ? tDECIMAL_LITERAL : (tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_LITERAL"));
	} 

	//terminal OCTAL_LITERAL:
	//	"0" "0".."7"+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return (tOCTAL_LITERAL != null) ? tOCTAL_LITERAL : (tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_LITERAL"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	"l" | "L";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return (tINTEGER_TYPE_SUFFIX != null) ? tINTEGER_TYPE_SUFFIX : (tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX"));
	} 

	//terminal FLOATING_POINT_LITERAL:
	//	"0".."9"+ "." "0".."9"* EXPONENT? FLOAT_TYPE_SUFFIX? | "." "0".."9"+ EXPONENT? FLOAT_TYPE_SUFFIX? | "0".."9"+
	//	EXPONENT FLOAT_TYPE_SUFFIX? | "0".."9"+ FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOATING_POINT_LITERALRule() {
		return (tFLOATING_POINT_LITERAL != null) ? tFLOATING_POINT_LITERAL : (tFLOATING_POINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_POINT_LITERAL"));
	} 

	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	"f" | "F" | "d" | "D";
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return (tFLOAT_TYPE_SUFFIX != null) ? tFLOAT_TYPE_SUFFIX : (tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE_SUFFIX"));
	} 

	//terminal CHARACTER_LITERAL:
	//	"\'" (ESCAPE_SEQUENCE | !("\'" | "\\")) "\'";
	public TerminalRule getCHARACTER_LITERALRule() {
		return (tCHARACTER_LITERAL != null) ? tCHARACTER_LITERAL : (tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER_LITERAL"));
	} 

	//terminal STRING_LITERAL:
	//	"\"" (ESCAPE_SEQUENCE | !("\\" | "\""))* "\"";
	public TerminalRule getSTRING_LITERALRule() {
		return (tSTRING_LITERAL != null) ? tSTRING_LITERAL : (tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LITERAL"));
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal fragment OCTAL_ESCAPE:
	//	"\\" "0".."3" "0".."7" "0".."7" | "\\" "0".."7" "0".."7" | "\\" "0".."7";
	public TerminalRule getOCTAL_ESCAPERule() {
		return (tOCTAL_ESCAPE != null) ? tOCTAL_ESCAPE : (tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE"));
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUNICODE_ESCAPERule() {
		return (tUNICODE_ESCAPE != null) ? tUNICODE_ESCAPE : (tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_ESCAPE"));
	} 

	//BooleanLiteral:
	//	"true" | "false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	////Differential Equations
	//DE_LHS:
	//	"dot" "(" var1=ID "," var2=ID "," order=INT ")";
	public DE_LHSElements getDE_LHSAccess() {
		return (pDE_LHS != null) ? pDE_LHS : (pDE_LHS = new DE_LHSElements());
	}
	
	public ParserRule getDE_LHSRule() {
		return getDE_LHSAccess().getRule();
	}

	//DifferentialEquation:
	//	LHS=DE_LHS "==" RHS=Expression;
	public DifferentialEquationElements getDifferentialEquationAccess() {
		return (pDifferentialEquation != null) ? pDifferentialEquation : (pDifferentialEquation = new DifferentialEquationElements());
	}
	
	public ParserRule getDifferentialEquationRule() {
		return getDifferentialEquationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
