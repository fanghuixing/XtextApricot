/*
* generated by Xtext
*/
grammar InternalApricot;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.fofo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.fofo.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.fofo.services.ApricotGrammarAccess;

}

@parser::members {

 	private ApricotGrammarAccess grammarAccess;
 	
    public InternalApricotParser(TokenStream input, ApricotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected ApricotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getPackageDeclarationParserRuleCall()); 
    }
    this_PackageDeclaration_0=rulePackageDeclaration
    { 
        $current = $this_PackageDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getImportsImportParserRuleCall_3_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_4_0()); 
	    }
		lv_elements_4_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getRefTypeParserRuleCall()); 
    }
    this_RefType_0=ruleRefType
    { 
        $current = $this_RefType_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPublicKeyword_0()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPrivateKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBuiltInModifier
entryRuleBuiltInModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInModifierRule()); } 
	 iv_ruleBuiltInModifier=ruleBuiltInModifier 
	 { $current=$iv_ruleBuiltInModifier.current.getText(); }  
	 EOF 
;

// Rule BuiltInModifier
ruleBuiltInModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Native' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInModifierAccess().getNativeKeyword()); 
    }

    ;





// Entry rule entryRuleRefType
entryRuleRefType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefTypeRule()); }
	 iv_ruleRefType=ruleRefType 
	 { $current=$iv_ruleRefType.current; } 
	 EOF 
;

// Rule RefType
ruleRefType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRefTypeAccess().getClassParserRuleCall_0()); 
    }
    this_Class_0=ruleClass
    { 
        $current = $this_Class_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRefTypeAccess().getInterfaceParserRuleCall_1()); 
    }
    this_Interface_1=ruleInterface
    { 
        $current = $this_Interface_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNonRefType
entryRuleNonRefType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonRefTypeRule()); }
	 iv_ruleNonRefType=ruleNonRefType 
	 { $current=$iv_ruleNonRefType.current; } 
	 EOF 
;

// Rule NonRefType
ruleNonRefType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNonRefTypeAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_BasicType_0=ruleBasicType
    { 
        $current = $this_BasicType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonRefTypeAccess().getMathTypeParserRuleCall_1()); 
    }
    this_MathType_1=ruleMathType
    { 
        $current = $this_MathType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_BT_0_1=	'void' 
    {
        newLeafNode(lv_BT_0_1, grammarAccess.getBasicTypeAccess().getBTVoidKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_1, null);
	    }

    |		lv_BT_0_2=	'int' 
    {
        newLeafNode(lv_BT_0_2, grammarAccess.getBasicTypeAccess().getBTIntKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_2, null);
	    }

    |		lv_BT_0_3=	'real' 
    {
        newLeafNode(lv_BT_0_3, grammarAccess.getBasicTypeAccess().getBTRealKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_3, null);
	    }

    |		lv_BT_0_4=	'boolean' 
    {
        newLeafNode(lv_BT_0_4, grammarAccess.getBasicTypeAccess().getBTBooleanKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_4, null);
	    }

    |		lv_BT_0_5=	'String' 
    {
        newLeafNode(lv_BT_0_5, grammarAccess.getBasicTypeAccess().getBTStringKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_5, null);
	    }

)

)
)
;





// Entry rule entryRuleMathType
entryRuleMathType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathTypeRule()); }
	 iv_ruleMathType=ruleMathType 
	 { $current=$iv_ruleMathType.current; } 
	 EOF 
;

// Rule MathType
ruleMathType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_MT_0_1=	'Int' 
    {
        newLeafNode(lv_MT_0_1, grammarAccess.getMathTypeAccess().getMTIntKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMathTypeRule());
	        }
       		setWithLastConsumed($current, "MT", lv_MT_0_1, null);
	    }

    |		lv_MT_0_2=	'Real' 
    {
        newLeafNode(lv_MT_0_2, grammarAccess.getMathTypeAccess().getMTRealKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMathTypeRule());
	        }
       		setWithLastConsumed($current, "MT", lv_MT_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getInterfaceAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getInterfaceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getSuperclassInterfaceCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getMembersAbstractInterfaceElementParserRuleCall_5_0()); 
	    }
		lv_members_6_0=ruleAbstractInterfaceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_6_0, 
        		"AbstractInterfaceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getClassAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSuperclassClassCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='implements' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassAccess().getImplementsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getInterfaceclassInterfaceCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getMembersMemberParserRuleCall_6_0()); 
	    }
		lv_members_8_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_8_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getFieldParserRuleCall_0()); 
    }
    this_Field_0=ruleField
    { 
        $current = $this_Field_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getMethodParserRuleCall_1()); 
    }
    this_Method_1=ruleMethod
    { 
        $current = $this_Method_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFieldName
entryRuleFieldName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); } 
	 iv_ruleFieldName=ruleFieldName 
	 { $current=$iv_ruleFieldName.current.getText(); }  
	 EOF 
;

// Rule FieldName
ruleFieldName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFieldNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeUseTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getNameFieldNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFieldName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FieldName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getVariniVariableInitializerParserRuleCall_2_1_0()); 
	    }
		lv_varini_3_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"varini",
        		lv_varini_3_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getMethodAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getTypeUseTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_4_0_0()); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_4_1_1_0()); 
	    }
		lv_params_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyMethodBodyParserRuleCall_7_0()); 
	    }
		lv_body_9_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_9_0, 
        		"MethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleAbstractMethod
entryRuleAbstractMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractMethodRule()); }
	 iv_ruleAbstractMethod=ruleAbstractMethod 
	 { $current=$iv_ruleAbstractMethod.current; } 
	 EOF 
;

// Rule AbstractMethod
ruleAbstractMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getBuiltInModifierParserRuleCall_1()); 
    }
ruleBuiltInModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getTypeUseTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAbstractMethodAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractMethodAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getParamsParameterParserRuleCall_5_0_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAbstractMethodAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getParamsParameterParserRuleCall_5_1_1_0()); 
	    }
		lv_params_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAbstractMethodAccess().getRightParenthesisKeyword_6());
    }
(	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAbstractMethodAccess().getLeftCurlyBracketKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getBodyAbstractMethodBodyParserRuleCall_7_1_0()); 
	    }
		lv_body_10_0=ruleAbstractMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_10_0, 
        		"AbstractMethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAbstractMethodAccess().getRightCurlyBracketKeyword_7_2());
    }
)?	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAbstractMethodAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleUseType
entryRuleUseType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseTypeRule()); }
	 iv_ruleUseType=ruleUseType 
	 { $current=$iv_ruleUseType.current; } 
	 EOF 
;

// Rule UseType
ruleUseType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getUseTypeAccess().getType1RefTypeCrossReference_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUseTypeAccess().getType2NonRefTypeParserRuleCall_1_0()); 
	    }
		lv_type2_1_0=ruleNonRefType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseTypeRule());
	        }
       		set(
       			$current, 
       			"type2",
        		lv_type2_1_0, 
        		"NonRefType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeUseTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	 iv_ruleMethodBody=ruleMethodBody 
	 { $current=$iv_ruleMethodBody.current; } 
	 EOF 
;

// Rule MethodBody
ruleMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodBodyAccess().getLocvarsLocalVarDecParserRuleCall_0_0()); 
	    }
		lv_locvars_0_0=ruleLocalVarDec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodBodyRule());
	        }
       		add(
       			$current, 
       			"locvars",
        		lv_locvars_0_0, 
        		"LocalVarDec");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodBodyAccess().getReturnReturnStatementParserRuleCall_1_0()); 
	    }
		lv_return_1_0=ruleReturnStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodBodyRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_1_0, 
        		"ReturnStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAbstractMethodBody
entryRuleAbstractMethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractMethodBodyRule()); }
	 iv_ruleAbstractMethodBody=ruleAbstractMethodBody 
	 { $current=$iv_ruleAbstractMethodBody.current; } 
	 EOF 
;

// Rule AbstractMethodBody
ruleAbstractMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAbstractMethodBodyAccess().getRequiresAbstractCompositionParserRuleCall()); 
    }
    this_RequiresAbstractComposition_0=ruleRequiresAbstractComposition
    { 
        $current = $this_RequiresAbstractComposition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLocalVarName
entryRuleLocalVarName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarNameRule()); } 
	 iv_ruleLocalVarName=ruleLocalVarName 
	 { $current=$iv_ruleLocalVarName.current.getText(); }  
	 EOF 
;

// Rule LocalVarName
ruleLocalVarName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLocalVarNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleLocalVarDec
entryRuleLocalVarDec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarDecRule()); }
	 iv_ruleLocalVarDec=ruleLocalVarDec 
	 { $current=$iv_ruleLocalVarDec.current; } 
	 EOF 
;

// Rule LocalVarDec
ruleLocalVarDec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getTypeUseTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getNameLocalVarNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleLocalVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LocalVarName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVarDecAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getVariniVariableInitializerParserRuleCall_2_1_0()); 
	    }
		lv_varini_3_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"varini",
        		lv_varini_3_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalVarDecAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleVariableInitializer
entryRuleVariableInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableInitializerRule()); }
	 iv_ruleVariableInitializer=ruleVariableInitializer 
	 { $current=$iv_ruleVariableInitializer.current; } 
	 EOF 
;

// Rule VariableInitializer
ruleVariableInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVariableInitializerAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getThisParserRuleCall_0()); 
    }
    this_This_0=ruleThis
    { 
        $current = $this_This_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getParamRefParserRuleCall_1()); 
    }
    this_ParamRef_1=ruleParamRef
    { 
        $current = $this_ParamRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNewByClassParserRuleCall_2()); 
    }
    this_NewByClass_2=ruleNewByClass
    { 
        $current = $this_NewByClass_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleCast)=>
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCastParserRuleCall_3()); 
    }
    this_Cast_3=ruleCast
    { 
        $current = $this_Cast_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getConstantParserRuleCall_4()); 
    }
    this_Constant_4=ruleConstant
    { 
        $current = $this_Constant_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getParenParserRuleCall_5()); 
    }
    this_Paren_5=ruleParen
    { 
        $current = $this_Paren_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	 iv_ruleThis=ruleThis 
	 { $current=$iv_ruleThis.current; } 
	 EOF 
;

// Rule This
ruleThis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_variable_0_0=	'this' 
    {
        newLeafNode(lv_variable_0_0, grammarAccess.getThisAccess().getVariableThisKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThisRule());
	        }
       		setWithLastConsumed($current, "variable", lv_variable_0_0, "this");
	    }

)
)
;





// Entry rule entryRuleParamRef
entryRuleParamRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRefRule()); }
	 iv_ruleParamRef=ruleParamRef 
	 { $current=$iv_ruleParamRef.current; } 
	 EOF 
;

// Rule ParamRef
ruleParamRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParamRefAccess().getParameterParameterCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNewByClass
entryRuleNewByClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewByClassRule()); }
	 iv_ruleNewByClass=ruleNewByClass 
	 { $current=$iv_ruleNewByClass.current; } 
	 EOF 
;

// Rule NewByClass
ruleNewByClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewByClassAccess().getNewKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewByClassRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNewByClassAccess().getTypeClassCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNewByClassAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNewByClassAccess().getArgsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewByClassRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNewByClassAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewByClassAccess().getArgsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewByClassRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNewByClassAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastRule()); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCastAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getTypeUseTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastAccess().getExpressionTerminalExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParen
entryRuleParen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenRule()); }
	 iv_ruleParen=ruleParen 
	 { $current=$iv_ruleParen.current; } 
	 EOF 
;

// Rule Paren
ruleParen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_0()); 
    }
    this_IntConstant_0=ruleIntConstant
    { 
        $current = $this_IntConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getBoolConstantParserRuleCall_1()); 
    }
    this_BoolConstant_1=ruleBoolConstant
    { 
        $current = $this_BoolConstant_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_2()); 
    }
    this_StringConstant_2=ruleStringConstant
    { 
        $current = $this_StringConstant_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_constant_0_0=RULE_STRING
		{
			newLeafNode(lv_constant_0_0, grammarAccess.getStringConstantAccess().getConstantSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constant",
        		lv_constant_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntConstant
entryRuleIntConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstantRule()); }
	 iv_ruleIntConstant=ruleIntConstant 
	 { $current=$iv_ruleIntConstant.current; } 
	 EOF 
;

// Rule IntConstant
ruleIntConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_constant_0_0=RULE_INT
		{
			newLeafNode(lv_constant_0_0, grammarAccess.getIntConstantAccess().getConstantINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constant",
        		lv_constant_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleBoolConstant
entryRuleBoolConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolConstantRule()); }
	 iv_ruleBoolConstant=ruleBoolConstant 
	 { $current=$iv_ruleBoolConstant.current; } 
	 EOF 
;

// Rule BoolConstant
ruleBoolConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_constant_0_1=	'true' 
    {
        newLeafNode(lv_constant_0_1, grammarAccess.getBoolConstantAccess().getConstantTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolConstantRule());
	        }
       		setWithLastConsumed($current, "constant", lv_constant_0_1, null);
	    }

    |		lv_constant_0_2=	'false' 
    {
        newLeafNode(lv_constant_0_2, grammarAccess.getBoolConstantAccess().getConstantFalseKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolConstantRule());
	        }
       		setWithLastConsumed($current, "constant", lv_constant_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleAMOUNT
entryRuleAMOUNT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMOUNTRule()); } 
	 iv_ruleAMOUNT=ruleAMOUNT 
	 { $current=$iv_ruleAMOUNT.current.getText(); }  
	 EOF 
;

// Rule AMOUNT
ruleAMOUNT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_AMOUNT_GEONE_0=RULE_AMOUNT_GEONE    {
		$current.merge(this_AMOUNT_GEONE_0);
    }

    { 
    newLeafNode(this_AMOUNT_GEONE_0, grammarAccess.getAMOUNTAccess().getAMOUNT_GEONETerminalRuleCall_0()); 
    }

    |    this_AMOUNT_ONE_OR_ZERO_1=RULE_AMOUNT_ONE_OR_ZERO    {
		$current.merge(this_AMOUNT_ONE_OR_ZERO_1);
    }

    { 
    newLeafNode(this_AMOUNT_ONE_OR_ZERO_1, grammarAccess.getAMOUNTAccess().getAMOUNT_ONE_OR_ZEROTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleAbstractInterfaceElement
entryRuleAbstractInterfaceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractInterfaceElementRule()); }
	 iv_ruleAbstractInterfaceElement=ruleAbstractInterfaceElement 
	 { $current=$iv_ruleAbstractInterfaceElement.current; } 
	 EOF 
;

// Rule AbstractInterfaceElement
ruleAbstractInterfaceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getAbstractMethodParserRuleCall_0()); 
    }
    this_AbstractMethod_0=ruleAbstractMethod
    { 
        $current = $this_AbstractMethod_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getRequiresParserRuleCall_1()); 
    }
    this_Requires_1=ruleRequires
    { 
        $current = $this_Requires_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getClockConstraintParserRuleCall_2()); 
    }
    this_ClockConstraint_2=ruleClockConstraint
    { 
        $current = $this_ClockConstraint_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getAbstractInvariantParserRuleCall_3()); 
    }
    this_AbstractInvariant_3=ruleAbstractInvariant
    { 
        $current = $this_AbstractInvariant_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRequires
entryRuleRequires returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresRule()); }
	 iv_ruleRequires=ruleRequires 
	 { $current=$iv_ruleRequires.current; } 
	 EOF 
;

// Rule Requires
ruleRequires returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiresAccess().getRequiresKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequiresAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequiresAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAccess().getAMOUNTParserRuleCall_3()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiresAccess().getRightSquareBracketKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRequiresAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresAccess().getTypeUseTypeParserRuleCall_6_0()); 
	    }
		lv_type_6_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRequiresAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleAbstractDynamicSwitch
entryRuleAbstractDynamicSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDynamicSwitchRule()); }
	 iv_ruleAbstractDynamicSwitch=ruleAbstractDynamicSwitch 
	 { $current=$iv_ruleAbstractDynamicSwitch.current; } 
	 EOF 
;

// Rule AbstractDynamicSwitch
ruleAbstractDynamicSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractDynamicSwitchAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAbstractDynamicSwitchAccess().getType1RefTypeCrossReference_1_0()); 
	}

)
)(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractDynamicSwitchAccess().getVerticalLineKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getAbstractDynamicSwitchAccess().getType2RefTypeCrossReference_2_1_0()); 
	}

)
))?	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractDynamicSwitchAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getAbstractDynamicSwitchAccess().getType3RefTypeCrossReference_4_0()); 
	}

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAbstractDynamicSwitchAccess().getCommaKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getAbstractDynamicSwitchAccess().getType4RefTypeCrossReference_6_0()); 
	}

)
)(	otherlv_8='|' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAbstractDynamicSwitchAccess().getVerticalLineKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getAbstractDynamicSwitchAccess().getType5RefTypeCrossReference_7_1_0()); 
	}

)
))?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAbstractDynamicSwitchAccess().getRightParenthesisKeyword_8());
    }
)
;





// Entry rule entryRuleRequiresAbstractComposition
entryRuleRequiresAbstractComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresAbstractCompositionRule()); }
	 iv_ruleRequiresAbstractComposition=ruleRequiresAbstractComposition 
	 { $current=$iv_ruleRequiresAbstractComposition.current; } 
	 EOF 
;

// Rule RequiresAbstractComposition
ruleRequiresAbstractComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiresAbstractCompositionAccess().getRequiresKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequiresAbstractCompositionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresAbstractCompositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequiresAbstractCompositionAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getAMOUNTParserRuleCall_3()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiresAbstractCompositionAccess().getRightSquareBracketKeyword_4());
    }
this_ASYACTIONS_5=RULE_ASYACTIONS
    { 
    newLeafNode(this_ASYACTIONS_5, grammarAccess.getRequiresAbstractCompositionAccess().getASYACTIONSTerminalRuleCall_5()); 
    }
	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRequiresAbstractCompositionAccess().getLeftSquareBracketKeyword_6());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getAMOUNTParserRuleCall_7()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRequiresAbstractCompositionAccess().getRightSquareBracketKeyword_8());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRequiresAbstractCompositionAccess().getColonKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0()); 
	    }
		lv_abstract_dynamic_switch_10_0=ruleAbstractDynamicSwitch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresAbstractCompositionRule());
	        }
       		set(
       			$current, 
       			"abstract_dynamic_switch",
        		lv_abstract_dynamic_switch_10_0, 
        		"AbstractDynamicSwitch");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRequiresAbstractCompositionAccess().getLeftCurlyBracketKeyword_11());
    }
this_ABSTRACT_CONDTION_12=RULE_ABSTRACT_CONDTION
    { 
    newLeafNode(this_ABSTRACT_CONDTION_12, grammarAccess.getRequiresAbstractCompositionAccess().getABSTRACT_CONDTIONTerminalRuleCall_12()); 
    }
	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRequiresAbstractCompositionAccess().getRightCurlyBracketKeyword_13());
    }
	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRequiresAbstractCompositionAccess().getSemicolonKeyword_14());
    }
)
;





// Entry rule entryRuleClockConstraint
entryRuleClockConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockConstraintRule()); }
	 iv_ruleClockConstraint=ruleClockConstraint 
	 { $current=$iv_ruleClockConstraint.current; } 
	 EOF 
;

// Rule ClockConstraint
ruleClockConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClockConstraintAccess().getClockConstraintAction_0(),
            $current);
    }
)	otherlv_1='Constraint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClockConstraintAccess().getConstraintKeyword_1());
    }
(
(
		lv_name_2_0=RULE_CLOCK
		{
			newLeafNode(lv_name_2_0, grammarAccess.getClockConstraintAccess().getNameCLOCKTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"CLOCK");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClockConstraintAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAbstractInvariant
entryRuleAbstractInvariant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractInvariantRule()); }
	 iv_ruleAbstractInvariant=ruleAbstractInvariant 
	 { $current=$iv_ruleAbstractInvariant.current; } 
	 EOF 
;

// Rule AbstractInvariant
ruleAbstractInvariant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAbstractInvariantAccess().getAbstractInvariantAction_0(),
            $current);
    }
)	otherlv_1='Invariant' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbstractInvariantAccess().getInvariantKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractInvariantAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbstractInvariantAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractInvariantAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_0()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
(
ruleAssignmentOperator
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0()); 
	    }
		lv_assignmentoperator_1_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"assignmentoperator",
        		lv_assignmentoperator_1_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); } 
	 iv_ruleAssignmentOperator=ruleAssignmentOperator 
	 { $current=$iv_ruleAssignmentOperator.current.getText(); }  
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_1()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_2()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_3()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_4()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_5()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_6()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_7()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0()); 
	    }
		lv_conditionalorexpression_0_0=ruleConditionalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"conditionalorexpression",
        		lv_conditionalorexpression_0_0, 
        		"ConditionalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression1ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression1_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression2ExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression2_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalOrExpressionRule()); }
	 iv_ruleConditionalOrExpression=ruleConditionalOrExpression 
	 { $current=$iv_ruleConditionalOrExpression.current; } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_conditionalandexpression_0_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"conditionalandexpression",
        		lv_conditionalandexpression_0_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalOrExpressionAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_conditionalandexpression_2_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"conditionalandexpression",
        		lv_conditionalandexpression_2_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalAndExpressionRule()); }
	 iv_ruleConditionalAndExpression=ruleConditionalAndExpression 
	 { $current=$iv_ruleConditionalAndExpression.current; } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0()); 
	    }
		lv_exclusiveorexpression_0_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exclusiveorexpression",
        		lv_exclusiveorexpression_0_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalAndExpressionAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exclusiveorexpression_2_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exclusiveorexpression",
        		lv_exclusiveorexpression_2_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getEqualityexpressionEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_equalityexpression_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"equalityexpression",
        		lv_equalityexpression_0_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='xor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExclusiveOrExpressionAccess().getXorKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getEqualityexpressionEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_equalityexpression_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"equalityexpression",
        		lv_equalityexpression_2_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0()); 
	    }
		lv_instanceofexpression_0_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"instanceofexpression",
        		lv_instanceofexpression_0_0, 
        		"InstanceOfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='==' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
    }

    |	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0()); 
	    }
		lv_instanceofexpression_3_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"instanceofexpression",
        		lv_instanceofexpression_3_0, 
        		"InstanceOfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOfExpression
entryRuleInstanceOfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceOfExpressionRule()); }
	 iv_ruleInstanceOfExpression=ruleInstanceOfExpression 
	 { $current=$iv_ruleInstanceOfExpression.current; } 
	 EOF 
;

// Rule InstanceOfExpression
ruleInstanceOfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='instanceof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceOfExpressionAccess().getInstanceofKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getTypeUseTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveexpressionAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_additiveexpression_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"additiveexpression",
        		lv_additiveexpression_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalopRelationalOpParserRuleCall_1_0_0()); 
	    }
		lv_relationalop_1_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"relationalop",
        		lv_relationalop_1_0, 
        		"RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_additiveexpression_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"additiveexpression",
        		lv_additiveexpression_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_multiplicativeexpression_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multiplicativeexpression",
        		lv_multiplicativeexpression_0_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_multiplicativeexpression_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multiplicativeexpression",
        		lv_multiplicativeexpression_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryexpressionUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_unaryexpression_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_0_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_0_1());
    }

    |	otherlv_3='%' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicativeExpressionAccess().getPercentSignKeyword_1_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryexpressionUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_unaryexpression_4_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_4_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_0_1()); 
    }
    this_UnaryExpression_1=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_1_1()); 
    }
    this_UnaryExpression_3=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='++' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionAccess().getPlusSignPlusSignKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_2_1()); 
    }
    this_UnaryExpression_5=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='--' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryExpressionAccess().getHyphenMinusHyphenMinusKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_3_1()); 
    }
    this_UnaryExpression_7=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionNotPlusMinusParserRuleCall_4()); 
    }
    this_UnaryExpressionNotPlusMinus_8=ruleUnaryExpressionNotPlusMinus
    { 
        $current = $this_UnaryExpressionNotPlusMinus_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnaryExpressionNotPlusMinus
entryRuleUnaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule()); }
	 iv_ruleUnaryExpressionNotPlusMinus=ruleUnaryExpressionNotPlusMinus 
	 { $current=$iv_ruleUnaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule UnaryExpressionNotPlusMinus
ruleUnaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionNotPlusMinusAction_0(),
            $current);
    }
)((	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_unaryexpression_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionNotPlusMinusRule());
	        }
       		set(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_2_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryPrimaryParserRuleCall_1_1_0()); 
	    }
		lv_primary_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionNotPlusMinusRule());
	        }
       		set(
       			$current, 
       			"primary",
        		lv_primary_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPrimaryAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getParexpressionParExpressionParserRuleCall_1_0_0()); 
	    }
		lv_parexpression_1_0=ruleParExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"parexpression",
        		lv_parexpression_1_0, 
        		"ParExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getLiteralLiteralParserRuleCall_1_1_0()); 
	    }
		lv_literal_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3='this' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getThisKeyword_1_2_0());
    }
(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getFullStopKeyword_1_2_1_0());
    }
(
(
		lv_identifier_5_0=RULE_ID
		{
			newLeafNode(lv_identifier_5_0, grammarAccess.getPrimaryAccess().getIdentifierIDTerminalRuleCall_1_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_5_0, 
        		"ID");
	    }

)
))*((
(
ruleIdentifierSuffix
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getIdentifiersuffixIdentifierSuffixParserRuleCall_1_2_2_0()); 
	    }
		lv_identifiersuffix_6_0=ruleIdentifierSuffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"identifiersuffix",
        		lv_identifiersuffix_6_0, 
        		"IdentifierSuffix");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		lv_identifier_7_0=RULE_ID
		{
			newLeafNode(lv_identifier_7_0, grammarAccess.getPrimaryAccess().getIdentifierIDTerminalRuleCall_1_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_7_0, 
        		"ID");
	    }

)
)(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrimaryAccess().getFullStopKeyword_1_3_1_0());
    }
(
(
		lv_identifier_9_0=RULE_ID
		{
			newLeafNode(lv_identifier_9_0, grammarAccess.getPrimaryAccess().getIdentifierIDTerminalRuleCall_1_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_9_0, 
        		"ID");
	    }

)
))*((
(
ruleIdentifierSuffix
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getIdentifiersuffixIdentifierSuffixParserRuleCall_1_3_2_0()); 
	    }
		lv_identifiersuffix_10_0=ruleIdentifierSuffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"identifiersuffix",
        		lv_identifiersuffix_10_0, 
        		"IdentifierSuffix");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleIdentifierSuffix
entryRuleIdentifierSuffix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierSuffixRule()); }
	 iv_ruleIdentifierSuffix=ruleIdentifierSuffix 
	 { $current=$iv_ruleIdentifierSuffix.current; } 
	 EOF 
;

// Rule IdentifierSuffix
ruleIdentifierSuffix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentifierSuffixAccess().getIdentifierSuffixAction_0(),
            $current);
    }
)(((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdentifierSuffixAccess().getLeftSquareBracketKeyword_1_0_0_0());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIdentifierSuffixAccess().getRightSquareBracketKeyword_1_0_0_1());
    }
)+	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_0_1());
    }
	otherlv_4='class' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIdentifierSuffixAccess().getClassKeyword_1_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierSuffixAccess().getArgumentsArgumentsParserRuleCall_1_1_0()); 
	    }
		lv_arguments_5_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierSuffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_2_0());
    }
	otherlv_7='class' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIdentifierSuffixAccess().getClassKeyword_1_2_1());
    }
)
    |(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_3_0());
    }
	otherlv_9='this' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getIdentifierSuffixAccess().getThisKeyword_1_3_1());
    }
)
    |(	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_4_0());
    }
	otherlv_11='super' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIdentifierSuffixAccess().getSuperKeyword_1_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierSuffixAccess().getArgumentsArgumentsParserRuleCall_1_4_2_0()); 
	    }
		lv_arguments_12_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierSuffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionlistExpressionListParserRuleCall_2_0()); 
	    }
		lv_expressionlist_2_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		set(
       			$current, 
       			"expressionlist",
        		lv_expressionlist_2_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpression1ExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpression2ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression2_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expression2",
        		lv_expression2_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;







// Entry rule entryRuleParExpression
entryRuleParExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParExpressionRule()); }
	 iv_ruleParExpression=ruleParExpression 
	 { $current=$iv_ruleParExpression.current; } 
	 EOF 
;

// Rule ParExpression
ruleParExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral    {
		$current.merge(this_IntegerLiteral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_FLOATING_POINT_LITERAL_1=RULE_FLOATING_POINT_LITERAL    {
		$current.merge(this_FLOATING_POINT_LITERAL_1);
    }

    { 
    newLeafNode(this_FLOATING_POINT_LITERAL_1, grammarAccess.getLiteralAccess().getFLOATING_POINT_LITERALTerminalRuleCall_1()); 
    }

    |    this_CHARACTER_LITERAL_2=RULE_CHARACTER_LITERAL    {
		$current.merge(this_CHARACTER_LITERAL_2);
    }

    { 
    newLeafNode(this_CHARACTER_LITERAL_2, grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_2()); 
    }

    |    this_STRING_LITERAL_3=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_3);
    }

    { 
    newLeafNode(this_STRING_LITERAL_3, grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_4()); 
    }
    this_BooleanLiteral_4=ruleBooleanLiteral    {
		$current.merge(this_BooleanLiteral_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNullKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    newLeafNode(this_HEX_LITERAL_0, grammarAccess.getIntegerLiteralAccess().getHEX_LITERALTerminalRuleCall_0()); 
    }

    |    this_OCTAL_LITERAL_1=RULE_OCTAL_LITERAL    {
		$current.merge(this_OCTAL_LITERAL_1);
    }

    { 
    newLeafNode(this_OCTAL_LITERAL_1, grammarAccess.getIntegerLiteralAccess().getOCTAL_LITERALTerminalRuleCall_1()); 
    }

    |    this_DECIMAL_LITERAL_2=RULE_DECIMAL_LITERAL    {
		$current.merge(this_DECIMAL_LITERAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_LITERAL_2, grammarAccess.getIntegerLiteralAccess().getDECIMAL_LITERALTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); } 
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current.getText(); }  
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleDE_LHS
entryRuleDE_LHS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDE_LHSRule()); }
	 iv_ruleDE_LHS=ruleDE_LHS 
	 { $current=$iv_ruleDE_LHS.current; } 
	 EOF 
;

// Rule DE_LHS
ruleDE_LHS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dot' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDE_LHSAccess().getDotKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDE_LHSAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_var1_2_0=RULE_ID
		{
			newLeafNode(lv_var1_2_0, grammarAccess.getDE_LHSAccess().getVar1IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDE_LHSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var1",
        		lv_var1_2_0, 
        		"ID");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDE_LHSAccess().getCommaKeyword_3());
    }
(
(
		lv_var2_4_0=RULE_ID
		{
			newLeafNode(lv_var2_4_0, grammarAccess.getDE_LHSAccess().getVar2IDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDE_LHSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var2",
        		lv_var2_4_0, 
        		"ID");
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDE_LHSAccess().getCommaKeyword_5());
    }
(
(
		lv_order_6_0=RULE_INT
		{
			newLeafNode(lv_order_6_0, grammarAccess.getDE_LHSAccess().getOrderINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDE_LHSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"order",
        		lv_order_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDE_LHSAccess().getRightParenthesisKeyword_7());
    }
)
;







RULE_AMOUNT_GEONE : '1..*';

RULE_AMOUNT_ONE_OR_ZERO : '0..1';

RULE_ASYACTIONS : '(' '?' '|' '!' ')';

RULE_ABSTRACT_CONDTION : 'Condition' '{' '}' ';';

RULE_CLOCK : 'clock';

RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : ('l'|'L');

RULE_FLOATING_POINT_LITERAL : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|'.' ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

RULE_CHARACTER_LITERAL : '\'' (RULE_ESCAPE_SEQUENCE|~(('\''|'\\'))) '\'';

RULE_STRING_LITERAL : '"' (RULE_ESCAPE_SEQUENCE|~(('\\'|'"')))* '"';

fragment RULE_ESCAPE_SEQUENCE : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|RULE_UNICODE_ESCAPE|RULE_OCTAL_ESCAPE);

fragment RULE_OCTAL_ESCAPE : ('\\' '0'..'3' '0'..'7' '0'..'7'|'\\' '0'..'7' '0'..'7'|'\\' '0'..'7');

fragment RULE_UNICODE_ESCAPE : '\\' 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


