/**
 * generated by Xtext
 */
package org.xtext.fofo.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.xtext.fofo.apricot.AbstractCompositionMethod;
import org.xtext.fofo.apricot.AbstractContinuousMethod;
import org.xtext.fofo.apricot.AbstractDiscreteMethod;
import org.xtext.fofo.apricot.AbstractInitMethod;
import org.xtext.fofo.apricot.AbstractInvariant;
import org.xtext.fofo.apricot.AbstractMethod;
import org.xtext.fofo.apricot.ClockConstraint;
import org.xtext.fofo.apricot.CompositionMethod;
import org.xtext.fofo.apricot.ConditionBlock;
import org.xtext.fofo.apricot.ConstructorMethod;
import org.xtext.fofo.apricot.ContinuousMethod;
import org.xtext.fofo.apricot.ControlSwitchComposition;
import org.xtext.fofo.apricot.DiscreteBlock;
import org.xtext.fofo.apricot.DiscreteMethod;
import org.xtext.fofo.apricot.Field;
import org.xtext.fofo.apricot.Import;
import org.xtext.fofo.apricot.InitMethod;
import org.xtext.fofo.apricot.Interface;
import org.xtext.fofo.apricot.InvariantBlock;
import org.xtext.fofo.apricot.Method;
import org.xtext.fofo.apricot.NonRefType;
import org.xtext.fofo.apricot.PackageDeclaration;
import org.xtext.fofo.apricot.RefType;
import org.xtext.fofo.apricot.Requires;
import org.xtext.fofo.apricot.RequiresAbstractComposition;
import org.xtext.fofo.apricot.UseType;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class ApricotLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public ApricotLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final org.xtext.fofo.apricot.Class element) {
    return "class_obj.gif";
  }
  
  public String image(final Interface element) {
    return "interface_obj.gif";
  }
  
  public String image(final Field element) {
    return "field.gif";
  }
  
  public String image(final Method element) {
    return "methobj.gif";
  }
  
  public String image(final AbstractMethod element) {
    return "methobj.gif";
  }
  
  public String image(final CompositionMethod elemenet) {
    return "methobj.gif";
  }
  
  public String image(final AbstractCompositionMethod elemenet) {
    return "methobj.gif";
  }
  
  public String image(final ControlSwitchComposition element) {
    return "methdef.gif";
  }
  
  public String image(final ConstructorMethod element) {
    return "methobj.gif";
  }
  
  public String image(final ContinuousMethod element) {
    return "methobj.gif";
  }
  
  public String image(final AbstractContinuousMethod element) {
    return "methobj.gif";
  }
  
  public String image(final DiscreteMethod element) {
    return "methobj.gif";
  }
  
  public String image(final AbstractDiscreteMethod element) {
    return "methobj.gif";
  }
  
  public String image(final ClockConstraint element) {
    return "clock.png";
  }
  
  public String image(final InitMethod element) {
    return "methobj.gif";
  }
  
  public String image(final AbstractInitMethod element) {
    return "methobj.gif";
  }
  
  public String image(final InvariantBlock element) {
    return "block.gif";
  }
  
  public String image(final AbstractInvariant element) {
    return "block.gif";
  }
  
  public String image(final ConditionBlock element) {
    return "conditionblock.gif";
  }
  
  public String image(final DiscreteBlock element) {
    return "discreteblock.gif";
  }
  
  public String image(final Import element) {
    return "imports.png";
  }
  
  public String image(final PackageDeclaration element) {
    return "Package.png";
  }
  
  public String image(final Requires element) {
    return "requires.gif";
  }
  
  public String image(final RequiresAbstractComposition element) {
    return "requires.gif";
  }
  
  public String text(final Method m) {
    UseType _type = m.getType();
    RefType _reftype = _type.getReftype();
    boolean _notEquals = (!Objects.equal(_reftype, null));
    if (_notEquals) {
      String _name = m.getName();
      String _plus = (_name + " : ");
      UseType _type_1 = m.getType();
      RefType _reftype_1 = _type_1.getReftype();
      String _text = this.getText(_reftype_1);
      return (_plus + _text);
    } else {
      String _name_1 = m.getName();
      String _plus_1 = (_name_1 + " : ");
      UseType _type_2 = m.getType();
      NonRefType _type_3 = _type_2.getType();
      String _text_1 = this.getText(_type_3);
      return (_plus_1 + _text_1);
    }
  }
  
  public String text(final org.xtext.fofo.apricot.Class type) {
    return type.getName();
  }
  
  public String text(final Interface type) {
    return type.getName();
  }
}
