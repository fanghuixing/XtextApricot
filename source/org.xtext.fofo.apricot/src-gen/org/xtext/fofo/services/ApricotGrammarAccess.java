/*
* generated by Xtext
*/
package org.xtext.fofo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ApricotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsRefTypeParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName ";" imports+=Import* elements+=RefType*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName ";" imports+=Import* elements+=RefType*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//elements+=RefType*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//RefType
		public RuleCall getElementsRefTypeParserRuleCall_4_0() { return cElementsRefTypeParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		//AbstractElement:
		//   RefType 
		//;
		// * / Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////Type: NonRefType | RefType;
		//Modifier:
		//	"public" | "private";
		public ParserRule getRule() { return rule; }

		//"public" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"private"
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }
	}

	public class VARIABLE_MODIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE_MODIFIER");
		private final Keyword cConstantKeyword = (Keyword)rule.eContents().get(1);
		
		//VARIABLE_MODIFIER:
		//	"Constant";
		public ParserRule getRule() { return rule; }

		//"Constant"
		public Keyword getConstantKeyword() { return cConstantKeyword; }
	}

	public class BuiltInModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInModifier");
		private final Keyword cNativeKeyword = (Keyword)rule.eContents().get(1);
		
		//BuiltInModifier:
		//	"Native";
		public ParserRule getRule() { return rule; }

		//"Native"
		public Keyword getNativeKeyword() { return cNativeKeyword; }
	}

	public class RefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RefType:
		//	Class | Interface;
		public ParserRule getRule() { return rule; }

		//Class | Interface
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }
	}

	public class NonRefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonRefType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonRefType:
		//	BasicType | MathType;
		public ParserRule getRule() { return rule; }

		//BasicType | MathType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//MathType
		public RuleCall getMathTypeParserRuleCall_1() { return cMathTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cBTAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBTAlternatives_0 = (Alternatives)cBTAssignment.eContents().get(0);
		private final Keyword cBTVoidKeyword_0_0 = (Keyword)cBTAlternatives_0.eContents().get(0);
		private final Keyword cBTIntKeyword_0_1 = (Keyword)cBTAlternatives_0.eContents().get(1);
		private final Keyword cBTRealKeyword_0_2 = (Keyword)cBTAlternatives_0.eContents().get(2);
		private final Keyword cBTBooleanKeyword_0_3 = (Keyword)cBTAlternatives_0.eContents().get(3);
		private final Keyword cBTStringKeyword_0_4 = (Keyword)cBTAlternatives_0.eContents().get(4);
		private final Keyword cBTIntervalKeyword_0_5 = (Keyword)cBTAlternatives_0.eContents().get(5);
		
		//BasicType:
		//	BT=("void" | "int" | "real" | "boolean" | "String" | "Interval");
		public ParserRule getRule() { return rule; }

		//BT=("void" | "int" | "real" | "boolean" | "String" | "Interval")
		public Assignment getBTAssignment() { return cBTAssignment; }

		//"void" | "int" | "real" | "boolean" | "String" | "Interval"
		public Alternatives getBTAlternatives_0() { return cBTAlternatives_0; }

		//"void"
		public Keyword getBTVoidKeyword_0_0() { return cBTVoidKeyword_0_0; }

		//"int"
		public Keyword getBTIntKeyword_0_1() { return cBTIntKeyword_0_1; }

		//"real"
		public Keyword getBTRealKeyword_0_2() { return cBTRealKeyword_0_2; }

		//"boolean"
		public Keyword getBTBooleanKeyword_0_3() { return cBTBooleanKeyword_0_3; }

		//"String"
		public Keyword getBTStringKeyword_0_4() { return cBTStringKeyword_0_4; }

		//"Interval"
		public Keyword getBTIntervalKeyword_0_5() { return cBTIntervalKeyword_0_5; }
	}

	public class MathTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathType");
		private final Assignment cMTAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cMTAlternatives_0 = (Alternatives)cMTAssignment.eContents().get(0);
		private final Keyword cMTIntKeyword_0_0 = (Keyword)cMTAlternatives_0.eContents().get(0);
		private final Keyword cMTRealKeyword_0_1 = (Keyword)cMTAlternatives_0.eContents().get(1);
		
		//MathType:
		//	MT=("Int" | "Real");
		public ParserRule getRule() { return rule; }

		//MT=("Int" | "Real")
		public Assignment getMTAssignment() { return cMTAssignment; }

		//"Int" | "Real"
		public Alternatives getMTAlternatives_0() { return cMTAlternatives_0; }

		//"Int"
		public Keyword getMTIntKeyword_0_0() { return cMTIntKeyword_0_0; }

		//"Real"
		public Keyword getMTRealKeyword_0_1() { return cMTRealKeyword_0_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassInterfaceCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassInterfaceCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersAbstractInterfaceElementParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Interface:
		//	Modifier? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{"
		//	members+=AbstractInterfaceElement* "}";
		public ParserRule getRule() { return rule; }

		//Modifier? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{" members+=AbstractInterfaceElement*
		//"}"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superclass=[Interface|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superclass=[Interface|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }

		//[Interface|QualifiedName]
		public CrossReference getSuperclassInterfaceCrossReference_3_1_0() { return cSuperclassInterfaceCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassInterfaceQualifiedNameParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=AbstractInterfaceElement*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//AbstractInterfaceElement
		public RuleCall getMembersAbstractInterfaceElementParserRuleCall_5_0() { return cMembersAbstractInterfaceElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperclassClassCrossReference_3_1_0 = (CrossReference)cSuperclassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperclassClassQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperclassClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceclassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInterfaceclassInterfaceCrossReference_4_1_0 = (CrossReference)cInterfaceclassAssignment_4_1.eContents().get(0);
		private final RuleCall cInterfaceclassInterfaceQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cInterfaceclassInterfaceCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	Modifier? "class" name=ID ("extends" superclass=[Class|QualifiedName])? ("implements"
		//	interfaceclass=[Interface|QualifiedName])? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//Modifier? "class" name=ID ("extends" superclass=[Class|QualifiedName])? ("implements"
		//interfaceclass=[Interface|QualifiedName])? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superclass=[Class|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superclass=[Class|QualifiedName]
		public Assignment getSuperclassAssignment_3_1() { return cSuperclassAssignment_3_1; }

		//[Class|QualifiedName]
		public CrossReference getSuperclassClassCrossReference_3_1_0() { return cSuperclassClassCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getSuperclassClassQualifiedNameParserRuleCall_3_1_0_1() { return cSuperclassClassQualifiedNameParserRuleCall_3_1_0_1; }

		//("implements" interfaceclass=[Interface|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//interfaceclass=[Interface|QualifiedName]
		public Assignment getInterfaceclassAssignment_4_1() { return cInterfaceclassAssignment_4_1; }

		//[Interface|QualifiedName]
		public CrossReference getInterfaceclassInterfaceCrossReference_4_1_0() { return cInterfaceclassInterfaceCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getInterfaceclassInterfaceQualifiedNameParserRuleCall_4_1_0_1() { return cInterfaceclassInterfaceQualifiedNameParserRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContinuousMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvariantBlockParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCompositionMethodParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDiscreteMethodParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInitMethodParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Member:
		//	Field | Method | ConstructorMethod | ContinuousMethod | InvariantBlock | CompositionMethod | DiscreteMethod |
		//	InitMethod;
		public ParserRule getRule() { return rule; }

		//Field | Method | ConstructorMethod | ContinuousMethod | InvariantBlock | CompositionMethod | DiscreteMethod | InitMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }

		//ConstructorMethod
		public RuleCall getConstructorMethodParserRuleCall_2() { return cConstructorMethodParserRuleCall_2; }

		//ContinuousMethod
		public RuleCall getContinuousMethodParserRuleCall_3() { return cContinuousMethodParserRuleCall_3; }

		//InvariantBlock
		public RuleCall getInvariantBlockParserRuleCall_4() { return cInvariantBlockParserRuleCall_4; }

		//CompositionMethod
		public RuleCall getCompositionMethodParserRuleCall_5() { return cCompositionMethodParserRuleCall_5; }

		//DiscreteMethod
		public RuleCall getDiscreteMethodParserRuleCall_6() { return cDiscreteMethodParserRuleCall_6; }

		//InitMethod
		public RuleCall getInitMethodParserRuleCall_7() { return cInitMethodParserRuleCall_7; }
	}

	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessmodiferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessmodiferModifierParserRuleCall_0_0 = (RuleCall)cAccessmodiferAssignment_0.eContents().get(0);
		private final Assignment cVariablemodiferAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablemodiferVARIABLE_MODIFIERParserRuleCall_1_0 = (RuleCall)cVariablemodiferAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeUseTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cDimAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDimDimParserRuleCall_3_0 = (RuleCall)cDimAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameFieldNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariniAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariniVariableInitializerParserRuleCall_5_1_0 = (RuleCall)cVariniAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Field:
		//	accessmodifer=Modifier? variablemodifer=VARIABLE_MODIFIER? type=UseType dim+=Dim* name=FieldName ("="
		//	varini=VariableInitializer)? ";";
		public ParserRule getRule() { return rule; }

		//accessmodifer=Modifier? variablemodifer=VARIABLE_MODIFIER? type=UseType dim+=Dim* name=FieldName ("="
		//varini=VariableInitializer)? ";"
		public Group getGroup() { return cGroup; }

		//accessmodifer=Modifier?
		public Assignment getAccessmodiferAssignment_0() { return cAccessmodiferAssignment_0; }

		//Modifier
		public RuleCall getAccessmodiferModifierParserRuleCall_0_0() { return cAccessmodiferModifierParserRuleCall_0_0; }

		//variablemodifer=VARIABLE_MODIFIER?
		public Assignment getVariablemodiferAssignment_1() { return cVariablemodiferAssignment_1; }

		//VARIABLE_MODIFIER
		public RuleCall getVariablemodiferVARIABLE_MODIFIERParserRuleCall_1_0() { return cVariablemodiferVARIABLE_MODIFIERParserRuleCall_1_0; }

		//type=UseType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_2_0() { return cTypeUseTypeParserRuleCall_2_0; }

		//dim+=Dim*
		public Assignment getDimAssignment_3() { return cDimAssignment_3; }

		//Dim
		public RuleCall getDimDimParserRuleCall_3_0() { return cDimDimParserRuleCall_3_0; }

		//name=FieldName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//FieldName
		public RuleCall getNameFieldNameParserRuleCall_4_0() { return cNameFieldNameParserRuleCall_4_0; }

		//("=" varini=VariableInitializer)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//varini=VariableInitializer
		public Assignment getVariniAssignment_5_1() { return cVariniAssignment_5_1; }

		//VariableInitializer
		public RuleCall getVariniVariableInitializerParserRuleCall_5_1_0() { return cVariniVariableInitializerParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ConstructorMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyMethodBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConstructorMethod:
		//	name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_0_0() { return cParamsParameterParserRuleCall_2_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_1_1_0() { return cParamsParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//body=MethodBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_5_0() { return cBodyMethodBodyParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cDimAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimDimParserRuleCall_2_0 = (RuleCall)cDimAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyMethodBodyParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Method:
		//	Modifier? type=UseType dim+=Dim* name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody
		//	"}";
		public ParserRule getRule() { return rule; }

		//Modifier? type=UseType dim+=Dim* name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}"
		public Group getGroup() { return cGroup; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//type=UseType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_0() { return cTypeUseTypeParserRuleCall_1_0; }

		//dim+=Dim*
		public Assignment getDimAssignment_2() { return cDimAssignment_2; }

		//Dim
		public RuleCall getDimDimParserRuleCall_2_0() { return cDimDimParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0_0() { return cParamsParameterParserRuleCall_5_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_1_1_0() { return cParamsParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//body=MethodBody
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_8_0() { return cBodyMethodBodyParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AbstractMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractContinuousMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractDiscreteMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNativeStartMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractCompositionMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAbstractInitMethodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cModifierParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cBuiltInModifierParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cTypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypeUseTypeParserRuleCall_5_2_0 = (RuleCall)cTypeAssignment_5_2.eContents().get(0);
		private final Assignment cNameAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_5_3_0 = (RuleCall)cNameAssignment_5_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_5_5 = (Group)cGroup_5.eContents().get(5);
		private final Assignment cParamsAssignment_5_5_0 = (Assignment)cGroup_5_5.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_5_5_0_0 = (RuleCall)cParamsAssignment_5_5_0.eContents().get(0);
		private final Group cGroup_5_5_1 = (Group)cGroup_5_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_5_1_0 = (Keyword)cGroup_5_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_5_1_1 = (Assignment)cGroup_5_5_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_5_5_1_1_0 = (RuleCall)cParamsAssignment_5_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_5_7 = (Group)cGroup_5.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_5_7_0 = (Keyword)cGroup_5_7.eContents().get(0);
		private final Assignment cBodyAssignment_5_7_1 = (Assignment)cGroup_5_7.eContents().get(1);
		private final RuleCall cBodyAbstractMethodBodyParserRuleCall_5_7_1_0 = (RuleCall)cBodyAssignment_5_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_7_2 = (Keyword)cGroup_5_7.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_8 = (Keyword)cGroup_5.eContents().get(8);
		
		//AbstractMethod:
		//	AbstractContinuousMethod | AbstractDiscreteMethod | NativeStartMethod | AbstractCompositionMethod |
		//	AbstractInitMethod | Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter (","
		//	params+=Parameter)*)? ")" ("{" body=AbstractMethodBody "}")? ";";
		public ParserRule getRule() { return rule; }

		//AbstractContinuousMethod | AbstractDiscreteMethod | NativeStartMethod | AbstractCompositionMethod | AbstractInitMethod |
		//Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ("{"
		//body=AbstractMethodBody "}")? ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractContinuousMethod
		public RuleCall getAbstractContinuousMethodParserRuleCall_0() { return cAbstractContinuousMethodParserRuleCall_0; }

		//AbstractDiscreteMethod
		public RuleCall getAbstractDiscreteMethodParserRuleCall_1() { return cAbstractDiscreteMethodParserRuleCall_1; }

		//NativeStartMethod
		public RuleCall getNativeStartMethodParserRuleCall_2() { return cNativeStartMethodParserRuleCall_2; }

		//AbstractCompositionMethod
		public RuleCall getAbstractCompositionMethodParserRuleCall_3() { return cAbstractCompositionMethodParserRuleCall_3; }

		//AbstractInitMethod
		public RuleCall getAbstractInitMethodParserRuleCall_4() { return cAbstractInitMethodParserRuleCall_4; }

		//Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" ("{"
		//body=AbstractMethodBody "}")? ";"
		public Group getGroup_5() { return cGroup_5; }

		//Modifier?
		public RuleCall getModifierParserRuleCall_5_0() { return cModifierParserRuleCall_5_0; }

		//BuiltInModifier?
		public RuleCall getBuiltInModifierParserRuleCall_5_1() { return cBuiltInModifierParserRuleCall_5_1; }

		//type=UseType
		public Assignment getTypeAssignment_5_2() { return cTypeAssignment_5_2; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_5_2_0() { return cTypeUseTypeParserRuleCall_5_2_0; }

		//name=ID
		public Assignment getNameAssignment_5_3() { return cNameAssignment_5_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_3_0() { return cNameIDTerminalRuleCall_5_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_4() { return cLeftParenthesisKeyword_5_4; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_5_5() { return cGroup_5_5; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_5_0() { return cParamsAssignment_5_5_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_5_0_0() { return cParamsParameterParserRuleCall_5_5_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_5_5_1() { return cGroup_5_5_1; }

		//","
		public Keyword getCommaKeyword_5_5_1_0() { return cCommaKeyword_5_5_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_5_1_1() { return cParamsAssignment_5_5_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_5_1_1_0() { return cParamsParameterParserRuleCall_5_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }

		//("{" body=AbstractMethodBody "}")?
		public Group getGroup_5_7() { return cGroup_5_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_7_0() { return cLeftCurlyBracketKeyword_5_7_0; }

		//body=AbstractMethodBody
		public Assignment getBodyAssignment_5_7_1() { return cBodyAssignment_5_7_1; }

		//AbstractMethodBody
		public RuleCall getBodyAbstractMethodBodyParserRuleCall_5_7_1_0() { return cBodyAbstractMethodBodyParserRuleCall_5_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_7_2() { return cRightCurlyBracketKeyword_5_7_2; }

		//";"
		public Keyword getSemicolonKeyword_5_8() { return cSemicolonKeyword_5_8; }
	}

	public class UseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReftypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReftypeRefTypeCrossReference_0_0 = (CrossReference)cReftypeAssignment_0.eContents().get(0);
		private final RuleCall cReftypeRefTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cReftypeRefTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeNonRefTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////THE MOST IMPORTANT RULE 
		//UseType:
		//	reftype=[RefType] | type=NonRefType;
		public ParserRule getRule() { return rule; }

		//reftype=[RefType] | type=NonRefType
		public Alternatives getAlternatives() { return cAlternatives; }

		//reftype=[RefType]
		public Assignment getReftypeAssignment_0() { return cReftypeAssignment_0; }

		//[RefType]
		public CrossReference getReftypeRefTypeCrossReference_0_0() { return cReftypeRefTypeCrossReference_0_0; }

		//ID
		public RuleCall getReftypeRefTypeIDTerminalRuleCall_0_0_1() { return cReftypeRefTypeIDTerminalRuleCall_0_0_1; }

		//type=NonRefType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//NonRefType
		public RuleCall getTypeNonRefTypeParserRuleCall_1_0() { return cTypeNonRefTypeParserRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUseTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDimAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimDimParserRuleCall_1_0 = (RuleCall)cDimAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	type=UseType dim+=Dim* name=ID;
		public ParserRule getRule() { return rule; }

		//type=UseType dim+=Dim* name=ID
		public Group getGroup() { return cGroup; }

		//type=UseType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_0_0() { return cTypeUseTypeParserRuleCall_0_0; }

		//dim+=Dim*
		public Assignment getDimAssignment_1() { return cDimAssignment_1; }

		//Dim
		public RuleCall getDimDimParserRuleCall_1_0() { return cDimDimParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedElement:
		//	Member | Parameter;
		public ParserRule getRule() { return rule; }

		//Member | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsBlockStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//MethodBody:
		//	{body} statements+=BlockStatement*;
		public ParserRule getRule() { return rule; }

		//{body} statements+=BlockStatement*
		public Group getGroup() { return cGroup; }

		//{body}
		public Action getBodyAction_0() { return cBodyAction_0; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_1_0() { return cStatementsBlockStatementParserRuleCall_1_0; }
	}

	public class AbstractMethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMethodBody");
		private final RuleCall cRequiresAbstractCompositionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractMethodBody:
		//	RequiresAbstractComposition;
		public ParserRule getRule() { return rule; }

		//RequiresAbstractComposition
		public RuleCall getRequiresAbstractCompositionParserRuleCall() { return cRequiresAbstractCompositionParserRuleCall; }
	}

	public class LocalVarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LocalVarName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class VariableInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VariableInitializer:
		//	Expression | "{" ExpressionList "}";
		public ParserRule getRule() { return rule; }

		//Expression | "{" ExpressionList "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//"{" ExpressionList "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_1() { return cExpressionListParserRuleCall_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//	"return" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"return" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AMOUNTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMOUNT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAMOUNT_GEONETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAMOUNT_ONE_OR_ZEROTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AMOUNT:
		//	AMOUNT_GEONE | AMOUNT_ONE_OR_ZERO;
		public ParserRule getRule() { return rule; }

		//AMOUNT_GEONE | AMOUNT_ONE_OR_ZERO
		public Alternatives getAlternatives() { return cAlternatives; }

		//AMOUNT_GEONE
		public RuleCall getAMOUNT_GEONETerminalRuleCall_0() { return cAMOUNT_GEONETerminalRuleCall_0; }

		//AMOUNT_ONE_OR_ZERO
		public RuleCall getAMOUNT_ONE_OR_ZEROTerminalRuleCall_1() { return cAMOUNT_ONE_OR_ZEROTerminalRuleCall_1; }
	}

	public class AbstractInterfaceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractInterfaceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequiresParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractInvariantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractInterfaceElement:
		//	AbstractMethod | Requires | ClockConstraint | AbstractInvariant;
		public ParserRule getRule() { return rule; }

		//AbstractMethod | Requires | ClockConstraint | AbstractInvariant
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractMethod
		public RuleCall getAbstractMethodParserRuleCall_0() { return cAbstractMethodParserRuleCall_0; }

		//Requires
		public RuleCall getRequiresParserRuleCall_1() { return cRequiresParserRuleCall_1; }

		//ClockConstraint
		public RuleCall getClockConstraintParserRuleCall_2() { return cClockConstraintParserRuleCall_2; }

		//AbstractInvariant
		public RuleCall getAbstractInvariantParserRuleCall_3() { return cAbstractInvariantParserRuleCall_3; }
	}

	public class RequiresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requires");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAMOUNTParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeUseTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Requires:
		//	"Requires" name=ID "[" AMOUNT "]" ":" type=UseType ";";
		public ParserRule getRule() { return rule; }

		//"Requires" name=ID "[" AMOUNT "]" ":" type=UseType ";"
		public Group getGroup() { return cGroup; }

		//"Requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_3() { return cAMOUNTParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//type=UseType
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_6_0() { return cTypeUseTypeParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class AbstractDynamicSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDynamicSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSnameIDTerminalRuleCall_1_0 = (RuleCall)cSnameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAMOUNTParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cType1Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cType1RefTypeCrossReference_6_0 = (CrossReference)cType1Assignment_6.eContents().get(0);
		private final RuleCall cType1RefTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cType1RefTypeCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVerticalLineKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cType2Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cType2RefTypeCrossReference_7_1_0 = (CrossReference)cType2Assignment_7_1.eContents().get(0);
		private final RuleCall cType2RefTypeIDTerminalRuleCall_7_1_0_1 = (RuleCall)cType2RefTypeCrossReference_7_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnameIDTerminalRuleCall_9_0 = (RuleCall)cAnameAssignment_9.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cAMOUNTParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cRightSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cColonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cType3Assignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cType3RefTypeCrossReference_14_0 = (CrossReference)cType3Assignment_14.eContents().get(0);
		private final RuleCall cType3RefTypeIDTerminalRuleCall_14_0_1 = (RuleCall)cType3RefTypeCrossReference_14_0.eContents().get(1);
		private final Keyword cCommaKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cDnameAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cDnameIDTerminalRuleCall_16_0 = (RuleCall)cDnameAssignment_16.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final RuleCall cAMOUNTParserRuleCall_18 = (RuleCall)cGroup.eContents().get(18);
		private final Keyword cRightSquareBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cColonKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cType4Assignment_21 = (Assignment)cGroup.eContents().get(21);
		private final CrossReference cType4RefTypeCrossReference_21_0 = (CrossReference)cType4Assignment_21.eContents().get(0);
		private final RuleCall cType4RefTypeIDTerminalRuleCall_21_0_1 = (RuleCall)cType4RefTypeCrossReference_21_0.eContents().get(1);
		private final Group cGroup_22 = (Group)cGroup.eContents().get(22);
		private final Keyword cVerticalLineKeyword_22_0 = (Keyword)cGroup_22.eContents().get(0);
		private final Assignment cType5Assignment_22_1 = (Assignment)cGroup_22.eContents().get(1);
		private final CrossReference cType5RefTypeCrossReference_22_1_0 = (CrossReference)cType5Assignment_22_1.eContents().get(0);
		private final RuleCall cType5RefTypeIDTerminalRuleCall_22_1_0_1 = (RuleCall)cType5RefTypeCrossReference_22_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_23 = (Keyword)cGroup.eContents().get(23);
		
		//AbstractDynamicSwitch:
		//	"(" sname=ID "[" AMOUNT "]" ":" type1=[RefType] ("|" type2=[RefType])? "," aname=ID "[" AMOUNT "]" ":"
		//	type3=[RefType] "," dname=ID "[" AMOUNT "]" ":" type4=[RefType] ("|" type5=[RefType])? ")";
		public ParserRule getRule() { return rule; }

		//"(" sname=ID "[" AMOUNT "]" ":" type1=[RefType] ("|" type2=[RefType])? "," aname=ID "[" AMOUNT "]" ":" type3=[RefType]
		//"," dname=ID "[" AMOUNT "]" ":" type4=[RefType] ("|" type5=[RefType])? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//sname=ID
		public Assignment getSnameAssignment_1() { return cSnameAssignment_1; }

		//ID
		public RuleCall getSnameIDTerminalRuleCall_1_0() { return cSnameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_3() { return cAMOUNTParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//type1=[RefType]
		public Assignment getType1Assignment_6() { return cType1Assignment_6; }

		//[RefType]
		public CrossReference getType1RefTypeCrossReference_6_0() { return cType1RefTypeCrossReference_6_0; }

		//ID
		public RuleCall getType1RefTypeIDTerminalRuleCall_6_0_1() { return cType1RefTypeIDTerminalRuleCall_6_0_1; }

		//("|" type2=[RefType])?
		public Group getGroup_7() { return cGroup_7; }

		//"|"
		public Keyword getVerticalLineKeyword_7_0() { return cVerticalLineKeyword_7_0; }

		//type2=[RefType]
		public Assignment getType2Assignment_7_1() { return cType2Assignment_7_1; }

		//[RefType]
		public CrossReference getType2RefTypeCrossReference_7_1_0() { return cType2RefTypeCrossReference_7_1_0; }

		//ID
		public RuleCall getType2RefTypeIDTerminalRuleCall_7_1_0_1() { return cType2RefTypeIDTerminalRuleCall_7_1_0_1; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//aname=ID
		public Assignment getAnameAssignment_9() { return cAnameAssignment_9; }

		//ID
		public RuleCall getAnameIDTerminalRuleCall_9_0() { return cAnameIDTerminalRuleCall_9_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10() { return cLeftSquareBracketKeyword_10; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_11() { return cAMOUNTParserRuleCall_11; }

		//"]"
		public Keyword getRightSquareBracketKeyword_12() { return cRightSquareBracketKeyword_12; }

		//":"
		public Keyword getColonKeyword_13() { return cColonKeyword_13; }

		//type3=[RefType]
		public Assignment getType3Assignment_14() { return cType3Assignment_14; }

		//[RefType]
		public CrossReference getType3RefTypeCrossReference_14_0() { return cType3RefTypeCrossReference_14_0; }

		//ID
		public RuleCall getType3RefTypeIDTerminalRuleCall_14_0_1() { return cType3RefTypeIDTerminalRuleCall_14_0_1; }

		//","
		public Keyword getCommaKeyword_15() { return cCommaKeyword_15; }

		//dname=ID
		public Assignment getDnameAssignment_16() { return cDnameAssignment_16; }

		//ID
		public RuleCall getDnameIDTerminalRuleCall_16_0() { return cDnameIDTerminalRuleCall_16_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_17() { return cLeftSquareBracketKeyword_17; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_18() { return cAMOUNTParserRuleCall_18; }

		//"]"
		public Keyword getRightSquareBracketKeyword_19() { return cRightSquareBracketKeyword_19; }

		//":"
		public Keyword getColonKeyword_20() { return cColonKeyword_20; }

		//type4=[RefType]
		public Assignment getType4Assignment_21() { return cType4Assignment_21; }

		//[RefType]
		public CrossReference getType4RefTypeCrossReference_21_0() { return cType4RefTypeCrossReference_21_0; }

		//ID
		public RuleCall getType4RefTypeIDTerminalRuleCall_21_0_1() { return cType4RefTypeIDTerminalRuleCall_21_0_1; }

		//("|" type5=[RefType])?
		public Group getGroup_22() { return cGroup_22; }

		//"|"
		public Keyword getVerticalLineKeyword_22_0() { return cVerticalLineKeyword_22_0; }

		//type5=[RefType]
		public Assignment getType5Assignment_22_1() { return cType5Assignment_22_1; }

		//[RefType]
		public CrossReference getType5RefTypeCrossReference_22_1_0() { return cType5RefTypeCrossReference_22_1_0; }

		//ID
		public RuleCall getType5RefTypeIDTerminalRuleCall_22_1_0_1() { return cType5RefTypeIDTerminalRuleCall_22_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_23() { return cRightParenthesisKeyword_23; }
	}

	public class ABSTRACT_CONDTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ABSTRACT_CONDTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ABSTRACT_CONDTION:
		//	"Condition" "{" "}" ";";
		public ParserRule getRule() { return rule; }

		//"Condition" "{" "}" ";"
		public Group getGroup() { return cGroup; }

		//"Condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AbstractCompositionMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractCompositionMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameCompositionKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRacAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRacRequiresAbstractCompositionParserRuleCall_5_0 = (RuleCall)cRacAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AbstractCompositionMethod:
		//	"void" name="Composition" "(" ")" "{" rac=RequiresAbstractComposition "}" ";";
		public ParserRule getRule() { return rule; }

		//"void" name="Composition" "(" ")" "{" rac=RequiresAbstractComposition "}" ";"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name="Composition"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Composition"
		public Keyword getNameCompositionKeyword_1_0() { return cNameCompositionKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//rac=RequiresAbstractComposition
		public Assignment getRacAssignment_5() { return cRacAssignment_5; }

		//RequiresAbstractComposition
		public RuleCall getRacRequiresAbstractCompositionParserRuleCall_5_0() { return cRacRequiresAbstractCompositionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class NativeStartMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeStartMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameStartKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NativeStartMethod:
		//	"Native" "void" name="Start" "(" ")" ";";
		public ParserRule getRule() { return rule; }

		//"Native" "void" name="Start" "(" ")" ";"
		public Group getGroup() { return cGroup; }

		//"Native"
		public Keyword getNativeKeyword_0() { return cNativeKeyword_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }

		//name="Start"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"Start"
		public Keyword getNameStartKeyword_2_0() { return cNameStartKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RequiresAbstractCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiresAbstractComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAMOUNTParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cASYACTIONSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cAMOUNTParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAbstract_dynamic_switchAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0 = (RuleCall)cAbstract_dynamic_switchAssignment_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cABSTRACT_CONDTIONParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cABSTRACT_DISCRETEParserRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//RequiresAbstractComposition:
		//	"Requires" name=ID "[" AMOUNT "]" ASYACTIONS "[" AMOUNT "]" ":" abstract_dynamic_switch=AbstractDynamicSwitch "{"
		//	ABSTRACT_CONDTION ABSTRACT_DISCRETE "}" ";";
		public ParserRule getRule() { return rule; }

		//"Requires" name=ID "[" AMOUNT "]" ASYACTIONS "[" AMOUNT "]" ":" abstract_dynamic_switch=AbstractDynamicSwitch "{"
		//ABSTRACT_CONDTION ABSTRACT_DISCRETE "}" ";"
		public Group getGroup() { return cGroup; }

		//"Requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_3() { return cAMOUNTParserRuleCall_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//ASYACTIONS
		public RuleCall getASYACTIONSTerminalRuleCall_5() { return cASYACTIONSTerminalRuleCall_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }

		//AMOUNT
		public RuleCall getAMOUNTParserRuleCall_7() { return cAMOUNTParserRuleCall_7; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//abstract_dynamic_switch=AbstractDynamicSwitch
		public Assignment getAbstract_dynamic_switchAssignment_10() { return cAbstract_dynamic_switchAssignment_10; }

		//AbstractDynamicSwitch
		public RuleCall getAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0() { return cAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//ABSTRACT_CONDTION
		public RuleCall getABSTRACT_CONDTIONParserRuleCall_12() { return cABSTRACT_CONDTIONParserRuleCall_12; }

		//ABSTRACT_DISCRETE
		public RuleCall getABSTRACT_DISCRETEParserRuleCall_13() { return cABSTRACT_DISCRETEParserRuleCall_13; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }
	}

	public class ABSTRACT_DISCRETEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ABSTRACT_DISCRETE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiscreteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ABSTRACT_DISCRETE:
		//	"Discrete" "{" "}" ";";
		public ParserRule getRule() { return rule; }

		//"Discrete" "{" "}" ";"
		public Group getGroup() { return cGroup; }

		//"Discrete"
		public Keyword getDiscreteKeyword_0() { return cDiscreteKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ClockConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClockConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCLOCKTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClockConstraint:
		//	{ClockConstraint} "Constraint" name=CLOCK ";";
		public ParserRule getRule() { return rule; }

		//{ClockConstraint} "Constraint" name=CLOCK ";"
		public Group getGroup() { return cGroup; }

		//{ClockConstraint}
		public Action getClockConstraintAction_0() { return cClockConstraintAction_0; }

		//"Constraint"
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }

		//name=CLOCK
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CLOCK
		public RuleCall getNameCLOCKTerminalRuleCall_2_0() { return cNameCLOCKTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AbstractInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameInvariantKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AbstractInvariant:
		//	{AbstractInvariant} name="Invariant" "{" "}" ";";
		public ParserRule getRule() { return rule; }

		//{AbstractInvariant} name="Invariant" "{" "}" ";"
		public Group getGroup() { return cGroup; }

		//{AbstractInvariant}
		public Action getAbstractInvariantAction_0() { return cAbstractInvariantAction_0; }

		//name="Invariant"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Invariant"
		public Keyword getNameInvariantKeyword_1_0() { return cNameInvariantKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentoperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0 = (RuleCall)cAssignmentoperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		////expressions
		//Expression:
		//	ConditionalExpression (=> assignmentoperator=AssignmentOperator expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//ConditionalExpression (=> assignmentoperator=AssignmentOperator expression=Expression)?
		public Group getGroup() { return cGroup; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }

		//(=> assignmentoperator=AssignmentOperator expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> assignmentoperator=AssignmentOperator
		public Assignment getAssignmentoperatorAssignment_1_0() { return cAssignmentoperatorAssignment_1_0; }

		//AssignmentOperator
		public RuleCall getAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0() { return cAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPercentSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//AssignmentOperator:
		//	"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=";
		public ParserRule getRule() { return rule; }

		//"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_8() { return cPercentSignEqualsSignKeyword_8; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0 = (RuleCall)cConditionalorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression2Assignment_1_3.eContents().get(0);
		
		//ConditionalExpression:
		//	conditionalorexpression=ConditionalOrExpression ("?" expression1=Expression ":" expression2=Expression)?;
		public ParserRule getRule() { return rule; }

		//conditionalorexpression=ConditionalOrExpression ("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup() { return cGroup; }

		//conditionalorexpression=ConditionalOrExpression
		public Assignment getConditionalorexpressionAssignment_0() { return cConditionalorexpressionAssignment_0; }

		//ConditionalOrExpression
		public RuleCall getConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0() { return cConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0; }

		//("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression1=Expression
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_0() { return cExpression1ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression2=Expression
		public Assignment getExpression2Assignment_1_3() { return cExpression2Assignment_1_3; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_3_0() { return cExpression2ExpressionParserRuleCall_1_3_0; }
	}

	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalandexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0 = (RuleCall)cConditionalandexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionalandexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionalandexpressionAssignment_1_1.eContents().get(0);
		
		//ConditionalOrExpression:
		//	conditionalandexpression+=ConditionalAndExpression ("or" conditionalandexpression+=ConditionalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//conditionalandexpression+=ConditionalAndExpression ("or" conditionalandexpression+=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }

		//conditionalandexpression+=ConditionalAndExpression
		public Assignment getConditionalandexpressionAssignment_0() { return cConditionalandexpressionAssignment_0; }

		//ConditionalAndExpression
		public RuleCall getConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0() { return cConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0; }

		//("or" conditionalandexpression+=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//conditionalandexpression+=ConditionalAndExpression
		public Assignment getConditionalandexpressionAssignment_1_1() { return cConditionalandexpressionAssignment_1_1; }

		//ConditionalAndExpression
		public RuleCall getConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0() { return cConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclusiveorexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0 = (RuleCall)cExclusiveorexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExclusiveorexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0 = (RuleCall)cExclusiveorexpressionAssignment_1_1.eContents().get(0);
		
		//ConditionalAndExpression:
		//	exclusiveorexpression+=ExclusiveOrExpression ("and" exclusiveorexpression+=ExclusiveOrExpression)*;
		public ParserRule getRule() { return rule; }

		//exclusiveorexpression+=ExclusiveOrExpression ("and" exclusiveorexpression+=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }

		//exclusiveorexpression+=ExclusiveOrExpression
		public Assignment getExclusiveorexpressionAssignment_0() { return cExclusiveorexpressionAssignment_0; }

		//ExclusiveOrExpression
		public RuleCall getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0() { return cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0; }

		//("and" exclusiveorexpression+=ExclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//exclusiveorexpression+=ExclusiveOrExpression
		public Assignment getExclusiveorexpressionAssignment_1_1() { return cExclusiveorexpressionAssignment_1_1; }

		//ExclusiveOrExpression
		public RuleCall getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0() { return cExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0; }
	}

	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEqualityexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEqualityexpressionEqualityExpressionParserRuleCall_0_0 = (RuleCall)cEqualityexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cXorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEqualityexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqualityexpressionEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cEqualityexpressionAssignment_1_1.eContents().get(0);
		
		//ExclusiveOrExpression:
		//	equalityexpression+=EqualityExpression ("xor" equalityexpression+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//equalityexpression+=EqualityExpression ("xor" equalityexpression+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//equalityexpression+=EqualityExpression
		public Assignment getEqualityexpressionAssignment_0() { return cEqualityexpressionAssignment_0; }

		//EqualityExpression
		public RuleCall getEqualityexpressionEqualityExpressionParserRuleCall_0_0() { return cEqualityexpressionEqualityExpressionParserRuleCall_0_0; }

		//("xor" equalityexpression+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"xor"
		public Keyword getXorKeyword_1_0() { return cXorKeyword_1_0; }

		//equalityexpression+=EqualityExpression
		public Assignment getEqualityexpressionAssignment_1_1() { return cEqualityexpressionAssignment_1_1; }

		//EqualityExpression
		public RuleCall getEqualityexpressionEqualityExpressionParserRuleCall_1_1_0() { return cEqualityexpressionEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceofexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0 = (RuleCall)cInstanceofexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cInstanceofexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0 = (RuleCall)cInstanceofexpressionAssignment_1_1.eContents().get(0);
		
		//EqualityExpression:
		//	instanceofexpression+=InstanceOfExpression (("==" | "!=") instanceofexpression+=InstanceOfExpression)*;
		public ParserRule getRule() { return rule; }

		//instanceofexpression+=InstanceOfExpression (("==" | "!=") instanceofexpression+=InstanceOfExpression)*
		public Group getGroup() { return cGroup; }

		//instanceofexpression+=InstanceOfExpression
		public Assignment getInstanceofexpressionAssignment_0() { return cInstanceofexpressionAssignment_0; }

		//InstanceOfExpression
		public RuleCall getInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0() { return cInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0; }

		//(("==" | "!=") instanceofexpression+=InstanceOfExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//instanceofexpression+=InstanceOfExpression
		public Assignment getInstanceofexpressionAssignment_1_1() { return cInstanceofexpressionAssignment_1_1; }

		//InstanceOfExpression
		public RuleCall getInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0() { return cInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0; }
	}

	public class InstanceOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftRelationalExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInstanceofKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//InstanceOfExpression:
		//	left=RelationalExpression ("instanceof" type=UseType)?;
		public ParserRule getRule() { return rule; }

		//left=RelationalExpression ("instanceof" type=UseType)?
		public Group getGroup() { return cGroup; }

		//left=RelationalExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//RelationalExpression
		public RuleCall getLeftRelationalExpressionParserRuleCall_0_0() { return cLeftRelationalExpressionParserRuleCall_0_0; }

		//("instanceof" type=UseType)?
		public Group getGroup_1() { return cGroup_1; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0() { return cInstanceofKeyword_1_0; }

		//type=UseType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_1_0() { return cTypeUseTypeParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditiveexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditiveexpressionAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cAdditiveexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRelationalopAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationalopRelationalOpParserRuleCall_1_0_0 = (RuleCall)cRelationalopAssignment_1_0.eContents().get(0);
		private final Assignment cAdditiveexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cAdditiveexpressionAssignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//	additiveexpression+=AdditiveExpression (relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//additiveexpression+=AdditiveExpression (relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//additiveexpression+=AdditiveExpression
		public Assignment getAdditiveexpressionAssignment_0() { return cAdditiveexpressionAssignment_0; }

		//AdditiveExpression
		public RuleCall getAdditiveexpressionAdditiveExpressionParserRuleCall_0_0() { return cAdditiveexpressionAdditiveExpressionParserRuleCall_0_0; }

		//(relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//relationalop+=RelationalOp
		public Assignment getRelationalopAssignment_1_0() { return cRelationalopAssignment_1_0; }

		//RelationalOp
		public RuleCall getRelationalopRelationalOpParserRuleCall_1_0_0() { return cRelationalopRelationalOpParserRuleCall_1_0_0; }

		//additiveexpression+=AdditiveExpression
		public Assignment getAdditiveexpressionAssignment_1_1() { return cAdditiveexpressionAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0() { return cAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVerticalLineVerticalLineKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTildeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//RelationalOp:
		//	"<" | "<=" | ">" | ">=" | "in" | "||" | "~";
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">=" | "in" | "||" | "~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_5() { return cVerticalLineVerticalLineKeyword_5; }

		//"~"
		public Keyword getTildeKeyword_6() { return cTildeKeyword_6; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicativeexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cMultiplicativeexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMultiplicativeexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicativeexpressionAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//	multiplicativeexpression+=MultiplicativeExpression (("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//multiplicativeexpression+=MultiplicativeExpression (("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//multiplicativeexpression+=MultiplicativeExpression
		public Assignment getMultiplicativeexpressionAssignment_0() { return cMultiplicativeexpressionAssignment_0; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0() { return cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0; }

		//(("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//multiplicativeexpression+=MultiplicativeExpression
		public Assignment getMultiplicativeexpressionAssignment_1_1() { return cMultiplicativeexpressionAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0() { return cMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryexpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_0_0 = (RuleCall)cUnaryexpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cUnaryexpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cUnaryexpressionAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//	unaryexpression+=UnaryExpression (("*" | "/" | "%") unaryexpression+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//unaryexpression+=UnaryExpression (("*" | "/" | "%") unaryexpression+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//unaryexpression+=UnaryExpression
		public Assignment getUnaryexpressionAssignment_0() { return cUnaryexpressionAssignment_0; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_0_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_0_0; }

		//(("*" | "/" | "%") unaryexpression+=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//unaryexpression+=UnaryExpression
		public Assignment getUnaryexpressionAssignment_1_1() { return cUnaryexpressionAssignment_1_1; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_1_1_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFromAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFromExpressionParserRuleCall_4_1_0 = (RuleCall)cFromAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cToAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cToExpressionParserRuleCall_4_3_0 = (RuleCall)cToAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cUnaryExpressionNotPlusMinusParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//UnaryExpression:
		//	"+" UnaryExpression | "-" UnaryExpression | "++" UnaryExpression | "--" UnaryExpression | "[" from=Expression ","
		//	to=Expression "]" | UnaryExpressionNotPlusMinus;
		public ParserRule getRule() { return rule; }

		//"+" UnaryExpression | "-" UnaryExpression | "++" UnaryExpression | "--" UnaryExpression | "[" from=Expression ","
		//to=Expression "]" | UnaryExpressionNotPlusMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0_1() { return cUnaryExpressionParserRuleCall_0_1; }

		//"-" UnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1_1() { return cUnaryExpressionParserRuleCall_1_1; }

		//"++" UnaryExpression
		public Group getGroup_2() { return cGroup_2; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_2_0() { return cPlusSignPlusSignKeyword_2_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_2_1() { return cUnaryExpressionParserRuleCall_2_1; }

		//"--" UnaryExpression
		public Group getGroup_3() { return cGroup_3; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3_0() { return cHyphenMinusHyphenMinusKeyword_3_0; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_3_1() { return cUnaryExpressionParserRuleCall_3_1; }

		//"[" from=Expression "," to=Expression "]"
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//from=Expression
		public Assignment getFromAssignment_4_1() { return cFromAssignment_4_1; }

		//Expression
		public RuleCall getFromExpressionParserRuleCall_4_1_0() { return cFromExpressionParserRuleCall_4_1_0; }

		//","
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }

		//to=Expression
		public Assignment getToAssignment_4_3() { return cToAssignment_4_3; }

		//Expression
		public RuleCall getToExpressionParserRuleCall_4_3_0() { return cToExpressionParserRuleCall_4_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }

		//UnaryExpressionNotPlusMinus
		public RuleCall getUnaryExpressionNotPlusMinusParserRuleCall_5() { return cUnaryExpressionNotPlusMinusParserRuleCall_5; }
	}

	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpressionNotPlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryExpressionNotPlusMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cUnaryexpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0 = (RuleCall)cUnaryexpressionAssignment_1_0_1.eContents().get(0);
		private final Assignment cCastexpressionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCastexpressionCastExpressionParserRuleCall_1_1_0 = (RuleCall)cCastexpressionAssignment_1_1.eContents().get(0);
		private final Assignment cPrimaryAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cPrimaryPrimaryParserRuleCall_1_2_0 = (RuleCall)cPrimaryAssignment_1_2.eContents().get(0);
		private final Assignment cBuiltinAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cBuiltinBuilt_In_MethodsParserRuleCall_1_3_0 = (RuleCall)cBuiltinAssignment_1_3.eContents().get(0);
		
		//UnaryExpressionNotPlusMinus:
		//	{UnaryExpressionNotPlusMinus} ("!" unaryexpression=UnaryExpression | => castexpression=CastExpression |
		//	primary=Primary | builtin=Built_In_Methods);
		public ParserRule getRule() { return rule; }

		//{UnaryExpressionNotPlusMinus} ("!" unaryexpression=UnaryExpression | => castexpression=CastExpression | primary=Primary
		//| builtin=Built_In_Methods)
		public Group getGroup() { return cGroup; }

		//{UnaryExpressionNotPlusMinus}
		public Action getUnaryExpressionNotPlusMinusAction_0() { return cUnaryExpressionNotPlusMinusAction_0; }

		//"!" unaryexpression=UnaryExpression | => castexpression=CastExpression | primary=Primary | builtin=Built_In_Methods
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"!" unaryexpression=UnaryExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0_0() { return cExclamationMarkKeyword_1_0_0; }

		//unaryexpression=UnaryExpression
		public Assignment getUnaryexpressionAssignment_1_0_1() { return cUnaryexpressionAssignment_1_0_1; }

		//UnaryExpression
		public RuleCall getUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0() { return cUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0; }

		//=> castexpression=CastExpression
		public Assignment getCastexpressionAssignment_1_1() { return cCastexpressionAssignment_1_1; }

		//CastExpression
		public RuleCall getCastexpressionCastExpressionParserRuleCall_1_1_0() { return cCastexpressionCastExpressionParserRuleCall_1_1_0; }

		//primary=Primary
		public Assignment getPrimaryAssignment_1_2() { return cPrimaryAssignment_1_2; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_1_2_0() { return cPrimaryPrimaryParserRuleCall_1_2_0; }

		//builtin=Built_In_Methods
		public Assignment getBuiltinAssignment_1_3() { return cBuiltinAssignment_1_3; }

		//Built_In_Methods
		public RuleCall getBuiltinBuilt_In_MethodsParserRuleCall_1_3_0() { return cBuiltinBuilt_In_MethodsParserRuleCall_1_3_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cParexpressionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cParexpressionParExpressionParserRuleCall_1_0_0 = (RuleCall)cParexpressionAssignment_1_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_1_0 = (RuleCall)cLiteralAssignment_1_1.eContents().get(0);
		private final Assignment cNewobjectAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cNewobjectNewByClassParserRuleCall_1_2_0 = (RuleCall)cNewobjectAssignment_1_2.eContents().get(0);
		private final Assignment cNewarrayAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cNewarrayNewArrayParserRuleCall_1_3_0 = (RuleCall)cNewarrayAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cThisKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Keyword cFullStopKeyword_1_4_1_0 = (Keyword)cGroup_1_4_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_4_1_1 = (Assignment)cGroup_1_4_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_4_1_1_0 = (RuleCall)cIdentifierAssignment_1_4_1_1.eContents().get(0);
		private final Assignment cDimerAssignment_1_4_1_2 = (Assignment)cGroup_1_4_1.eContents().get(2);
		private final RuleCall cDimerDimExprParserRuleCall_1_4_1_2_0 = (RuleCall)cDimerAssignment_1_4_1_2.eContents().get(0);
		private final Assignment cIdentifiersuffixAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cIdentifiersuffixIdentifierSuffixParserRuleCall_1_4_2_0 = (RuleCall)cIdentifiersuffixAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cIdentifierAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_5_0_0 = (RuleCall)cIdentifierAssignment_1_5_0.eContents().get(0);
		private final Assignment cDimerAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cDimerDimExprParserRuleCall_1_5_1_0 = (RuleCall)cDimerAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cFullStopKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_5_2_1_0 = (RuleCall)cIdentifierAssignment_1_5_2_1.eContents().get(0);
		private final Assignment cDimerAssignment_1_5_2_2 = (Assignment)cGroup_1_5_2.eContents().get(2);
		private final RuleCall cDimerDimExprParserRuleCall_1_5_2_2_0 = (RuleCall)cDimerAssignment_1_5_2_2.eContents().get(0);
		private final Assignment cIdentifiersuffixAssignment_1_5_3 = (Assignment)cGroup_1_5.eContents().get(3);
		private final RuleCall cIdentifiersuffixIdentifierSuffixParserRuleCall_1_5_3_0 = (RuleCall)cIdentifiersuffixAssignment_1_5_3.eContents().get(0);
		
		//Primary:
		//	{Primary} (parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
		//	// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
		//	| literal=Literal | newobject=NewByClass | newarray=NewArray | "this" ("." identifier+=ID dimer+=DimExpr*)* =>
		//	identifiersuffix=IdentifierSuffix? | identifier+=ID dimer+=DimExpr* ("." identifier+=ID dimer+=DimExpr*)* =>
		//	identifiersuffix=IdentifierSuffix?);
		public ParserRule getRule() { return rule; }

		//{Primary} (parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
		//// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
		//| literal=Literal | newobject=NewByClass | newarray=NewArray | "this" ("." identifier+=ID dimer+=DimExpr*)* =>
		//identifiersuffix=IdentifierSuffix? | identifier+=ID dimer+=DimExpr* ("." identifier+=ID dimer+=DimExpr*)* =>
		//identifiersuffix=IdentifierSuffix?)
		public Group getGroup() { return cGroup; }

		//{Primary}
		public Action getPrimaryAction_0() { return cPrimaryAction_0; }

		//parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
		//// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
		//| literal=Literal | newobject=NewByClass | newarray=NewArray | "this" ("." identifier+=ID dimer+=DimExpr*)* =>
		//identifiersuffix=IdentifierSuffix? | identifier+=ID dimer+=DimExpr* ("." identifier+=ID dimer+=DimExpr*)* =>
		//identifiersuffix=IdentifierSuffix?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//parexpression=ParExpression
		public Assignment getParexpressionAssignment_1_0() { return cParexpressionAssignment_1_0; }

		//ParExpression
		public RuleCall getParexpressionParExpressionParserRuleCall_1_0_0() { return cParexpressionParExpressionParserRuleCall_1_0_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_1_1() { return cLiteralAssignment_1_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_1_0() { return cLiteralLiteralParserRuleCall_1_1_0; }

		//newobject=NewByClass
		public Assignment getNewobjectAssignment_1_2() { return cNewobjectAssignment_1_2; }

		//NewByClass
		public RuleCall getNewobjectNewByClassParserRuleCall_1_2_0() { return cNewobjectNewByClassParserRuleCall_1_2_0; }

		//newarray=NewArray
		public Assignment getNewarrayAssignment_1_3() { return cNewarrayAssignment_1_3; }

		//NewArray
		public RuleCall getNewarrayNewArrayParserRuleCall_1_3_0() { return cNewarrayNewArrayParserRuleCall_1_3_0; }

		//"this" ("." identifier+=ID dimer+=DimExpr*)* => identifiersuffix=IdentifierSuffix?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"this"
		public Keyword getThisKeyword_1_4_0() { return cThisKeyword_1_4_0; }

		//("." identifier+=ID dimer+=DimExpr*)*
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }

		//"."
		public Keyword getFullStopKeyword_1_4_1_0() { return cFullStopKeyword_1_4_1_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_4_1_1() { return cIdentifierAssignment_1_4_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_4_1_1_0() { return cIdentifierIDTerminalRuleCall_1_4_1_1_0; }

		//dimer+=DimExpr*
		public Assignment getDimerAssignment_1_4_1_2() { return cDimerAssignment_1_4_1_2; }

		//DimExpr
		public RuleCall getDimerDimExprParserRuleCall_1_4_1_2_0() { return cDimerDimExprParserRuleCall_1_4_1_2_0; }

		//=> identifiersuffix=IdentifierSuffix?
		public Assignment getIdentifiersuffixAssignment_1_4_2() { return cIdentifiersuffixAssignment_1_4_2; }

		//IdentifierSuffix
		public RuleCall getIdentifiersuffixIdentifierSuffixParserRuleCall_1_4_2_0() { return cIdentifiersuffixIdentifierSuffixParserRuleCall_1_4_2_0; }

		//identifier+=ID dimer+=DimExpr* ("." identifier+=ID dimer+=DimExpr*)* => identifiersuffix=IdentifierSuffix?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_5_0() { return cIdentifierAssignment_1_5_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_5_0_0() { return cIdentifierIDTerminalRuleCall_1_5_0_0; }

		//dimer+=DimExpr*
		public Assignment getDimerAssignment_1_5_1() { return cDimerAssignment_1_5_1; }

		//DimExpr
		public RuleCall getDimerDimExprParserRuleCall_1_5_1_0() { return cDimerDimExprParserRuleCall_1_5_1_0; }

		//("." identifier+=ID dimer+=DimExpr*)*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }

		//"."
		public Keyword getFullStopKeyword_1_5_2_0() { return cFullStopKeyword_1_5_2_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_5_2_1() { return cIdentifierAssignment_1_5_2_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_5_2_1_0() { return cIdentifierIDTerminalRuleCall_1_5_2_1_0; }

		//dimer+=DimExpr*
		public Assignment getDimerAssignment_1_5_2_2() { return cDimerAssignment_1_5_2_2; }

		//DimExpr
		public RuleCall getDimerDimExprParserRuleCall_1_5_2_2_0() { return cDimerDimExprParserRuleCall_1_5_2_2_0; }

		//=> identifiersuffix=IdentifierSuffix?
		public Assignment getIdentifiersuffixAssignment_1_5_3() { return cIdentifiersuffixAssignment_1_5_3; }

		//IdentifierSuffix
		public RuleCall getIdentifiersuffixIdentifierSuffixParserRuleCall_1_5_3_0() { return cIdentifiersuffixIdentifierSuffixParserRuleCall_1_5_3_0; }
	}

	public class IdentifierSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierSuffixAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cClassKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cClassKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFullStopKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cThisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cSuperKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_4_2_0 = (RuleCall)cArgumentsAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cFullStopKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cGetvalueAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final Keyword cGetvalueAtKeyword_1_5_1_0 = (Keyword)cGetvalueAssignment_1_5_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_5_2_0 = (RuleCall)cArgumentsAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Keyword cFullStopKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cCompositionKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Keyword cFullStopKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Keyword cStartKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_7_2 = (Keyword)cGroup_1_7.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_7_3 = (Keyword)cGroup_1_7.eContents().get(3);
		private final Keyword cLeftParenthesisExclamationMarkRightParenthesisKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cLeftParenthesisQuestionMarkRightParenthesisKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		
		//IdentifierSuffix:
		//	{IdentifierSuffix} (("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super"
		//	arguments=Arguments | "." getvalue="at" arguments=Arguments | "." "Composition" "(" ")" | "." "Start" "(" ")" | "(!)"
		//	| "(?)");
		public ParserRule getRule() { return rule; }

		//{IdentifierSuffix} (("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super"
		//arguments=Arguments | "." getvalue="at" arguments=Arguments | "." "Composition" "(" ")" | "." "Start" "(" ")" | "(!)"
		//| "(?)")
		public Group getGroup() { return cGroup; }

		//{IdentifierSuffix}
		public Action getIdentifierSuffixAction_0() { return cIdentifierSuffixAction_0; }

		//("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super" arguments=Arguments | "."
		//getvalue="at" arguments=Arguments | "." "Composition" "(" ")" | "." "Start" "(" ")" | "(!)" | "(?)"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//("[" "]")+ "." "class"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//("[" "]")+
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0_0() { return cLeftSquareBracketKeyword_1_0_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0_1() { return cRightSquareBracketKeyword_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//"class"
		public Keyword getClassKeyword_1_0_2() { return cClassKeyword_1_0_2; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_1_0() { return cArgumentsArgumentsParserRuleCall_1_1_0; }

		//"." "class"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//"class"
		public Keyword getClassKeyword_1_2_1() { return cClassKeyword_1_2_1; }

		//"." "this"
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"."
		public Keyword getFullStopKeyword_1_3_0() { return cFullStopKeyword_1_3_0; }

		//"this"
		public Keyword getThisKeyword_1_3_1() { return cThisKeyword_1_3_1; }

		//"." "super" arguments=Arguments
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"."
		public Keyword getFullStopKeyword_1_4_0() { return cFullStopKeyword_1_4_0; }

		//"super"
		public Keyword getSuperKeyword_1_4_1() { return cSuperKeyword_1_4_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_4_2() { return cArgumentsAssignment_1_4_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_4_2_0() { return cArgumentsArgumentsParserRuleCall_1_4_2_0; }

		//"." getvalue="at" arguments=Arguments
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"."
		public Keyword getFullStopKeyword_1_5_0() { return cFullStopKeyword_1_5_0; }

		//getvalue="at"
		public Assignment getGetvalueAssignment_1_5_1() { return cGetvalueAssignment_1_5_1; }

		//"at"
		public Keyword getGetvalueAtKeyword_1_5_1_0() { return cGetvalueAtKeyword_1_5_1_0; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_5_2() { return cArgumentsAssignment_1_5_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_5_2_0() { return cArgumentsArgumentsParserRuleCall_1_5_2_0; }

		//"." "Composition" "(" ")"
		public Group getGroup_1_6() { return cGroup_1_6; }

		//"."
		public Keyword getFullStopKeyword_1_6_0() { return cFullStopKeyword_1_6_0; }

		//"Composition"
		public Keyword getCompositionKeyword_1_6_1() { return cCompositionKeyword_1_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_6_2() { return cLeftParenthesisKeyword_1_6_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6_3() { return cRightParenthesisKeyword_1_6_3; }

		//"." "Start" "(" ")"
		public Group getGroup_1_7() { return cGroup_1_7; }

		//"."
		public Keyword getFullStopKeyword_1_7_0() { return cFullStopKeyword_1_7_0; }

		//"Start"
		public Keyword getStartKeyword_1_7_1() { return cStartKeyword_1_7_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_7_2() { return cLeftParenthesisKeyword_1_7_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_7_3() { return cRightParenthesisKeyword_1_7_3; }

		//"(!)"
		public Keyword getLeftParenthesisExclamationMarkRightParenthesisKeyword_1_8() { return cLeftParenthesisExclamationMarkRightParenthesisKeyword_1_8; }

		//"(?)"
		public Keyword getLeftParenthesisQuestionMarkRightParenthesisKeyword_1_9() { return cLeftParenthesisQuestionMarkRightParenthesisKeyword_1_9; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//	{Arguments} "(" expressionlist=ExpressionList? ")";
		public ParserRule getRule() { return rule; }

		//{Arguments} "(" expressionlist=ExpressionList? ")"
		public Group getGroup() { return cGroup; }

		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressionlist=ExpressionList?
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }

		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_2_0() { return cExpressionlistExpressionListParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpression1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpression1ExpressionParserRuleCall_0_0 = (RuleCall)cExpression1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expression1=Expression ("," expression2+=Expression)*;
		public ParserRule getRule() { return rule; }

		//expression1=Expression ("," expression2+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression1=Expression
		public Assignment getExpression1Assignment_0() { return cExpression1Assignment_0; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_0_0() { return cExpression1ExpressionParserRuleCall_0_0; }

		//("," expression2+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }
	}

	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCastExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeUseTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionUnaryExpressionNotPlusMinusParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//CastExpression:
		//	{CastExpression} "(" type=UseType ")" expression=UnaryExpressionNotPlusMinus;
		public ParserRule getRule() { return rule; }

		//{CastExpression} "(" type=UseType ")" expression=UnaryExpressionNotPlusMinus
		public Group getGroup() { return cGroup; }

		//{CastExpression}
		public Action getCastExpressionAction_0() { return cCastExpressionAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=UseType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_2_0() { return cTypeUseTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=UnaryExpressionNotPlusMinus
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//UnaryExpressionNotPlusMinus
		public RuleCall getExpressionUnaryExpressionNotPlusMinusParserRuleCall_4_0() { return cExpressionUnaryExpressionNotPlusMinusParserRuleCall_4_0; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpression1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_0 = (RuleCall)cExpression1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpression2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_2_1_0 = (RuleCall)cExpression2Assignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParExpression: //'(' Expression ')';
		//	"(" expression1=Expression ("," expression2+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		////'(' Expression ')';
		//"(" expression1=Expression ("," expression2+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		////'(' Expression ')';
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression1=Expression
		public Assignment getExpression1Assignment_1() { return cExpression1Assignment_1; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_0() { return cExpression1ExpressionParserRuleCall_1_0; }

		//("," expression2+=Expression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_2_1() { return cExpression2Assignment_2_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_2_1_0() { return cExpression2ExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInfiniteLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueInfKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIntegerLiteralParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFloatingPointLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueFLOATING_POINT_LITERALTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCharacterLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueCHARACTER_LITERALTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStringLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBooleanLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBooleanLiteralParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNullLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cValueNullKeyword_6_1_0 = (Keyword)cValueAssignment_6_1.eContents().get(0);
		
		//Literal returns Expression:
		//	{InfiniteLiteral} value="Inf" | {IntegerLiteral} value=IntegerLiteral | {FloatingPointLiteral}
		//	value=FLOATING_POINT_LITERAL | {CharacterLiteral} value=CHARACTER_LITERAL | {StringLiteral} value=STRING_LITERAL |
		//	{BooleanLiteral} value=BooleanLiteral | {NullLiteral} value="null";
		public ParserRule getRule() { return rule; }

		//{InfiniteLiteral} value="Inf" | {IntegerLiteral} value=IntegerLiteral | {FloatingPointLiteral}
		//value=FLOATING_POINT_LITERAL | {CharacterLiteral} value=CHARACTER_LITERAL | {StringLiteral} value=STRING_LITERAL |
		//{BooleanLiteral} value=BooleanLiteral | {NullLiteral} value="null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InfiniteLiteral} value="Inf"
		public Group getGroup_0() { return cGroup_0; }

		//{InfiniteLiteral}
		public Action getInfiniteLiteralAction_0_0() { return cInfiniteLiteralAction_0_0; }

		//value="Inf"
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//"Inf"
		public Keyword getValueInfKeyword_0_1_0() { return cValueInfKeyword_0_1_0; }

		//{IntegerLiteral} value=IntegerLiteral
		public Group getGroup_1() { return cGroup_1; }

		//{IntegerLiteral}
		public Action getIntegerLiteralAction_1_0() { return cIntegerLiteralAction_1_0; }

		//value=IntegerLiteral
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//IntegerLiteral
		public RuleCall getValueIntegerLiteralParserRuleCall_1_1_0() { return cValueIntegerLiteralParserRuleCall_1_1_0; }

		//{FloatingPointLiteral} value=FLOATING_POINT_LITERAL
		public Group getGroup_2() { return cGroup_2; }

		//{FloatingPointLiteral}
		public Action getFloatingPointLiteralAction_2_0() { return cFloatingPointLiteralAction_2_0; }

		//value=FLOATING_POINT_LITERAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//FLOATING_POINT_LITERAL
		public RuleCall getValueFLOATING_POINT_LITERALTerminalRuleCall_2_1_0() { return cValueFLOATING_POINT_LITERALTerminalRuleCall_2_1_0; }

		//{CharacterLiteral} value=CHARACTER_LITERAL
		public Group getGroup_3() { return cGroup_3; }

		//{CharacterLiteral}
		public Action getCharacterLiteralAction_3_0() { return cCharacterLiteralAction_3_0; }

		//value=CHARACTER_LITERAL
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//CHARACTER_LITERAL
		public RuleCall getValueCHARACTER_LITERALTerminalRuleCall_3_1_0() { return cValueCHARACTER_LITERALTerminalRuleCall_3_1_0; }

		//{StringLiteral} value=STRING_LITERAL
		public Group getGroup_4() { return cGroup_4; }

		//{StringLiteral}
		public Action getStringLiteralAction_4_0() { return cStringLiteralAction_4_0; }

		//value=STRING_LITERAL
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_4_1_0() { return cValueSTRING_LITERALTerminalRuleCall_4_1_0; }

		//{BooleanLiteral} value=BooleanLiteral
		public Group getGroup_5() { return cGroup_5; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_5_0() { return cBooleanLiteralAction_5_0; }

		//value=BooleanLiteral
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//BooleanLiteral
		public RuleCall getValueBooleanLiteralParserRuleCall_5_1_0() { return cValueBooleanLiteralParserRuleCall_5_1_0; }

		//{NullLiteral} value="null"
		public Group getGroup_6() { return cGroup_6; }

		//{NullLiteral}
		public Action getNullLiteralAction_6_0() { return cNullLiteralAction_6_0; }

		//value="null"
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//"null"
		public Keyword getValueNullKeyword_6_1_0() { return cValueNullKeyword_6_1_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEX_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOCTAL_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMAL_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntegerLiteral:
		//	HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL;
		public ParserRule getRule() { return rule; }

		//HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX_LITERAL
		public RuleCall getHEX_LITERALTerminalRuleCall_0() { return cHEX_LITERALTerminalRuleCall_0; }

		//OCTAL_LITERAL
		public RuleCall getOCTAL_LITERALTerminalRuleCall_1() { return cOCTAL_LITERALTerminalRuleCall_1; }

		//DECIMAL_LITERAL
		public RuleCall getDECIMAL_LITERALTerminalRuleCall_2() { return cDECIMAL_LITERALTerminalRuleCall_2; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class DE_LHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DE_LHS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVar1IDTerminalRuleCall_2_0 = (RuleCall)cVar1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVar2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVar2IDTerminalRuleCall_3_1_0 = (RuleCall)cVar2Assignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOrderAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOrderIntegerLiteralParserRuleCall_5_0 = (RuleCall)cOrderAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Differential Equations
		//DE_LHS:
		//	"dot" "(" var1=ID ("," var2=ID)? "," order=IntegerLiteral ")";
		public ParserRule getRule() { return rule; }

		//"dot" "(" var1=ID ("," var2=ID)? "," order=IntegerLiteral ")"
		public Group getGroup() { return cGroup; }

		//"dot"
		public Keyword getDotKeyword_0() { return cDotKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=ID
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//ID
		public RuleCall getVar1IDTerminalRuleCall_2_0() { return cVar1IDTerminalRuleCall_2_0; }

		//("," var2=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//var2=ID
		public Assignment getVar2Assignment_3_1() { return cVar2Assignment_3_1; }

		//ID
		public RuleCall getVar2IDTerminalRuleCall_3_1_0() { return cVar2IDTerminalRuleCall_3_1_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//order=IntegerLiteral
		public Assignment getOrderAssignment_5() { return cOrderAssignment_5; }

		//IntegerLiteral
		public RuleCall getOrderIntegerLiteralParserRuleCall_5_0() { return cOrderIntegerLiteralParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class DifferentialEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DifferentialEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLHSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLHSDE_LHSParserRuleCall_2_0 = (RuleCall)cLHSAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRHSAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRHSAdditiveExpressionParserRuleCall_4_0 = (RuleCall)cRHSAssignment_4.eContents().get(0);
		
		//DifferentialEquation:
		//	"Equation"? ":"? LHS=DE_LHS "==" RHS=AdditiveExpression;
		public ParserRule getRule() { return rule; }

		//"Equation"? ":"? LHS=DE_LHS "==" RHS=AdditiveExpression
		public Group getGroup() { return cGroup; }

		//"Equation"?
		public Keyword getEquationKeyword_0() { return cEquationKeyword_0; }

		//":"?
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//LHS=DE_LHS
		public Assignment getLHSAssignment_2() { return cLHSAssignment_2; }

		//DE_LHS
		public RuleCall getLHSDE_LHSParserRuleCall_2_0() { return cLHSDE_LHSParserRuleCall_2_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_3() { return cEqualsSignEqualsSignKeyword_3; }

		//RHS=AdditiveExpression
		public Assignment getRHSAssignment_4() { return cRHSAssignment_4; }

		//AdditiveExpression
		public RuleCall getRHSAdditiveExpressionParserRuleCall_4_0() { return cRHSAdditiveExpressionParserRuleCall_4_0; }
	}

	public class ContinuousMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinuousMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinuousMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameContinuousKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cDESAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cDESDifferentialEquationParserRuleCall_6_0_0 = (RuleCall)cDESAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////continuous method
		//ContinuousMethod:
		//	{ContinuousMethod} "void" name="Continuous" "(" ")" "{" (DES+=DifferentialEquation ";")* "}";
		public ParserRule getRule() { return rule; }

		//{ContinuousMethod} "void" name="Continuous" "(" ")" "{" (DES+=DifferentialEquation ";")* "}"
		public Group getGroup() { return cGroup; }

		//{ContinuousMethod}
		public Action getContinuousMethodAction_0() { return cContinuousMethodAction_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }

		//name="Continuous"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"Continuous"
		public Keyword getNameContinuousKeyword_2_0() { return cNameContinuousKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(DES+=DifferentialEquation ";")*
		public Group getGroup_6() { return cGroup_6; }

		//DES+=DifferentialEquation
		public Assignment getDESAssignment_6_0() { return cDESAssignment_6_0; }

		//DifferentialEquation
		public RuleCall getDESDifferentialEquationParserRuleCall_6_0_0() { return cDESDifferentialEquationParserRuleCall_6_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AbstractContinuousMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractContinuousMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractContinuousMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameContinuousKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AbstractContinuousMethod:
		//	{AbstractContinuousMethod} "void" name="Continuous" "(" ")" ";";
		public ParserRule getRule() { return rule; }

		//{AbstractContinuousMethod} "void" name="Continuous" "(" ")" ";"
		public Group getGroup() { return cGroup; }

		//{AbstractContinuousMethod}
		public Action getAbstractContinuousMethodAction_0() { return cAbstractContinuousMethodAction_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }

		//name="Continuous"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"Continuous"
		public Keyword getNameContinuousKeyword_2_0() { return cNameContinuousKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Built_In_MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Built_In_Methods");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSqrtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCosParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCotParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSecParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCscParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRoundParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFloorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCeilParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDivParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cFldParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRemParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cModParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cGcdParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLcmParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cAbsParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cSignParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRootParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cHypotParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cPowParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cExpParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLogParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cErfParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cGammaParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cMaxParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cMinParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cPauseParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cDE_LHSParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cSizeParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		
		////Built-in Methods
		//Built_In_Methods:
		//	Sqrt | Sin | Cos | Tan | Cot | Sec | Csc | Round | Floor | Ceil | Div | Fld | Rem | Mod | Gcd | Lcm | Abs | Sign |
		//	Root | Hypot | Pow | Exp | Log | Erf | Gamma | Max | Min | Pause | DE_LHS | Size;
		public ParserRule getRule() { return rule; }

		//Sqrt | Sin | Cos | Tan | Cot | Sec | Csc | Round | Floor | Ceil | Div | Fld | Rem | Mod | Gcd | Lcm | Abs | Sign | Root
		//| Hypot | Pow | Exp | Log | Erf | Gamma | Max | Min | Pause | DE_LHS | Size
		public Alternatives getAlternatives() { return cAlternatives; }

		//Sqrt
		public RuleCall getSqrtParserRuleCall_0() { return cSqrtParserRuleCall_0; }

		//Sin
		public RuleCall getSinParserRuleCall_1() { return cSinParserRuleCall_1; }

		//Cos
		public RuleCall getCosParserRuleCall_2() { return cCosParserRuleCall_2; }

		//Tan
		public RuleCall getTanParserRuleCall_3() { return cTanParserRuleCall_3; }

		//Cot
		public RuleCall getCotParserRuleCall_4() { return cCotParserRuleCall_4; }

		//Sec
		public RuleCall getSecParserRuleCall_5() { return cSecParserRuleCall_5; }

		//Csc
		public RuleCall getCscParserRuleCall_6() { return cCscParserRuleCall_6; }

		//Round
		public RuleCall getRoundParserRuleCall_7() { return cRoundParserRuleCall_7; }

		//Floor
		public RuleCall getFloorParserRuleCall_8() { return cFloorParserRuleCall_8; }

		//Ceil
		public RuleCall getCeilParserRuleCall_9() { return cCeilParserRuleCall_9; }

		//Div
		public RuleCall getDivParserRuleCall_10() { return cDivParserRuleCall_10; }

		//Fld
		public RuleCall getFldParserRuleCall_11() { return cFldParserRuleCall_11; }

		//Rem
		public RuleCall getRemParserRuleCall_12() { return cRemParserRuleCall_12; }

		//Mod
		public RuleCall getModParserRuleCall_13() { return cModParserRuleCall_13; }

		//Gcd
		public RuleCall getGcdParserRuleCall_14() { return cGcdParserRuleCall_14; }

		//Lcm
		public RuleCall getLcmParserRuleCall_15() { return cLcmParserRuleCall_15; }

		//Abs
		public RuleCall getAbsParserRuleCall_16() { return cAbsParserRuleCall_16; }

		//Sign
		public RuleCall getSignParserRuleCall_17() { return cSignParserRuleCall_17; }

		//Root
		public RuleCall getRootParserRuleCall_18() { return cRootParserRuleCall_18; }

		//Hypot
		public RuleCall getHypotParserRuleCall_19() { return cHypotParserRuleCall_19; }

		//Pow
		public RuleCall getPowParserRuleCall_20() { return cPowParserRuleCall_20; }

		//Exp
		public RuleCall getExpParserRuleCall_21() { return cExpParserRuleCall_21; }

		//Log
		public RuleCall getLogParserRuleCall_22() { return cLogParserRuleCall_22; }

		//Erf
		public RuleCall getErfParserRuleCall_23() { return cErfParserRuleCall_23; }

		//Gamma
		public RuleCall getGammaParserRuleCall_24() { return cGammaParserRuleCall_24; }

		//Max
		public RuleCall getMaxParserRuleCall_25() { return cMaxParserRuleCall_25; }

		//Min
		public RuleCall getMinParserRuleCall_26() { return cMinParserRuleCall_26; }

		//Pause
		public RuleCall getPauseParserRuleCall_27() { return cPauseParserRuleCall_27; }

		//DE_LHS
		public RuleCall getDE_LHSParserRuleCall_28() { return cDE_LHSParserRuleCall_28; }

		//Size
		public RuleCall getSizeParserRuleCall_29() { return cSizeParserRuleCall_29; }
	}

	public class SqrtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sqrt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameSqrtKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sqrt:
		//	BuiltInName="sqrt" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="sqrt" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="sqrt"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"sqrt"
		public Keyword getBuiltInNameSqrtKeyword_0_0() { return cBuiltInNameSqrtKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameSinKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sin:
		//	BuiltInName="sin" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="sin" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="sin"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"sin"
		public Keyword getBuiltInNameSinKeyword_0_0() { return cBuiltInNameSinKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameCosKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cos:
		//	BuiltInName="cos" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="cos" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="cos"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"cos"
		public Keyword getBuiltInNameCosKeyword_0_0() { return cBuiltInNameCosKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameTanKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tan:
		//	BuiltInName="tan" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="tan" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="tan"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"tan"
		public Keyword getBuiltInNameTanKeyword_0_0() { return cBuiltInNameTanKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameCotKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cot:
		//	BuiltInName="cot" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="cot" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="cot"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"cot"
		public Keyword getBuiltInNameCotKeyword_0_0() { return cBuiltInNameCotKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameSecKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sec:
		//	BuiltInName="sec" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="sec" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="sec"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"sec"
		public Keyword getBuiltInNameSecKeyword_0_0() { return cBuiltInNameSecKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CscElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Csc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameCscKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Csc:
		//	BuiltInName="csc" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="csc" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="csc"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"csc"
		public Keyword getBuiltInNameCscKeyword_0_0() { return cBuiltInNameCscKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Round");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameRoundKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Round:
		//	BuiltInName="round" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="round" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="round"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"round"
		public Keyword getBuiltInNameRoundKeyword_0_0() { return cBuiltInNameRoundKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FloorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Floor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameFloorKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Floor:
		//	BuiltInName="floor" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="floor" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="floor"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"floor"
		public Keyword getBuiltInNameFloorKeyword_0_0() { return cBuiltInNameFloorKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CeilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ceil");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameCeilKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ceil:
		//	BuiltInName="ceil" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="ceil" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="ceil"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"ceil"
		public Keyword getBuiltInNameCeilKeyword_0_0() { return cBuiltInNameCeilKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameDivKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Div:
		//	BuiltInName="div" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="div" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="div"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"div"
		public Keyword getBuiltInNameDivKeyword_0_0() { return cBuiltInNameDivKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fld");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameFldKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fld:
		//	BuiltInName="fld" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="fld" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="fld"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"fld"
		public Keyword getBuiltInNameFldKeyword_0_0() { return cBuiltInNameFldKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class RemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameRemKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rem:
		//	BuiltInName="rem" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="rem" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="rem"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"rem"
		public Keyword getBuiltInNameRemKeyword_0_0() { return cBuiltInNameRemKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameModKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mod:
		//	BuiltInName="mod" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="mod" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="mod"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"mod"
		public Keyword getBuiltInNameModKeyword_0_0() { return cBuiltInNameModKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class GcdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Gcd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameGcdKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Gcd:
		//	BuiltInName="gcd" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="gcd" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="gcd"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"gcd"
		public Keyword getBuiltInNameGcdKeyword_0_0() { return cBuiltInNameGcdKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//("," e2+=AdditiveExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=AdditiveExpression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_3_1_0() { return cE2AdditiveExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LcmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lcm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameLcmKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Lcm:
		//	BuiltInName="lcm" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="lcm" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="lcm"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"lcm"
		public Keyword getBuiltInNameLcmKeyword_0_0() { return cBuiltInNameLcmKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//("," e2+=AdditiveExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=AdditiveExpression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_3_1_0() { return cE2AdditiveExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AbsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameAbsKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Abs:
		//	BuiltInName="abs" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="abs" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="abs"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"abs"
		public Keyword getBuiltInNameAbsKeyword_0_0() { return cBuiltInNameAbsKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameSignKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sign:
		//	BuiltInName="sign" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="sign" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="sign"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"sign"
		public Keyword getBuiltInNameSignKeyword_0_0() { return cBuiltInNameSignKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameRootKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Root:
		//	BuiltInName="root" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="root" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="root"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"root"
		public Keyword getBuiltInNameRootKeyword_0_0() { return cBuiltInNameRootKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class HypotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hypot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameHypotKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Hypot:
		//	BuiltInName="hypot" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="hypot" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="hypot"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"hypot"
		public Keyword getBuiltInNameHypotKeyword_0_0() { return cBuiltInNameHypotKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class PowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNamePowKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cE2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_4_0 = (RuleCall)cE2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Pow:
		//	BuiltInName="pow" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="pow" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="pow"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"pow"
		public Keyword getBuiltInNamePowKeyword_0_0() { return cBuiltInNamePowKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//e2=AdditiveExpression
		public Assignment getE2Assignment_4() { return cE2Assignment_4; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_4_0() { return cE2AdditiveExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameExpKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Exp:
		//	BuiltInName="exp" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="exp" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="exp"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"exp"
		public Keyword getBuiltInNameExpKeyword_0_0() { return cBuiltInNameExpKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameLogKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Log:
		//	BuiltInName="log" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)? ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="log" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)? ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="log"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"log"
		public Keyword getBuiltInNameLogKeyword_0_0() { return cBuiltInNameLogKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//("," e2+=AdditiveExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=AdditiveExpression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_3_1_0() { return cE2AdditiveExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ErfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Erf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameErfKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Erf:
		//	BuiltInName="erf" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="erf" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="erf"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"erf"
		public Keyword getBuiltInNameErfKeyword_0_0() { return cBuiltInNameErfKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class GammaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Gamma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameGammaKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Gamma:
		//	BuiltInName="gamma" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="gamma" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="gamma"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"gamma"
		public Keyword getBuiltInNameGammaKeyword_0_0() { return cBuiltInNameGammaKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Max");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameMaxKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Max:
		//	BuiltInName="max" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="max" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="max"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"max"
		public Keyword getBuiltInNameMaxKeyword_0_0() { return cBuiltInNameMaxKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//("," e2+=AdditiveExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=AdditiveExpression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_3_1_0() { return cE2AdditiveExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Min");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameMinKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cE1AdditiveExpressionParserRuleCall_2_0 = (RuleCall)cE1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cE2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cE2AdditiveExpressionParserRuleCall_3_1_0 = (RuleCall)cE2Assignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Min:
		//	BuiltInName="min" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="min" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="min"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"min"
		public Keyword getBuiltInNameMinKeyword_0_0() { return cBuiltInNameMinKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//e1=AdditiveExpression
		public Assignment getE1Assignment_2() { return cE1Assignment_2; }

		//AdditiveExpression
		public RuleCall getE1AdditiveExpressionParserRuleCall_2_0() { return cE1AdditiveExpressionParserRuleCall_2_0; }

		//("," e2+=AdditiveExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//e2+=AdditiveExpression
		public Assignment getE2Assignment_3_1() { return cE2Assignment_3_1; }

		//AdditiveExpression
		public RuleCall getE2AdditiveExpressionParserRuleCall_3_1_0() { return cE2AdditiveExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNamePauseKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Pause:
		//	BuiltInName="pause" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="pause" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="pause"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"pause"
		public Keyword getBuiltInNamePauseKeyword_0_0() { return cBuiltInNamePauseKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameSizeKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Size:
		//	BuiltInName="size" "(" ex=AdditiveExpression ")";
		public ParserRule getRule() { return rule; }

		//BuiltInName="size" "(" ex=AdditiveExpression ")"
		public Group getGroup() { return cGroup; }

		//BuiltInName="size"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"size"
		public Keyword getBuiltInNameSizeKeyword_0_0() { return cBuiltInNameSizeKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=AdditiveExpression
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//AdditiveExpression
		public RuleCall getExAdditiveExpressionParserRuleCall_2_0() { return cExAdditiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class InvariantBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvariantBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInvariantKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConditionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConditionsConditionalExpressionParserRuleCall_2_0_0 = (RuleCall)cConditionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Condition
		//InvariantBlock:
		//	name="Invariant" "{" (conditions+=ConditionalExpression ";")* "}" ";";
		public ParserRule getRule() { return rule; }

		//name="Invariant" "{" (conditions+=ConditionalExpression ";")* "}" ";"
		public Group getGroup() { return cGroup; }

		//name="Invariant"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Invariant"
		public Keyword getNameInvariantKeyword_0_0() { return cNameInvariantKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(conditions+=ConditionalExpression ";")*
		public Group getGroup_2() { return cGroup_2; }

		//conditions+=ConditionalExpression
		public Assignment getConditionsAssignment_2_0() { return cConditionsAssignment_2_0; }

		//ConditionalExpression
		public RuleCall getConditionsConditionalExpressionParserRuleCall_2_0_0() { return cConditionsConditionalExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockstatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockstatementBlockStatementParserRuleCall_2_0 = (RuleCall)cBlockstatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Statement
		//Block:
		//	{Block} "{" blockstatement+=BlockStatement* "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" blockstatement+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//blockstatement+=BlockStatement*
		public Assignment getBlockstatementAssignment_2() { return cBlockstatementAssignment_2; }

		//BlockStatement
		public RuleCall getBlockstatementBlockStatementParserRuleCall_2_0() { return cBlockstatementBlockStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVarDecStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockStatement:
		//	Statement | LocalVarDecStatement;
		public ParserRule getRule() { return rule; }

		//Statement | LocalVarDecStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//LocalVarDecStatement
		public RuleCall getLocalVarDecStatementParserRuleCall_1() { return cLocalVarDecStatementParserRuleCall_1; }
	}

	public class LocalVarDecStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarDecStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLocalVarDecParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LocalVarDecStatement:
		//	LocalVarDec ";";
		public ParserRule getRule() { return rule; }

		//LocalVarDec ";"
		public Group getGroup() { return cGroup; }

		//LocalVarDec
		public RuleCall getLocalVarDecParserRuleCall_0() { return cLocalVarDecParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class LocalVarDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablemodiferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablemodiferVARIABLE_MODIFIERParserRuleCall_0_0 = (RuleCall)cVariablemodiferAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cDimAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimDimParserRuleCall_2_0 = (RuleCall)cDimAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameLocalVarNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariniAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariniVariableInitializerParserRuleCall_4_1_0 = (RuleCall)cVariniAssignment_4_1.eContents().get(0);
		
		//LocalVarDec:
		//	variablemodifer=VARIABLE_MODIFIER? type=UseType dim+=Dim* name=LocalVarName ("=" varini=VariableInitializer)?;
		public ParserRule getRule() { return rule; }

		//variablemodifer=VARIABLE_MODIFIER? type=UseType dim+=Dim* name=LocalVarName ("=" varini=VariableInitializer)?
		public Group getGroup() { return cGroup; }

		//variablemodifer=VARIABLE_MODIFIER?
		public Assignment getVariablemodiferAssignment_0() { return cVariablemodiferAssignment_0; }

		//VARIABLE_MODIFIER
		public RuleCall getVariablemodiferVARIABLE_MODIFIERParserRuleCall_0_0() { return cVariablemodiferVARIABLE_MODIFIERParserRuleCall_0_0; }

		//type=UseType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_0() { return cTypeUseTypeParserRuleCall_1_0; }

		//dim+=Dim*
		public Assignment getDimAssignment_2() { return cDimAssignment_2; }

		//Dim
		public RuleCall getDimDimParserRuleCall_2_0() { return cDimDimParserRuleCall_2_0; }

		//name=LocalVarName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//LocalVarName
		public RuleCall getNameLocalVarNameParserRuleCall_3_0() { return cNameLocalVarNameParserRuleCall_3_0; }

		//("=" varini=VariableInitializer)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//varini=VariableInitializer
		public Assignment getVariniAssignment_4_1() { return cVariniAssignment_4_1; }

		//VariableInitializer
		public RuleCall getVariniVariableInitializerParserRuleCall_4_1_0() { return cVariniVariableInitializerParserRuleCall_4_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_1_0_0 = (RuleCall)cBlockAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cIfKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParexpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParexpressionParExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParexpressionAssignment_1_1_1.eContents().get(0);
		private final Assignment cIfstatementAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIfstatementStatementParserRuleCall_1_1_2_0 = (RuleCall)cIfstatementAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cElseKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cElsestatementAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cElsestatementStatementParserRuleCall_1_1_3_1_0 = (RuleCall)cElsestatementAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cForKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cForcontrolAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cForcontrolForControlParserRuleCall_1_2_2_0 = (RuleCall)cForcontrolAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cForstatementAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cForstatementStatementParserRuleCall_1_2_4_0 = (RuleCall)cForstatementAssignment_1_2_4.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cBreakKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_3_1_0 = (RuleCall)cIdentifierAssignment_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cContinueKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_4_1_0 = (RuleCall)cIdentifierAssignment_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cWhileKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cParexpressionAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cParexpressionParExpressionParserRuleCall_1_5_1_0 = (RuleCall)cParexpressionAssignment_1_5_1.eContents().get(0);
		private final Assignment cWhilestatementAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cWhilestatementStatementParserRuleCall_1_5_2_0 = (RuleCall)cWhilestatementAssignment_1_5_2.eContents().get(0);
		private final Assignment cReturnAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cReturnReturnStatementParserRuleCall_1_6_0 = (RuleCall)cReturnAssignment_1_6.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Assignment cStatementexpressionAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final RuleCall cStatementexpressionExpressionParserRuleCall_1_7_0_0 = (RuleCall)cStatementexpressionAssignment_1_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		
		//Statement:
		//	{Statement} (block=Block | "if" parexpression=ParExpression ifstatement=Statement ("else" elsestatement=Statement)? |
		//	"for" "(" forcontrol=ForControl ")" forstatement=Statement | "break" identifier=ID? ";" | "continue" identifier=ID?
		//	";" | "while" parexpression=ParExpression whilestatement=Statement | return=ReturnStatement |
		//	statementexpression=Expression ";" | ";");
		public ParserRule getRule() { return rule; }

		//{Statement} (block=Block | "if" parexpression=ParExpression ifstatement=Statement ("else" elsestatement=Statement)? |
		//"for" "(" forcontrol=ForControl ")" forstatement=Statement | "break" identifier=ID? ";" | "continue" identifier=ID?
		//";" | "while" parexpression=ParExpression whilestatement=Statement | return=ReturnStatement |
		//statementexpression=Expression ";" | ";")
		public Group getGroup() { return cGroup; }

		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }

		//block=Block | "if" parexpression=ParExpression ifstatement=Statement ("else" elsestatement=Statement)? | "for" "("
		//forcontrol=ForControl ")" forstatement=Statement | "break" identifier=ID? ";" | "continue" identifier=ID? ";" |
		//"while" parexpression=ParExpression whilestatement=Statement | return=ReturnStatement | statementexpression=Expression
		//";" | ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//block=Block
		public Assignment getBlockAssignment_1_0() { return cBlockAssignment_1_0; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0_0() { return cBlockBlockParserRuleCall_1_0_0; }

		//"if" parexpression=ParExpression ifstatement=Statement ("else" elsestatement=Statement)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"if"
		public Keyword getIfKeyword_1_1_0() { return cIfKeyword_1_1_0; }

		//parexpression=ParExpression
		public Assignment getParexpressionAssignment_1_1_1() { return cParexpressionAssignment_1_1_1; }

		//ParExpression
		public RuleCall getParexpressionParExpressionParserRuleCall_1_1_1_0() { return cParexpressionParExpressionParserRuleCall_1_1_1_0; }

		//ifstatement=Statement
		public Assignment getIfstatementAssignment_1_1_2() { return cIfstatementAssignment_1_1_2; }

		//Statement
		public RuleCall getIfstatementStatementParserRuleCall_1_1_2_0() { return cIfstatementStatementParserRuleCall_1_1_2_0; }

		//(=> "else" elsestatement=Statement)?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//=> "else"
		public Keyword getElseKeyword_1_1_3_0() { return cElseKeyword_1_1_3_0; }

		//elsestatement=Statement
		public Assignment getElsestatementAssignment_1_1_3_1() { return cElsestatementAssignment_1_1_3_1; }

		//Statement
		public RuleCall getElsestatementStatementParserRuleCall_1_1_3_1_0() { return cElsestatementStatementParserRuleCall_1_1_3_1_0; }

		//"for" "(" forcontrol=ForControl ")" forstatement=Statement
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"for"
		public Keyword getForKeyword_1_2_0() { return cForKeyword_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_1() { return cLeftParenthesisKeyword_1_2_1; }

		//forcontrol=ForControl
		public Assignment getForcontrolAssignment_1_2_2() { return cForcontrolAssignment_1_2_2; }

		//ForControl
		public RuleCall getForcontrolForControlParserRuleCall_1_2_2_0() { return cForcontrolForControlParserRuleCall_1_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_3() { return cRightParenthesisKeyword_1_2_3; }

		//forstatement=Statement
		public Assignment getForstatementAssignment_1_2_4() { return cForstatementAssignment_1_2_4; }

		//Statement
		public RuleCall getForstatementStatementParserRuleCall_1_2_4_0() { return cForstatementStatementParserRuleCall_1_2_4_0; }

		//"break" identifier=ID? ";"
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"break"
		public Keyword getBreakKeyword_1_3_0() { return cBreakKeyword_1_3_0; }

		//identifier=ID?
		public Assignment getIdentifierAssignment_1_3_1() { return cIdentifierAssignment_1_3_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_3_1_0() { return cIdentifierIDTerminalRuleCall_1_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3_2() { return cSemicolonKeyword_1_3_2; }

		//"continue" identifier=ID? ";"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"continue"
		public Keyword getContinueKeyword_1_4_0() { return cContinueKeyword_1_4_0; }

		//identifier=ID?
		public Assignment getIdentifierAssignment_1_4_1() { return cIdentifierAssignment_1_4_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_4_1_0() { return cIdentifierIDTerminalRuleCall_1_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4_2() { return cSemicolonKeyword_1_4_2; }

		//"while" parexpression=ParExpression whilestatement=Statement
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"while"
		public Keyword getWhileKeyword_1_5_0() { return cWhileKeyword_1_5_0; }

		//parexpression=ParExpression
		public Assignment getParexpressionAssignment_1_5_1() { return cParexpressionAssignment_1_5_1; }

		//ParExpression
		public RuleCall getParexpressionParExpressionParserRuleCall_1_5_1_0() { return cParexpressionParExpressionParserRuleCall_1_5_1_0; }

		//whilestatement=Statement
		public Assignment getWhilestatementAssignment_1_5_2() { return cWhilestatementAssignment_1_5_2; }

		//Statement
		public RuleCall getWhilestatementStatementParserRuleCall_1_5_2_0() { return cWhilestatementStatementParserRuleCall_1_5_2_0; }

		//return=ReturnStatement
		public Assignment getReturnAssignment_1_6() { return cReturnAssignment_1_6; }

		//ReturnStatement
		public RuleCall getReturnReturnStatementParserRuleCall_1_6_0() { return cReturnReturnStatementParserRuleCall_1_6_0; }

		//statementexpression=Expression ";"
		public Group getGroup_1_7() { return cGroup_1_7; }

		//statementexpression=Expression
		public Assignment getStatementexpressionAssignment_1_7_0() { return cStatementexpressionAssignment_1_7_0; }

		//Expression
		public RuleCall getStatementexpressionExpressionParserRuleCall_1_7_0_0() { return cStatementexpressionExpressionParserRuleCall_1_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_7_1() { return cSemicolonKeyword_1_7_1; }

		//";"
		public Keyword getSemicolonKeyword_1_8() { return cSemicolonKeyword_1_8; }
	}

	public class ForControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForControlAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEnhancedforcontrolAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEnhancedforcontrolEnhancedForControlParserRuleCall_1_0_0 = (RuleCall)cEnhancedforcontrolAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cForinitAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cForinitForInitParserRuleCall_1_1_0_0 = (RuleCall)cForinitAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_2_0 = (RuleCall)cExpressionAssignment_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cForupdateAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cForupdateForUpdateParserRuleCall_1_1_4_0 = (RuleCall)cForupdateAssignment_1_1_4.eContents().get(0);
		
		//ForControl:
		//	{ForControl} (enhancedforcontrol=EnhancedForControl | forinit=ForInit? ";" expression=Expression? ";"
		//	forupdate=ForUpdate?);
		public ParserRule getRule() { return rule; }

		//{ForControl} (enhancedforcontrol=EnhancedForControl | forinit=ForInit? ";" expression=Expression? ";"
		//forupdate=ForUpdate?)
		public Group getGroup() { return cGroup; }

		//{ForControl}
		public Action getForControlAction_0() { return cForControlAction_0; }

		//enhancedforcontrol=EnhancedForControl | forinit=ForInit? ";" expression=Expression? ";" forupdate=ForUpdate?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//enhancedforcontrol=EnhancedForControl
		public Assignment getEnhancedforcontrolAssignment_1_0() { return cEnhancedforcontrolAssignment_1_0; }

		//EnhancedForControl
		public RuleCall getEnhancedforcontrolEnhancedForControlParserRuleCall_1_0_0() { return cEnhancedforcontrolEnhancedForControlParserRuleCall_1_0_0; }

		//forinit=ForInit? ";" expression=Expression? ";" forupdate=ForUpdate?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//forinit=ForInit?
		public Assignment getForinitAssignment_1_1_0() { return cForinitAssignment_1_1_0; }

		//ForInit
		public RuleCall getForinitForInitParserRuleCall_1_1_0_0() { return cForinitForInitParserRuleCall_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_1_1_2() { return cExpressionAssignment_1_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_2_0() { return cExpressionExpressionParserRuleCall_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }

		//forupdate=ForUpdate?
		public Assignment getForupdateAssignment_1_1_4() { return cForupdateAssignment_1_1_4; }

		//ForUpdate
		public RuleCall getForupdateForUpdateParserRuleCall_1_1_4_0() { return cForupdateForUpdateParserRuleCall_1_1_4_0; }
	}

	public class EnhancedForControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnhancedForControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUseTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//EnhancedForControl:
		//	type=UseType id=ID ":" expression=Expression;
		public ParserRule getRule() { return rule; }

		//type=UseType id=ID ":" expression=Expression
		public Group getGroup() { return cGroup; }

		//type=UseType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_0_0() { return cTypeUseTypeParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ForInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForInit");
		private final RuleCall cExpressionListParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ForInit:
		//	ExpressionList;
		public ParserRule getRule() { return rule; }

		//ExpressionList
		public RuleCall getExpressionListParserRuleCall() { return cExpressionListParserRuleCall; }
	}

	public class ForUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForUpdate");
		private final RuleCall cExpressionListParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ForUpdate:
		//	ExpressionList;
		public ParserRule getRule() { return rule; }

		//ExpressionList
		public RuleCall getExpressionListParserRuleCall() { return cExpressionListParserRuleCall; }
	}

	public class CompositionMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameCompositionKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersControlSwitchCompositionParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Composition
		//CompositionMethod:
		//	"void" name="Composition" "(" ")" "{" members+=ControlSwitchComposition* "}";
		public ParserRule getRule() { return rule; }

		//"void" name="Composition" "(" ")" "{" members+=ControlSwitchComposition* "}"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name="Composition"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Composition"
		public Keyword getNameCompositionKeyword_1_0() { return cNameCompositionKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//members+=ControlSwitchComposition*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }

		//ControlSwitchComposition
		public RuleCall getMembersControlSwitchCompositionParserRuleCall_5_0() { return cMembersControlSwitchCompositionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ControlSwitchCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlSwitchComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlSwitchCompositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cSyncAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cSyncLeftParenthesisKeyword_1_1_0_0_0 = (Keyword)cSyncAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cRecevAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cRecevLeftParenthesisQuestionMarkRightParenthesisKeyword_1_1_1_0 = (Keyword)cRecevAssignment_1_1_1.eContents().get(0);
		private final Assignment cSendAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cSendLeftParenthesisExclamationMarkRightParenthesisKeyword_1_1_2_0 = (Keyword)cSendAssignment_1_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cSourceAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cSourceExpressionParserRuleCall_1_3_0_0 = (RuleCall)cSourceAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cSourcelistAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cSourcelistExpressionListParserRuleCall_1_3_1_1_0 = (RuleCall)cSourcelistAssignment_1_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_1_2 = (Keyword)cGroup_1_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cActionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cActionExpressionParserRuleCall_1_5_0 = (RuleCall)cActionAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Alternatives cAlternatives_1_7 = (Alternatives)cGroup_1.eContents().get(7);
		private final Assignment cDestinationAssignment_1_7_0 = (Assignment)cAlternatives_1_7.eContents().get(0);
		private final RuleCall cDestinationExpressionParserRuleCall_1_7_0_0 = (RuleCall)cDestinationAssignment_1_7_0.eContents().get(0);
		private final Group cGroup_1_7_1 = (Group)cAlternatives_1_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_7_1_0 = (Keyword)cGroup_1_7_1.eContents().get(0);
		private final Assignment cDestinationlistAssignment_1_7_1_1 = (Assignment)cGroup_1_7_1.eContents().get(1);
		private final RuleCall cDestinationlistExpressionListParserRuleCall_1_7_1_1_0 = (RuleCall)cDestinationlistAssignment_1_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7_1_2 = (Keyword)cGroup_1_7_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Assignment cConditionAssignment_1_10 = (Assignment)cGroup_1.eContents().get(10);
		private final RuleCall cConditionConditionBlockParserRuleCall_1_10_0 = (RuleCall)cConditionAssignment_1_10.eContents().get(0);
		private final Assignment cDiscreteAssignment_1_11 = (Assignment)cGroup_1.eContents().get(11);
		private final RuleCall cDiscreteDiscreteBlockParserRuleCall_1_11_0 = (RuleCall)cDiscreteAssignment_1_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_12 = (Keyword)cGroup_1.eContents().get(12);
		
		//ControlSwitchComposition:
		//	{ControlSwitchComposition} (id=ID (sync="(" ")" | recev="(?)" | send="(!)")? "(" (source=Expression | "{"
		//	sourcelist=ExpressionList "}") "," action=Expression? "," (destination=Expression | "{"
		//	destinationlist=ExpressionList "}") ")" "{" condition=ConditionBlock? discrete=DiscreteBlock? "}");
		public ParserRule getRule() { return rule; }

		//{ControlSwitchComposition} (id=ID (sync="(" ")" | recev="(?)" | send="(!)")? "(" (source=Expression | "{"
		//sourcelist=ExpressionList "}") "," action=Expression? "," (destination=Expression | "{" destinationlist=ExpressionList
		//"}") ")" "{" condition=ConditionBlock? discrete=DiscreteBlock? "}")
		public Group getGroup() { return cGroup; }

		//{ControlSwitchComposition}
		public Action getControlSwitchCompositionAction_0() { return cControlSwitchCompositionAction_0; }

		//id=ID (sync="(" ")" | recev="(?)" | send="(!)")? "(" (source=Expression | "{" sourcelist=ExpressionList "}") ","
		//action=Expression? "," (destination=Expression | "{" destinationlist=ExpressionList "}") ")" "{"
		//condition=ConditionBlock? discrete=DiscreteBlock? "}"
		public Group getGroup_1() { return cGroup_1; }

		//id=ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }

		//(sync="(" ")" | recev="(?)" | send="(!)")?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//sync="(" ")"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//sync="("
		public Assignment getSyncAssignment_1_1_0_0() { return cSyncAssignment_1_1_0_0; }

		//"("
		public Keyword getSyncLeftParenthesisKeyword_1_1_0_0_0() { return cSyncLeftParenthesisKeyword_1_1_0_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_0_1() { return cRightParenthesisKeyword_1_1_0_1; }

		//recev="(?)"
		public Assignment getRecevAssignment_1_1_1() { return cRecevAssignment_1_1_1; }

		//"(?)"
		public Keyword getRecevLeftParenthesisQuestionMarkRightParenthesisKeyword_1_1_1_0() { return cRecevLeftParenthesisQuestionMarkRightParenthesisKeyword_1_1_1_0; }

		//send="(!)"
		public Assignment getSendAssignment_1_1_2() { return cSendAssignment_1_1_2; }

		//"(!)"
		public Keyword getSendLeftParenthesisExclamationMarkRightParenthesisKeyword_1_1_2_0() { return cSendLeftParenthesisExclamationMarkRightParenthesisKeyword_1_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//source=Expression | "{" sourcelist=ExpressionList "}"
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }

		//source=Expression
		public Assignment getSourceAssignment_1_3_0() { return cSourceAssignment_1_3_0; }

		//Expression
		public RuleCall getSourceExpressionParserRuleCall_1_3_0_0() { return cSourceExpressionParserRuleCall_1_3_0_0; }

		//"{" sourcelist=ExpressionList "}"
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_1_0() { return cLeftCurlyBracketKeyword_1_3_1_0; }

		//sourcelist=ExpressionList
		public Assignment getSourcelistAssignment_1_3_1_1() { return cSourcelistAssignment_1_3_1_1; }

		//ExpressionList
		public RuleCall getSourcelistExpressionListParserRuleCall_1_3_1_1_0() { return cSourcelistExpressionListParserRuleCall_1_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_1_2() { return cRightCurlyBracketKeyword_1_3_1_2; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//action=Expression?
		public Assignment getActionAssignment_1_5() { return cActionAssignment_1_5; }

		//Expression
		public RuleCall getActionExpressionParserRuleCall_1_5_0() { return cActionExpressionParserRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//destination=Expression | "{" destinationlist=ExpressionList "}"
		public Alternatives getAlternatives_1_7() { return cAlternatives_1_7; }

		//destination=Expression
		public Assignment getDestinationAssignment_1_7_0() { return cDestinationAssignment_1_7_0; }

		//Expression
		public RuleCall getDestinationExpressionParserRuleCall_1_7_0_0() { return cDestinationExpressionParserRuleCall_1_7_0_0; }

		//"{" destinationlist=ExpressionList "}"
		public Group getGroup_1_7_1() { return cGroup_1_7_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_7_1_0() { return cLeftCurlyBracketKeyword_1_7_1_0; }

		//destinationlist=ExpressionList
		public Assignment getDestinationlistAssignment_1_7_1_1() { return cDestinationlistAssignment_1_7_1_1; }

		//ExpressionList
		public RuleCall getDestinationlistExpressionListParserRuleCall_1_7_1_1_0() { return cDestinationlistExpressionListParserRuleCall_1_7_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_7_1_2() { return cRightCurlyBracketKeyword_1_7_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_8() { return cRightParenthesisKeyword_1_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_9() { return cLeftCurlyBracketKeyword_1_9; }

		//condition=ConditionBlock?
		public Assignment getConditionAssignment_1_10() { return cConditionAssignment_1_10; }

		//ConditionBlock
		public RuleCall getConditionConditionBlockParserRuleCall_1_10_0() { return cConditionConditionBlockParserRuleCall_1_10_0; }

		//discrete=DiscreteBlock?
		public Assignment getDiscreteAssignment_1_11() { return cDiscreteAssignment_1_11; }

		//DiscreteBlock
		public RuleCall getDiscreteDiscreteBlockParserRuleCall_1_11_0() { return cDiscreteDiscreteBlockParserRuleCall_1_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_12() { return cRightCurlyBracketKeyword_1_12; }
	}

	public class DiscreteBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiscreteBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameDiscreteKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DiscreteBlock:
		//	BuiltInName="Discrete" "{" statements+=BlockStatement* "}" ";"?;
		public ParserRule getRule() { return rule; }

		//BuiltInName="Discrete" "{" statements+=BlockStatement* "}" ";"?
		public Group getGroup() { return cGroup; }

		//BuiltInName="Discrete"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"Discrete"
		public Keyword getBuiltInNameDiscreteKeyword_0_0() { return cBuiltInNameDiscreteKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConditionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuiltInNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBuiltInNameConditionKeyword_0_0 = (Keyword)cBuiltInNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConditionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConditionsConditionalExpressionParserRuleCall_2_0_0 = (RuleCall)cConditionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConditionBlock:
		//	BuiltInName="Condition" "{" (conditions+=ConditionalExpression ";")* "}" ";"?;
		public ParserRule getRule() { return rule; }

		//BuiltInName="Condition" "{" (conditions+=ConditionalExpression ";")* "}" ";"?
		public Group getGroup() { return cGroup; }

		//BuiltInName="Condition"
		public Assignment getBuiltInNameAssignment_0() { return cBuiltInNameAssignment_0; }

		//"Condition"
		public Keyword getBuiltInNameConditionKeyword_0_0() { return cBuiltInNameConditionKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(conditions+=ConditionalExpression ";")*
		public Group getGroup_2() { return cGroup_2; }

		//conditions+=ConditionalExpression
		public Assignment getConditionsAssignment_2_0() { return cConditionsAssignment_2_0; }

		//ConditionalExpression
		public RuleCall getConditionsConditionalExpressionParserRuleCall_2_0_0() { return cConditionsConditionalExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DiscreteMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiscreteMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDiscreteKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsBlockStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////Discrete Method
		//DiscreteMethod:
		//	"void" name="Discrete" "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" statements+=BlockStatement* "}";
		public ParserRule getRule() { return rule; }

		//"void" name="Discrete" "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" statements+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name="Discrete"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Discrete"
		public Keyword getNameDiscreteKeyword_1_0() { return cNameDiscreteKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_6_0() { return cStatementsBlockStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AbstractDiscreteMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDiscreteMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDiscreteKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Discrete Method
		//AbstractDiscreteMethod:
		//	"void" name="Discrete" "(" (params+=Parameter ("," params+=Parameter)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//"void" name="Discrete" "(" (params+=Parameter ("," params+=Parameter)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name="Discrete"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Discrete"
		public Keyword getNameDiscreteKeyword_1_0() { return cNameDiscreteKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class InitMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameInitKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsBlockStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InitMethod:
		//	"void" name="Init" "(" ")" "{" statements+=BlockStatement* "}";
		public ParserRule getRule() { return rule; }

		//"void" name="Init" "(" ")" "{" statements+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name="Init"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Init"
		public Keyword getNameInitKeyword_1_0() { return cNameInitKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_5_0() { return cStatementsBlockStatementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AbstractInitMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractInitMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameInitKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AbstractInitMethod:
		//	"void" name="Init" "(" ")" ";";
		public ParserRule getRule() { return rule; }

		//"void" name="Init" "(" ")" ";"
		public Group getGroup() { return cGroup; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//name="Init"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Init"
		public Keyword getNameInitKeyword_1_0() { return cNameInitKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NewByClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewByClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NewByClass:
		//	"new" type=[Class] "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" type=[Class] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=[Class]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Class]
		public CrossReference getTypeClassCrossReference_1_0() { return cTypeClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeClassIDTerminalRuleCall_1_0_1() { return cTypeClassIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Expression
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_0() { return cArgsExpressionParserRuleCall_3_0_0; }

		//("," args+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_1_0() { return cArgsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NewArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUseTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cDimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimeDimExprParserRuleCall_2_0 = (RuleCall)cDimeAssignment_2.eContents().get(0);
		
		////array
		//NewArray:
		//	"new" type=UseType dime+=DimExpr+;
		public ParserRule getRule() { return rule; }

		//"new" type=UseType dime+=DimExpr+
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=UseType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//UseType
		public RuleCall getTypeUseTypeParserRuleCall_1_0() { return cTypeUseTypeParserRuleCall_1_0; }

		//dime+=DimExpr+
		public Assignment getDimeAssignment_2() { return cDimeAssignment_2; }

		//DimExpr
		public RuleCall getDimeDimExprParserRuleCall_2_0() { return cDimeDimExprParserRuleCall_2_0; }
	}

	public class DimExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DimExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimexAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DimExpr:
		//	{dimex} "[" index=Expression "]";
		public ParserRule getRule() { return rule; }

		//{dimex} "[" index=Expression "]"
		public Group getGroup() { return cGroup; }

		//{dimex}
		public Action getDimexAction_0() { return cDimexAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//index=Expression
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//Expression
		public RuleCall getIndexExpressionParserRuleCall_2_0() { return cIndexExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class DimElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dim");
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//Dim:
		//	"[]";
		public ParserRule getRule() { return rule; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword() { return cLeftSquareBracketRightSquareBracketKeyword; }
	}
	
	
	private PackageDeclarationElements pPackageDeclaration;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private ModifierElements pModifier;
	private VARIABLE_MODIFIERElements pVARIABLE_MODIFIER;
	private BuiltInModifierElements pBuiltInModifier;
	private RefTypeElements pRefType;
	private NonRefTypeElements pNonRefType;
	private BasicTypeElements pBasicType;
	private MathTypeElements pMathType;
	private InterfaceElements pInterface;
	private ClassElements pClass;
	private MemberElements pMember;
	private FieldNameElements pFieldName;
	private FieldElements pField;
	private ConstructorMethodElements pConstructorMethod;
	private MethodElements pMethod;
	private AbstractMethodElements pAbstractMethod;
	private UseTypeElements pUseType;
	private ParameterElements pParameter;
	private TypedElementElements pTypedElement;
	private MethodBodyElements pMethodBody;
	private AbstractMethodBodyElements pAbstractMethodBody;
	private LocalVarNameElements pLocalVarName;
	private VariableInitializerElements pVariableInitializer;
	private ReturnStatementElements pReturnStatement;
	private TerminalRule tAMOUNT_GEONE;
	private TerminalRule tAMOUNT_ONE_OR_ZERO;
	private AMOUNTElements pAMOUNT;
	private AbstractInterfaceElementElements pAbstractInterfaceElement;
	private RequiresElements pRequires;
	private TerminalRule tASYACTIONS;
	private AbstractDynamicSwitchElements pAbstractDynamicSwitch;
	private ABSTRACT_CONDTIONElements pABSTRACT_CONDTION;
	private AbstractCompositionMethodElements pAbstractCompositionMethod;
	private NativeStartMethodElements pNativeStartMethod;
	private RequiresAbstractCompositionElements pRequiresAbstractComposition;
	private ABSTRACT_DISCRETEElements pABSTRACT_DISCRETE;
	private TerminalRule tCLOCK;
	private ClockConstraintElements pClockConstraint;
	private AbstractInvariantElements pAbstractInvariant;
	private ExpressionElements pExpression;
	private AssignmentOperatorElements pAssignmentOperator;
	private ConditionalExpressionElements pConditionalExpression;
	private ConditionalOrExpressionElements pConditionalOrExpression;
	private ConditionalAndExpressionElements pConditionalAndExpression;
	private ExclusiveOrExpressionElements pExclusiveOrExpression;
	private EqualityExpressionElements pEqualityExpression;
	private InstanceOfExpressionElements pInstanceOfExpression;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOpElements pRelationalOp;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private PrimaryElements pPrimary;
	private IdentifierSuffixElements pIdentifierSuffix;
	private ArgumentsElements pArguments;
	private ExpressionListElements pExpressionList;
	private CastExpressionElements pCastExpression;
	private ParExpressionElements pParExpression;
	private LiteralElements pLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private TerminalRule tHEX_LITERAL;
	private TerminalRule tDECIMAL_LITERAL;
	private TerminalRule tOCTAL_LITERAL;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tINTEGER_TYPE_SUFFIX;
	private TerminalRule tFLOATING_POINT_LITERAL;
	private TerminalRule tEXPONENT;
	private TerminalRule tFLOAT_TYPE_SUFFIX;
	private TerminalRule tCHARACTER_LITERAL;
	private TerminalRule tSTRING_LITERAL;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tOCTAL_ESCAPE;
	private TerminalRule tUNICODE_ESCAPE;
	private BooleanLiteralElements pBooleanLiteral;
	private DE_LHSElements pDE_LHS;
	private DifferentialEquationElements pDifferentialEquation;
	private ContinuousMethodElements pContinuousMethod;
	private AbstractContinuousMethodElements pAbstractContinuousMethod;
	private Built_In_MethodsElements pBuilt_In_Methods;
	private SqrtElements pSqrt;
	private SinElements pSin;
	private CosElements pCos;
	private TanElements pTan;
	private CotElements pCot;
	private SecElements pSec;
	private CscElements pCsc;
	private RoundElements pRound;
	private FloorElements pFloor;
	private CeilElements pCeil;
	private DivElements pDiv;
	private FldElements pFld;
	private RemElements pRem;
	private ModElements pMod;
	private GcdElements pGcd;
	private LcmElements pLcm;
	private AbsElements pAbs;
	private SignElements pSign;
	private RootElements pRoot;
	private HypotElements pHypot;
	private PowElements pPow;
	private ExpElements pExp;
	private LogElements pLog;
	private ErfElements pErf;
	private GammaElements pGamma;
	private MaxElements pMax;
	private MinElements pMin;
	private PauseElements pPause;
	private SizeElements pSize;
	private InvariantBlockElements pInvariantBlock;
	private BlockElements pBlock;
	private BlockStatementElements pBlockStatement;
	private LocalVarDecStatementElements pLocalVarDecStatement;
	private LocalVarDecElements pLocalVarDec;
	private StatementElements pStatement;
	private ForControlElements pForControl;
	private EnhancedForControlElements pEnhancedForControl;
	private ForInitElements pForInit;
	private ForUpdateElements pForUpdate;
	private CompositionMethodElements pCompositionMethod;
	private ControlSwitchCompositionElements pControlSwitchComposition;
	private DiscreteBlockElements pDiscreteBlock;
	private ConditionBlockElements pConditionBlock;
	private DiscreteMethodElements pDiscreteMethod;
	private AbstractDiscreteMethodElements pAbstractDiscreteMethod;
	private InitMethodElements pInitMethod;
	private AbstractInitMethodElements pAbstractInitMethod;
	private NewByClassElements pNewByClass;
	private NewArrayElements pNewArray;
	private DimExprElements pDimExpr;
	private DimElements pDim;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ApricotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.fofo.Apricot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PackageDeclaration:
	//	"package" name=QualifiedName ";" imports+=Import* elements+=RefType*;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	/// *
	//AbstractElement:
	//   RefType 
	//;
	// * / Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	////Type: NonRefType | RefType;
	//Modifier:
	//	"public" | "private";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//VARIABLE_MODIFIER:
	//	"Constant";
	public VARIABLE_MODIFIERElements getVARIABLE_MODIFIERAccess() {
		return (pVARIABLE_MODIFIER != null) ? pVARIABLE_MODIFIER : (pVARIABLE_MODIFIER = new VARIABLE_MODIFIERElements());
	}
	
	public ParserRule getVARIABLE_MODIFIERRule() {
		return getVARIABLE_MODIFIERAccess().getRule();
	}

	//BuiltInModifier:
	//	"Native";
	public BuiltInModifierElements getBuiltInModifierAccess() {
		return (pBuiltInModifier != null) ? pBuiltInModifier : (pBuiltInModifier = new BuiltInModifierElements());
	}
	
	public ParserRule getBuiltInModifierRule() {
		return getBuiltInModifierAccess().getRule();
	}

	//RefType:
	//	Class | Interface;
	public RefTypeElements getRefTypeAccess() {
		return (pRefType != null) ? pRefType : (pRefType = new RefTypeElements());
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}

	//NonRefType:
	//	BasicType | MathType;
	public NonRefTypeElements getNonRefTypeAccess() {
		return (pNonRefType != null) ? pNonRefType : (pNonRefType = new NonRefTypeElements());
	}
	
	public ParserRule getNonRefTypeRule() {
		return getNonRefTypeAccess().getRule();
	}

	//BasicType:
	//	BT=("void" | "int" | "real" | "boolean" | "String" | "Interval");
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//MathType:
	//	MT=("Int" | "Real");
	public MathTypeElements getMathTypeAccess() {
		return (pMathType != null) ? pMathType : (pMathType = new MathTypeElements());
	}
	
	public ParserRule getMathTypeRule() {
		return getMathTypeAccess().getRule();
	}

	//Interface:
	//	Modifier? "interface" name=ID ("extends" superclass=[Interface|QualifiedName])? "{"
	//	members+=AbstractInterfaceElement* "}";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Class:
	//	Modifier? "class" name=ID ("extends" superclass=[Class|QualifiedName])? ("implements"
	//	interfaceclass=[Interface|QualifiedName])? "{" members+=Member* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Member:
	//	Field | Method | ConstructorMethod | ContinuousMethod | InvariantBlock | CompositionMethod | DiscreteMethod |
	//	InitMethod;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//FieldName:
	//	ID;
	public FieldNameElements getFieldNameAccess() {
		return (pFieldName != null) ? pFieldName : (pFieldName = new FieldNameElements());
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	//Field:
	//	accessmodifer=Modifier? variablemodifer=VARIABLE_MODIFIER? type=UseType dim+=Dim* name=FieldName ("="
	//	varini=VariableInitializer)? ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//ConstructorMethod:
	//	name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
	public ConstructorMethodElements getConstructorMethodAccess() {
		return (pConstructorMethod != null) ? pConstructorMethod : (pConstructorMethod = new ConstructorMethodElements());
	}
	
	public ParserRule getConstructorMethodRule() {
		return getConstructorMethodAccess().getRule();
	}

	//Method:
	//	Modifier? type=UseType dim+=Dim* name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody
	//	"}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//AbstractMethod:
	//	AbstractContinuousMethod | AbstractDiscreteMethod | NativeStartMethod | AbstractCompositionMethod |
	//	AbstractInitMethod | Modifier? BuiltInModifier? type=UseType name=ID "(" (params+=Parameter (","
	//	params+=Parameter)*)? ")" ("{" body=AbstractMethodBody "}")? ";";
	public AbstractMethodElements getAbstractMethodAccess() {
		return (pAbstractMethod != null) ? pAbstractMethod : (pAbstractMethod = new AbstractMethodElements());
	}
	
	public ParserRule getAbstractMethodRule() {
		return getAbstractMethodAccess().getRule();
	}

	////THE MOST IMPORTANT RULE 
	//UseType:
	//	reftype=[RefType] | type=NonRefType;
	public UseTypeElements getUseTypeAccess() {
		return (pUseType != null) ? pUseType : (pUseType = new UseTypeElements());
	}
	
	public ParserRule getUseTypeRule() {
		return getUseTypeAccess().getRule();
	}

	//Parameter:
	//	type=UseType dim+=Dim* name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//TypedElement:
	//	Member | Parameter;
	public TypedElementElements getTypedElementAccess() {
		return (pTypedElement != null) ? pTypedElement : (pTypedElement = new TypedElementElements());
	}
	
	public ParserRule getTypedElementRule() {
		return getTypedElementAccess().getRule();
	}

	//MethodBody:
	//	{body} statements+=BlockStatement*;
	public MethodBodyElements getMethodBodyAccess() {
		return (pMethodBody != null) ? pMethodBody : (pMethodBody = new MethodBodyElements());
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}

	//AbstractMethodBody:
	//	RequiresAbstractComposition;
	public AbstractMethodBodyElements getAbstractMethodBodyAccess() {
		return (pAbstractMethodBody != null) ? pAbstractMethodBody : (pAbstractMethodBody = new AbstractMethodBodyElements());
	}
	
	public ParserRule getAbstractMethodBodyRule() {
		return getAbstractMethodBodyAccess().getRule();
	}

	//LocalVarName:
	//	ID;
	public LocalVarNameElements getLocalVarNameAccess() {
		return (pLocalVarName != null) ? pLocalVarName : (pLocalVarName = new LocalVarNameElements());
	}
	
	public ParserRule getLocalVarNameRule() {
		return getLocalVarNameAccess().getRule();
	}

	//VariableInitializer:
	//	Expression | "{" ExpressionList "}";
	public VariableInitializerElements getVariableInitializerAccess() {
		return (pVariableInitializer != null) ? pVariableInitializer : (pVariableInitializer = new VariableInitializerElements());
	}
	
	public ParserRule getVariableInitializerRule() {
		return getVariableInitializerAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// * 
	//Expression:		 
	//	
	//    TerminalExpression  
	//    =>(
	//        {Selection.receiver=current} '.' 
	//        message=[Member]
	//        ('(' (args+=Expression (',' args+=Expression)*)? ')')?
	//    )*     
	//    ;
	//
	//
	//
	//TerminalExpression returns Expression:	
	//   This |
	//   ParamRef |
	//   NewByClass |
	//   =>Cast  |
	//   Constant |
	//   Paren 
	//    ;
	//
	//
	//
	//This: variable='this';
	//ParamRef: parameter=[Parameter];
	//
	//Cast: '(' type=UseType ')' expression=TerminalExpression;
	//Paren returns Expression: '(' Expression ')'; 
	//
	//Constant:  IntConstant | BoolConstant | StringConstant;
	//
	//StringConstant: constant=STRING;
	//
	//IntConstant: constant=INT;
	//
	//BoolConstant: constant = ('true' | 'false');
	//
	// * 
	// * / //Requires
	//terminal AMOUNT_GEONE:
	//	"1..*";
	public TerminalRule getAMOUNT_GEONERule() {
		return (tAMOUNT_GEONE != null) ? tAMOUNT_GEONE : (tAMOUNT_GEONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMOUNT_GEONE"));
	} 

	//terminal AMOUNT_ONE_OR_ZERO:
	//	"0..1";
	public TerminalRule getAMOUNT_ONE_OR_ZERORule() {
		return (tAMOUNT_ONE_OR_ZERO != null) ? tAMOUNT_ONE_OR_ZERO : (tAMOUNT_ONE_OR_ZERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMOUNT_ONE_OR_ZERO"));
	} 

	//AMOUNT:
	//	AMOUNT_GEONE | AMOUNT_ONE_OR_ZERO;
	public AMOUNTElements getAMOUNTAccess() {
		return (pAMOUNT != null) ? pAMOUNT : (pAMOUNT = new AMOUNTElements());
	}
	
	public ParserRule getAMOUNTRule() {
		return getAMOUNTAccess().getRule();
	}

	//AbstractInterfaceElement:
	//	AbstractMethod | Requires | ClockConstraint | AbstractInvariant;
	public AbstractInterfaceElementElements getAbstractInterfaceElementAccess() {
		return (pAbstractInterfaceElement != null) ? pAbstractInterfaceElement : (pAbstractInterfaceElement = new AbstractInterfaceElementElements());
	}
	
	public ParserRule getAbstractInterfaceElementRule() {
		return getAbstractInterfaceElementAccess().getRule();
	}

	//Requires:
	//	"Requires" name=ID "[" AMOUNT "]" ":" type=UseType ";";
	public RequiresElements getRequiresAccess() {
		return (pRequires != null) ? pRequires : (pRequires = new RequiresElements());
	}
	
	public ParserRule getRequiresRule() {
		return getRequiresAccess().getRule();
	}

	//terminal ASYACTIONS:
	//	"(" "?" "|" "!" ")";
	public TerminalRule getASYACTIONSRule() {
		return (tASYACTIONS != null) ? tASYACTIONS : (tASYACTIONS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASYACTIONS"));
	} 

	//AbstractDynamicSwitch:
	//	"(" sname=ID "[" AMOUNT "]" ":" type1=[RefType] ("|" type2=[RefType])? "," aname=ID "[" AMOUNT "]" ":"
	//	type3=[RefType] "," dname=ID "[" AMOUNT "]" ":" type4=[RefType] ("|" type5=[RefType])? ")";
	public AbstractDynamicSwitchElements getAbstractDynamicSwitchAccess() {
		return (pAbstractDynamicSwitch != null) ? pAbstractDynamicSwitch : (pAbstractDynamicSwitch = new AbstractDynamicSwitchElements());
	}
	
	public ParserRule getAbstractDynamicSwitchRule() {
		return getAbstractDynamicSwitchAccess().getRule();
	}

	//ABSTRACT_CONDTION:
	//	"Condition" "{" "}" ";";
	public ABSTRACT_CONDTIONElements getABSTRACT_CONDTIONAccess() {
		return (pABSTRACT_CONDTION != null) ? pABSTRACT_CONDTION : (pABSTRACT_CONDTION = new ABSTRACT_CONDTIONElements());
	}
	
	public ParserRule getABSTRACT_CONDTIONRule() {
		return getABSTRACT_CONDTIONAccess().getRule();
	}

	//AbstractCompositionMethod:
	//	"void" name="Composition" "(" ")" "{" rac=RequiresAbstractComposition "}" ";";
	public AbstractCompositionMethodElements getAbstractCompositionMethodAccess() {
		return (pAbstractCompositionMethod != null) ? pAbstractCompositionMethod : (pAbstractCompositionMethod = new AbstractCompositionMethodElements());
	}
	
	public ParserRule getAbstractCompositionMethodRule() {
		return getAbstractCompositionMethodAccess().getRule();
	}

	//NativeStartMethod:
	//	"Native" "void" name="Start" "(" ")" ";";
	public NativeStartMethodElements getNativeStartMethodAccess() {
		return (pNativeStartMethod != null) ? pNativeStartMethod : (pNativeStartMethod = new NativeStartMethodElements());
	}
	
	public ParserRule getNativeStartMethodRule() {
		return getNativeStartMethodAccess().getRule();
	}

	//RequiresAbstractComposition:
	//	"Requires" name=ID "[" AMOUNT "]" ASYACTIONS "[" AMOUNT "]" ":" abstract_dynamic_switch=AbstractDynamicSwitch "{"
	//	ABSTRACT_CONDTION ABSTRACT_DISCRETE "}" ";";
	public RequiresAbstractCompositionElements getRequiresAbstractCompositionAccess() {
		return (pRequiresAbstractComposition != null) ? pRequiresAbstractComposition : (pRequiresAbstractComposition = new RequiresAbstractCompositionElements());
	}
	
	public ParserRule getRequiresAbstractCompositionRule() {
		return getRequiresAbstractCompositionAccess().getRule();
	}

	//ABSTRACT_DISCRETE:
	//	"Discrete" "{" "}" ";";
	public ABSTRACT_DISCRETEElements getABSTRACT_DISCRETEAccess() {
		return (pABSTRACT_DISCRETE != null) ? pABSTRACT_DISCRETE : (pABSTRACT_DISCRETE = new ABSTRACT_DISCRETEElements());
	}
	
	public ParserRule getABSTRACT_DISCRETERule() {
		return getABSTRACT_DISCRETEAccess().getRule();
	}

	//terminal CLOCK:
	//	"clock";
	public TerminalRule getCLOCKRule() {
		return (tCLOCK != null) ? tCLOCK : (tCLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLOCK"));
	} 

	//ClockConstraint:
	//	{ClockConstraint} "Constraint" name=CLOCK ";";
	public ClockConstraintElements getClockConstraintAccess() {
		return (pClockConstraint != null) ? pClockConstraint : (pClockConstraint = new ClockConstraintElements());
	}
	
	public ParserRule getClockConstraintRule() {
		return getClockConstraintAccess().getRule();
	}

	//AbstractInvariant:
	//	{AbstractInvariant} name="Invariant" "{" "}" ";";
	public AbstractInvariantElements getAbstractInvariantAccess() {
		return (pAbstractInvariant != null) ? pAbstractInvariant : (pAbstractInvariant = new AbstractInvariantElements());
	}
	
	public ParserRule getAbstractInvariantRule() {
		return getAbstractInvariantAccess().getRule();
	}

	////expressions
	//Expression:
	//	ConditionalExpression (=> assignmentoperator=AssignmentOperator expression=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentOperator:
	//	"=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (pAssignmentOperator != null) ? pAssignmentOperator : (pAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//ConditionalExpression:
	//	conditionalorexpression=ConditionalOrExpression ("?" expression1=Expression ":" expression2=Expression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ConditionalOrExpression:
	//	conditionalandexpression+=ConditionalAndExpression ("or" conditionalandexpression+=ConditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return (pConditionalOrExpression != null) ? pConditionalOrExpression : (pConditionalOrExpression = new ConditionalOrExpressionElements());
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}

	//ConditionalAndExpression:
	//	exclusiveorexpression+=ExclusiveOrExpression ("and" exclusiveorexpression+=ExclusiveOrExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return (pConditionalAndExpression != null) ? pConditionalAndExpression : (pConditionalAndExpression = new ConditionalAndExpressionElements());
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}

	//ExclusiveOrExpression:
	//	equalityexpression+=EqualityExpression ("xor" equalityexpression+=EqualityExpression)*;
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return (pExclusiveOrExpression != null) ? pExclusiveOrExpression : (pExclusiveOrExpression = new ExclusiveOrExpressionElements());
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}

	//EqualityExpression:
	//	instanceofexpression+=InstanceOfExpression (("==" | "!=") instanceofexpression+=InstanceOfExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//InstanceOfExpression:
	//	left=RelationalExpression ("instanceof" type=UseType)?;
	public InstanceOfExpressionElements getInstanceOfExpressionAccess() {
		return (pInstanceOfExpression != null) ? pInstanceOfExpression : (pInstanceOfExpression = new InstanceOfExpressionElements());
	}
	
	public ParserRule getInstanceOfExpressionRule() {
		return getInstanceOfExpressionAccess().getRule();
	}

	//RelationalExpression:
	//	additiveexpression+=AdditiveExpression (relationalop+=RelationalOp additiveexpression+=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//RelationalOp:
	//	"<" | "<=" | ">" | ">=" | "in" | "||" | "~";
	public RelationalOpElements getRelationalOpAccess() {
		return (pRelationalOp != null) ? pRelationalOp : (pRelationalOp = new RelationalOpElements());
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//AdditiveExpression:
	//	multiplicativeexpression+=MultiplicativeExpression (("+" | "-") multiplicativeexpression+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	unaryexpression+=UnaryExpression (("*" | "/" | "%") unaryexpression+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression:
	//	"+" UnaryExpression | "-" UnaryExpression | "++" UnaryExpression | "--" UnaryExpression | "[" from=Expression ","
	//	to=Expression "]" | UnaryExpressionNotPlusMinus;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//UnaryExpressionNotPlusMinus:
	//	{UnaryExpressionNotPlusMinus} ("!" unaryexpression=UnaryExpression | => castexpression=CastExpression |
	//	primary=Primary | builtin=Built_In_Methods);
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return (pUnaryExpressionNotPlusMinus != null) ? pUnaryExpressionNotPlusMinus : (pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements());
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}

	//Primary:
	//	{Primary} (parexpression=ParExpression //| 'this' ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?
	//	// | member+=[Member] ('.' member+=[Member])* (=>identifiersuffix=IdentifierSuffix)?                	
	//	| literal=Literal | newobject=NewByClass | newarray=NewArray | "this" ("." identifier+=ID dimer+=DimExpr*)* =>
	//	identifiersuffix=IdentifierSuffix? | identifier+=ID dimer+=DimExpr* ("." identifier+=ID dimer+=DimExpr*)* =>
	//	identifiersuffix=IdentifierSuffix?);
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//IdentifierSuffix:
	//	{IdentifierSuffix} (("[" "]")+ "." "class" | arguments=Arguments | "." "class" | "." "this" | "." "super"
	//	arguments=Arguments | "." getvalue="at" arguments=Arguments | "." "Composition" "(" ")" | "." "Start" "(" ")" | "(!)"
	//	| "(?)");
	public IdentifierSuffixElements getIdentifierSuffixAccess() {
		return (pIdentifierSuffix != null) ? pIdentifierSuffix : (pIdentifierSuffix = new IdentifierSuffixElements());
	}
	
	public ParserRule getIdentifierSuffixRule() {
		return getIdentifierSuffixAccess().getRule();
	}

	//Arguments:
	//	{Arguments} "(" expressionlist=ExpressionList? ")";
	public ArgumentsElements getArgumentsAccess() {
		return (pArguments != null) ? pArguments : (pArguments = new ArgumentsElements());
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//ExpressionList:
	//	expression1=Expression ("," expression2+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//CastExpression:
	//	{CastExpression} "(" type=UseType ")" expression=UnaryExpressionNotPlusMinus;
	public CastExpressionElements getCastExpressionAccess() {
		return (pCastExpression != null) ? pCastExpression : (pCastExpression = new CastExpressionElements());
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}

	//ParExpression: //'(' Expression ')';
	//	"(" expression1=Expression ("," expression2+=Expression)* ")";
	public ParExpressionElements getParExpressionAccess() {
		return (pParExpression != null) ? pParExpression : (pParExpression = new ParExpressionElements());
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//Literal returns Expression:
	//	{InfiniteLiteral} value="Inf" | {IntegerLiteral} value=IntegerLiteral | {FloatingPointLiteral}
	//	value=FLOATING_POINT_LITERAL | {CharacterLiteral} value=CHARACTER_LITERAL | {StringLiteral} value=STRING_LITERAL |
	//	{BooleanLiteral} value=BooleanLiteral | {NullLiteral} value="null";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//terminal HEX_LITERAL:
	//	"0" ("x" | "X") HEX_DIGIT+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getHEX_LITERALRule() {
		return (tHEX_LITERAL != null) ? tHEX_LITERAL : (tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_LITERAL"));
	} 

	//terminal DECIMAL_LITERAL:
	//	("0" | "1".."9" "0".."9"*) INTEGER_TYPE_SUFFIX?;
	public TerminalRule getDECIMAL_LITERALRule() {
		return (tDECIMAL_LITERAL != null) ? tDECIMAL_LITERAL : (tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_LITERAL"));
	} 

	//terminal OCTAL_LITERAL:
	//	"0" "0".."7"+ INTEGER_TYPE_SUFFIX?;
	public TerminalRule getOCTAL_LITERALRule() {
		return (tOCTAL_LITERAL != null) ? tOCTAL_LITERAL : (tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_LITERAL"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//terminal fragment INTEGER_TYPE_SUFFIX:
	//	"l" | "L";
	public TerminalRule getINTEGER_TYPE_SUFFIXRule() {
		return (tINTEGER_TYPE_SUFFIX != null) ? tINTEGER_TYPE_SUFFIX : (tINTEGER_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_TYPE_SUFFIX"));
	} 

	//terminal FLOATING_POINT_LITERAL:
	//	"0".."9"+ "." "0".."9"* EXPONENT? FLOAT_TYPE_SUFFIX? | "." "0".."9"+ EXPONENT? FLOAT_TYPE_SUFFIX? | "0".."9"+
	//	EXPONENT FLOAT_TYPE_SUFFIX? | "0".."9"+ FLOAT_TYPE_SUFFIX;
	public TerminalRule getFLOATING_POINT_LITERALRule() {
		return (tFLOATING_POINT_LITERAL != null) ? tFLOATING_POINT_LITERAL : (tFLOATING_POINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_POINT_LITERAL"));
	} 

	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	"f" | "F" | "d" | "D";
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return (tFLOAT_TYPE_SUFFIX != null) ? tFLOAT_TYPE_SUFFIX : (tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE_SUFFIX"));
	} 

	//terminal CHARACTER_LITERAL:
	//	"\'" (ESCAPE_SEQUENCE | !("\'" | "\\")) "\'";
	public TerminalRule getCHARACTER_LITERALRule() {
		return (tCHARACTER_LITERAL != null) ? tCHARACTER_LITERAL : (tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER_LITERAL"));
	} 

	//terminal STRING_LITERAL:
	//	"\"" (ESCAPE_SEQUENCE | !("\\" | "\""))* "\"";
	public TerminalRule getSTRING_LITERALRule() {
		return (tSTRING_LITERAL != null) ? tSTRING_LITERAL : (tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LITERAL"));
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal fragment OCTAL_ESCAPE:
	//	"\\" "0".."3" "0".."7" "0".."7" | "\\" "0".."7" "0".."7" | "\\" "0".."7";
	public TerminalRule getOCTAL_ESCAPERule() {
		return (tOCTAL_ESCAPE != null) ? tOCTAL_ESCAPE : (tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE"));
	} 

	//terminal fragment UNICODE_ESCAPE:
	//	"\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUNICODE_ESCAPERule() {
		return (tUNICODE_ESCAPE != null) ? tUNICODE_ESCAPE : (tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_ESCAPE"));
	} 

	//BooleanLiteral:
	//	"true" | "false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	////Differential Equations
	//DE_LHS:
	//	"dot" "(" var1=ID ("," var2=ID)? "," order=IntegerLiteral ")";
	public DE_LHSElements getDE_LHSAccess() {
		return (pDE_LHS != null) ? pDE_LHS : (pDE_LHS = new DE_LHSElements());
	}
	
	public ParserRule getDE_LHSRule() {
		return getDE_LHSAccess().getRule();
	}

	//DifferentialEquation:
	//	"Equation"? ":"? LHS=DE_LHS "==" RHS=AdditiveExpression;
	public DifferentialEquationElements getDifferentialEquationAccess() {
		return (pDifferentialEquation != null) ? pDifferentialEquation : (pDifferentialEquation = new DifferentialEquationElements());
	}
	
	public ParserRule getDifferentialEquationRule() {
		return getDifferentialEquationAccess().getRule();
	}

	////continuous method
	//ContinuousMethod:
	//	{ContinuousMethod} "void" name="Continuous" "(" ")" "{" (DES+=DifferentialEquation ";")* "}";
	public ContinuousMethodElements getContinuousMethodAccess() {
		return (pContinuousMethod != null) ? pContinuousMethod : (pContinuousMethod = new ContinuousMethodElements());
	}
	
	public ParserRule getContinuousMethodRule() {
		return getContinuousMethodAccess().getRule();
	}

	//AbstractContinuousMethod:
	//	{AbstractContinuousMethod} "void" name="Continuous" "(" ")" ";";
	public AbstractContinuousMethodElements getAbstractContinuousMethodAccess() {
		return (pAbstractContinuousMethod != null) ? pAbstractContinuousMethod : (pAbstractContinuousMethod = new AbstractContinuousMethodElements());
	}
	
	public ParserRule getAbstractContinuousMethodRule() {
		return getAbstractContinuousMethodAccess().getRule();
	}

	////Built-in Methods
	//Built_In_Methods:
	//	Sqrt | Sin | Cos | Tan | Cot | Sec | Csc | Round | Floor | Ceil | Div | Fld | Rem | Mod | Gcd | Lcm | Abs | Sign |
	//	Root | Hypot | Pow | Exp | Log | Erf | Gamma | Max | Min | Pause | DE_LHS | Size;
	public Built_In_MethodsElements getBuilt_In_MethodsAccess() {
		return (pBuilt_In_Methods != null) ? pBuilt_In_Methods : (pBuilt_In_Methods = new Built_In_MethodsElements());
	}
	
	public ParserRule getBuilt_In_MethodsRule() {
		return getBuilt_In_MethodsAccess().getRule();
	}

	//Sqrt:
	//	BuiltInName="sqrt" "(" ex=AdditiveExpression ")";
	public SqrtElements getSqrtAccess() {
		return (pSqrt != null) ? pSqrt : (pSqrt = new SqrtElements());
	}
	
	public ParserRule getSqrtRule() {
		return getSqrtAccess().getRule();
	}

	//Sin:
	//	BuiltInName="sin" "(" ex=AdditiveExpression ")";
	public SinElements getSinAccess() {
		return (pSin != null) ? pSin : (pSin = new SinElements());
	}
	
	public ParserRule getSinRule() {
		return getSinAccess().getRule();
	}

	//Cos:
	//	BuiltInName="cos" "(" ex=AdditiveExpression ")";
	public CosElements getCosAccess() {
		return (pCos != null) ? pCos : (pCos = new CosElements());
	}
	
	public ParserRule getCosRule() {
		return getCosAccess().getRule();
	}

	//Tan:
	//	BuiltInName="tan" "(" ex=AdditiveExpression ")";
	public TanElements getTanAccess() {
		return (pTan != null) ? pTan : (pTan = new TanElements());
	}
	
	public ParserRule getTanRule() {
		return getTanAccess().getRule();
	}

	//Cot:
	//	BuiltInName="cot" "(" ex=AdditiveExpression ")";
	public CotElements getCotAccess() {
		return (pCot != null) ? pCot : (pCot = new CotElements());
	}
	
	public ParserRule getCotRule() {
		return getCotAccess().getRule();
	}

	//Sec:
	//	BuiltInName="sec" "(" ex=AdditiveExpression ")";
	public SecElements getSecAccess() {
		return (pSec != null) ? pSec : (pSec = new SecElements());
	}
	
	public ParserRule getSecRule() {
		return getSecAccess().getRule();
	}

	//Csc:
	//	BuiltInName="csc" "(" ex=AdditiveExpression ")";
	public CscElements getCscAccess() {
		return (pCsc != null) ? pCsc : (pCsc = new CscElements());
	}
	
	public ParserRule getCscRule() {
		return getCscAccess().getRule();
	}

	//Round:
	//	BuiltInName="round" "(" ex=AdditiveExpression ")";
	public RoundElements getRoundAccess() {
		return (pRound != null) ? pRound : (pRound = new RoundElements());
	}
	
	public ParserRule getRoundRule() {
		return getRoundAccess().getRule();
	}

	//Floor:
	//	BuiltInName="floor" "(" ex=AdditiveExpression ")";
	public FloorElements getFloorAccess() {
		return (pFloor != null) ? pFloor : (pFloor = new FloorElements());
	}
	
	public ParserRule getFloorRule() {
		return getFloorAccess().getRule();
	}

	//Ceil:
	//	BuiltInName="ceil" "(" ex=AdditiveExpression ")";
	public CeilElements getCeilAccess() {
		return (pCeil != null) ? pCeil : (pCeil = new CeilElements());
	}
	
	public ParserRule getCeilRule() {
		return getCeilAccess().getRule();
	}

	//Div:
	//	BuiltInName="div" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public DivElements getDivAccess() {
		return (pDiv != null) ? pDiv : (pDiv = new DivElements());
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}

	//Fld:
	//	BuiltInName="fld" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public FldElements getFldAccess() {
		return (pFld != null) ? pFld : (pFld = new FldElements());
	}
	
	public ParserRule getFldRule() {
		return getFldAccess().getRule();
	}

	//Rem:
	//	BuiltInName="rem" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public RemElements getRemAccess() {
		return (pRem != null) ? pRem : (pRem = new RemElements());
	}
	
	public ParserRule getRemRule() {
		return getRemAccess().getRule();
	}

	//Mod:
	//	BuiltInName="mod" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public ModElements getModAccess() {
		return (pMod != null) ? pMod : (pMod = new ModElements());
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}

	//Gcd:
	//	BuiltInName="gcd" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
	public GcdElements getGcdAccess() {
		return (pGcd != null) ? pGcd : (pGcd = new GcdElements());
	}
	
	public ParserRule getGcdRule() {
		return getGcdAccess().getRule();
	}

	//Lcm:
	//	BuiltInName="lcm" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
	public LcmElements getLcmAccess() {
		return (pLcm != null) ? pLcm : (pLcm = new LcmElements());
	}
	
	public ParserRule getLcmRule() {
		return getLcmAccess().getRule();
	}

	//Abs:
	//	BuiltInName="abs" "(" ex=AdditiveExpression ")";
	public AbsElements getAbsAccess() {
		return (pAbs != null) ? pAbs : (pAbs = new AbsElements());
	}
	
	public ParserRule getAbsRule() {
		return getAbsAccess().getRule();
	}

	//Sign:
	//	BuiltInName="sign" "(" ex=AdditiveExpression ")";
	public SignElements getSignAccess() {
		return (pSign != null) ? pSign : (pSign = new SignElements());
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//Root:
	//	BuiltInName="root" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Hypot:
	//	BuiltInName="hypot" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public HypotElements getHypotAccess() {
		return (pHypot != null) ? pHypot : (pHypot = new HypotElements());
	}
	
	public ParserRule getHypotRule() {
		return getHypotAccess().getRule();
	}

	//Pow:
	//	BuiltInName="pow" "(" e1=AdditiveExpression "," e2=AdditiveExpression ")";
	public PowElements getPowAccess() {
		return (pPow != null) ? pPow : (pPow = new PowElements());
	}
	
	public ParserRule getPowRule() {
		return getPowAccess().getRule();
	}

	//Exp:
	//	BuiltInName="exp" "(" ex=AdditiveExpression ")";
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//Log:
	//	BuiltInName="log" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)? ")";
	public LogElements getLogAccess() {
		return (pLog != null) ? pLog : (pLog = new LogElements());
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}

	//Erf:
	//	BuiltInName="erf" "(" ex=AdditiveExpression ")";
	public ErfElements getErfAccess() {
		return (pErf != null) ? pErf : (pErf = new ErfElements());
	}
	
	public ParserRule getErfRule() {
		return getErfAccess().getRule();
	}

	//Gamma:
	//	BuiltInName="gamma" "(" ex=AdditiveExpression ")";
	public GammaElements getGammaAccess() {
		return (pGamma != null) ? pGamma : (pGamma = new GammaElements());
	}
	
	public ParserRule getGammaRule() {
		return getGammaAccess().getRule();
	}

	//Max:
	//	BuiltInName="max" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
	public MaxElements getMaxAccess() {
		return (pMax != null) ? pMax : (pMax = new MaxElements());
	}
	
	public ParserRule getMaxRule() {
		return getMaxAccess().getRule();
	}

	//Min:
	//	BuiltInName="min" "(" e1=AdditiveExpression ("," e2+=AdditiveExpression)* ")";
	public MinElements getMinAccess() {
		return (pMin != null) ? pMin : (pMin = new MinElements());
	}
	
	public ParserRule getMinRule() {
		return getMinAccess().getRule();
	}

	//Pause:
	//	BuiltInName="pause" "(" ex=AdditiveExpression ")";
	public PauseElements getPauseAccess() {
		return (pPause != null) ? pPause : (pPause = new PauseElements());
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Size:
	//	BuiltInName="size" "(" ex=AdditiveExpression ")";
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	////Condition
	//InvariantBlock:
	//	name="Invariant" "{" (conditions+=ConditionalExpression ";")* "}" ";";
	public InvariantBlockElements getInvariantBlockAccess() {
		return (pInvariantBlock != null) ? pInvariantBlock : (pInvariantBlock = new InvariantBlockElements());
	}
	
	public ParserRule getInvariantBlockRule() {
		return getInvariantBlockAccess().getRule();
	}

	////Statement
	//Block:
	//	{Block} "{" blockstatement+=BlockStatement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//BlockStatement:
	//	Statement | LocalVarDecStatement;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//LocalVarDecStatement:
	//	LocalVarDec ";";
	public LocalVarDecStatementElements getLocalVarDecStatementAccess() {
		return (pLocalVarDecStatement != null) ? pLocalVarDecStatement : (pLocalVarDecStatement = new LocalVarDecStatementElements());
	}
	
	public ParserRule getLocalVarDecStatementRule() {
		return getLocalVarDecStatementAccess().getRule();
	}

	//LocalVarDec:
	//	variablemodifer=VARIABLE_MODIFIER? type=UseType dim+=Dim* name=LocalVarName ("=" varini=VariableInitializer)?;
	public LocalVarDecElements getLocalVarDecAccess() {
		return (pLocalVarDec != null) ? pLocalVarDec : (pLocalVarDec = new LocalVarDecElements());
	}
	
	public ParserRule getLocalVarDecRule() {
		return getLocalVarDecAccess().getRule();
	}

	//Statement:
	//	{Statement} (block=Block | "if" parexpression=ParExpression ifstatement=Statement ("else" elsestatement=Statement)? |
	//	"for" "(" forcontrol=ForControl ")" forstatement=Statement | "break" identifier=ID? ";" | "continue" identifier=ID?
	//	";" | "while" parexpression=ParExpression whilestatement=Statement | return=ReturnStatement |
	//	statementexpression=Expression ";" | ";");
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ForControl:
	//	{ForControl} (enhancedforcontrol=EnhancedForControl | forinit=ForInit? ";" expression=Expression? ";"
	//	forupdate=ForUpdate?);
	public ForControlElements getForControlAccess() {
		return (pForControl != null) ? pForControl : (pForControl = new ForControlElements());
	}
	
	public ParserRule getForControlRule() {
		return getForControlAccess().getRule();
	}

	//EnhancedForControl:
	//	type=UseType id=ID ":" expression=Expression;
	public EnhancedForControlElements getEnhancedForControlAccess() {
		return (pEnhancedForControl != null) ? pEnhancedForControl : (pEnhancedForControl = new EnhancedForControlElements());
	}
	
	public ParserRule getEnhancedForControlRule() {
		return getEnhancedForControlAccess().getRule();
	}

	//ForInit:
	//	ExpressionList;
	public ForInitElements getForInitAccess() {
		return (pForInit != null) ? pForInit : (pForInit = new ForInitElements());
	}
	
	public ParserRule getForInitRule() {
		return getForInitAccess().getRule();
	}

	//ForUpdate:
	//	ExpressionList;
	public ForUpdateElements getForUpdateAccess() {
		return (pForUpdate != null) ? pForUpdate : (pForUpdate = new ForUpdateElements());
	}
	
	public ParserRule getForUpdateRule() {
		return getForUpdateAccess().getRule();
	}

	////Composition
	//CompositionMethod:
	//	"void" name="Composition" "(" ")" "{" members+=ControlSwitchComposition* "}";
	public CompositionMethodElements getCompositionMethodAccess() {
		return (pCompositionMethod != null) ? pCompositionMethod : (pCompositionMethod = new CompositionMethodElements());
	}
	
	public ParserRule getCompositionMethodRule() {
		return getCompositionMethodAccess().getRule();
	}

	//ControlSwitchComposition:
	//	{ControlSwitchComposition} (id=ID (sync="(" ")" | recev="(?)" | send="(!)")? "(" (source=Expression | "{"
	//	sourcelist=ExpressionList "}") "," action=Expression? "," (destination=Expression | "{"
	//	destinationlist=ExpressionList "}") ")" "{" condition=ConditionBlock? discrete=DiscreteBlock? "}");
	public ControlSwitchCompositionElements getControlSwitchCompositionAccess() {
		return (pControlSwitchComposition != null) ? pControlSwitchComposition : (pControlSwitchComposition = new ControlSwitchCompositionElements());
	}
	
	public ParserRule getControlSwitchCompositionRule() {
		return getControlSwitchCompositionAccess().getRule();
	}

	//DiscreteBlock:
	//	BuiltInName="Discrete" "{" statements+=BlockStatement* "}" ";"?;
	public DiscreteBlockElements getDiscreteBlockAccess() {
		return (pDiscreteBlock != null) ? pDiscreteBlock : (pDiscreteBlock = new DiscreteBlockElements());
	}
	
	public ParserRule getDiscreteBlockRule() {
		return getDiscreteBlockAccess().getRule();
	}

	//ConditionBlock:
	//	BuiltInName="Condition" "{" (conditions+=ConditionalExpression ";")* "}" ";"?;
	public ConditionBlockElements getConditionBlockAccess() {
		return (pConditionBlock != null) ? pConditionBlock : (pConditionBlock = new ConditionBlockElements());
	}
	
	public ParserRule getConditionBlockRule() {
		return getConditionBlockAccess().getRule();
	}

	////Discrete Method
	//DiscreteMethod:
	//	"void" name="Discrete" "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" statements+=BlockStatement* "}";
	public DiscreteMethodElements getDiscreteMethodAccess() {
		return (pDiscreteMethod != null) ? pDiscreteMethod : (pDiscreteMethod = new DiscreteMethodElements());
	}
	
	public ParserRule getDiscreteMethodRule() {
		return getDiscreteMethodAccess().getRule();
	}

	////Discrete Method
	//AbstractDiscreteMethod:
	//	"void" name="Discrete" "(" (params+=Parameter ("," params+=Parameter)*)? ")" ";";
	public AbstractDiscreteMethodElements getAbstractDiscreteMethodAccess() {
		return (pAbstractDiscreteMethod != null) ? pAbstractDiscreteMethod : (pAbstractDiscreteMethod = new AbstractDiscreteMethodElements());
	}
	
	public ParserRule getAbstractDiscreteMethodRule() {
		return getAbstractDiscreteMethodAccess().getRule();
	}

	//InitMethod:
	//	"void" name="Init" "(" ")" "{" statements+=BlockStatement* "}";
	public InitMethodElements getInitMethodAccess() {
		return (pInitMethod != null) ? pInitMethod : (pInitMethod = new InitMethodElements());
	}
	
	public ParserRule getInitMethodRule() {
		return getInitMethodAccess().getRule();
	}

	//AbstractInitMethod:
	//	"void" name="Init" "(" ")" ";";
	public AbstractInitMethodElements getAbstractInitMethodAccess() {
		return (pAbstractInitMethod != null) ? pAbstractInitMethod : (pAbstractInitMethod = new AbstractInitMethodElements());
	}
	
	public ParserRule getAbstractInitMethodRule() {
		return getAbstractInitMethodAccess().getRule();
	}

	//NewByClass:
	//	"new" type=[Class] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public NewByClassElements getNewByClassAccess() {
		return (pNewByClass != null) ? pNewByClass : (pNewByClass = new NewByClassElements());
	}
	
	public ParserRule getNewByClassRule() {
		return getNewByClassAccess().getRule();
	}

	////array
	//NewArray:
	//	"new" type=UseType dime+=DimExpr+;
	public NewArrayElements getNewArrayAccess() {
		return (pNewArray != null) ? pNewArray : (pNewArray = new NewArrayElements());
	}
	
	public ParserRule getNewArrayRule() {
		return getNewArrayAccess().getRule();
	}

	//DimExpr:
	//	{dimex} "[" index=Expression "]";
	public DimExprElements getDimExprAccess() {
		return (pDimExpr != null) ? pDimExpr : (pDimExpr = new DimExprElements());
	}
	
	public ParserRule getDimExprRule() {
		return getDimExprAccess().getRule();
	}

	//Dim:
	//	"[]";
	public DimElements getDimAccess() {
		return (pDim != null) ? pDim : (pDim = new DimElements());
	}
	
	public ParserRule getDimRule() {
		return getDimAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
