/*
* generated by Xtext
*/
grammar InternalApricot;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.fofo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.fofo.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.fofo.services.ApricotGrammarAccess;

}

@parser::members {

 	private ApricotGrammarAccess grammarAccess;
 	
    public InternalApricotParser(TokenStream input, ApricotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PackageDeclaration";	
   	}
   	
   	@Override
   	protected ApricotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getImportsImportParserRuleCall_3_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsRefTypeParserRuleCall_4_0()); 
	    }
		lv_elements_4_0=ruleRefType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"RefType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPublicKeyword_0()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPrivateKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleVARIABLE_MODIFIER
entryRuleVARIABLE_MODIFIER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVARIABLE_MODIFIERRule()); } 
	 iv_ruleVARIABLE_MODIFIER=ruleVARIABLE_MODIFIER 
	 { $current=$iv_ruleVARIABLE_MODIFIER.current.getText(); }  
	 EOF 
;

// Rule VARIABLE_MODIFIER
ruleVARIABLE_MODIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Constant' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVARIABLE_MODIFIERAccess().getConstantKeyword()); 
    }

    ;





// Entry rule entryRuleBuiltInModifier
entryRuleBuiltInModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInModifierRule()); } 
	 iv_ruleBuiltInModifier=ruleBuiltInModifier 
	 { $current=$iv_ruleBuiltInModifier.current.getText(); }  
	 EOF 
;

// Rule BuiltInModifier
ruleBuiltInModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Native' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInModifierAccess().getNativeKeyword()); 
    }

    ;





// Entry rule entryRuleRefType
entryRuleRefType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefTypeRule()); }
	 iv_ruleRefType=ruleRefType 
	 { $current=$iv_ruleRefType.current; } 
	 EOF 
;

// Rule RefType
ruleRefType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRefTypeAccess().getClassParserRuleCall_0()); 
    }
    this_Class_0=ruleClass
    { 
        $current = $this_Class_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRefTypeAccess().getInterfaceParserRuleCall_1()); 
    }
    this_Interface_1=ruleInterface
    { 
        $current = $this_Interface_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNonRefType
entryRuleNonRefType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonRefTypeRule()); }
	 iv_ruleNonRefType=ruleNonRefType 
	 { $current=$iv_ruleNonRefType.current; } 
	 EOF 
;

// Rule NonRefType
ruleNonRefType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNonRefTypeAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_BasicType_0=ruleBasicType
    { 
        $current = $this_BasicType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonRefTypeAccess().getMathTypeParserRuleCall_1()); 
    }
    this_MathType_1=ruleMathType
    { 
        $current = $this_MathType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_BT_0_1=	'void' 
    {
        newLeafNode(lv_BT_0_1, grammarAccess.getBasicTypeAccess().getBTVoidKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_1, null);
	    }

    |		lv_BT_0_2=	'int' 
    {
        newLeafNode(lv_BT_0_2, grammarAccess.getBasicTypeAccess().getBTIntKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_2, null);
	    }

    |		lv_BT_0_3=	'real' 
    {
        newLeafNode(lv_BT_0_3, grammarAccess.getBasicTypeAccess().getBTRealKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_3, null);
	    }

    |		lv_BT_0_4=	'boolean' 
    {
        newLeafNode(lv_BT_0_4, grammarAccess.getBasicTypeAccess().getBTBooleanKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_4, null);
	    }

    |		lv_BT_0_5=	'String' 
    {
        newLeafNode(lv_BT_0_5, grammarAccess.getBasicTypeAccess().getBTStringKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_5, null);
	    }

    |		lv_BT_0_6=	'Interval' 
    {
        newLeafNode(lv_BT_0_6, grammarAccess.getBasicTypeAccess().getBTIntervalKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "BT", lv_BT_0_6, null);
	    }

)

)
)
;





// Entry rule entryRuleMathType
entryRuleMathType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathTypeRule()); }
	 iv_ruleMathType=ruleMathType 
	 { $current=$iv_ruleMathType.current; } 
	 EOF 
;

// Rule MathType
ruleMathType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_MT_0_1=	'Int' 
    {
        newLeafNode(lv_MT_0_1, grammarAccess.getMathTypeAccess().getMTIntKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMathTypeRule());
	        }
       		setWithLastConsumed($current, "MT", lv_MT_0_1, null);
	    }

    |		lv_MT_0_2=	'Real' 
    {
        newLeafNode(lv_MT_0_2, grammarAccess.getMathTypeAccess().getMTRealKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMathTypeRule());
	        }
       		setWithLastConsumed($current, "MT", lv_MT_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getInterfaceAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getInterfaceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getSuperclassInterfaceCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getMembersAbstractInterfaceElementParserRuleCall_5_0()); 
	    }
		lv_members_6_0=ruleAbstractInterfaceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_6_0, 
        		"AbstractInterfaceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getClassAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassAccess().getExtendsKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSuperclassClassCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='implements' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassAccess().getImplementsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getInterfaceclassInterfaceCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getMembersMemberParserRuleCall_6_0()); 
	    }
		lv_members_8_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_8_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getFieldParserRuleCall_0()); 
    }
    this_Field_0=ruleField
    { 
        $current = $this_Field_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getMethodParserRuleCall_1()); 
    }
    this_Method_1=ruleMethod
    { 
        $current = $this_Method_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getConstructorMethodParserRuleCall_2()); 
    }
    this_ConstructorMethod_2=ruleConstructorMethod
    { 
        $current = $this_ConstructorMethod_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getContinuousMethodParserRuleCall_3()); 
    }
    this_ContinuousMethod_3=ruleContinuousMethod
    { 
        $current = $this_ContinuousMethod_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getInvariantBlockParserRuleCall_4()); 
    }
    this_InvariantBlock_4=ruleInvariantBlock
    { 
        $current = $this_InvariantBlock_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getCompositionMethodParserRuleCall_5()); 
    }
    this_CompositionMethod_5=ruleCompositionMethod
    { 
        $current = $this_CompositionMethod_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getDiscreteMethodParserRuleCall_6()); 
    }
    this_DiscreteMethod_6=ruleDiscreteMethod
    { 
        $current = $this_DiscreteMethod_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getInitMethodParserRuleCall_7()); 
    }
    this_InitMethod_7=ruleInitMethod
    { 
        $current = $this_InitMethod_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFieldName
entryRuleFieldName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); } 
	 iv_ruleFieldName=ruleFieldName 
	 { $current=$iv_ruleFieldName.current.getText(); }  
	 EOF 
;

// Rule FieldName
ruleFieldName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFieldNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getAccessmodiferModifierParserRuleCall_0_0()); 
	    }
		lv_accessmodifer_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"accessmodifer",
        		lv_accessmodifer_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getVariablemodiferVARIABLE_MODIFIERParserRuleCall_1_0()); 
	    }
		lv_variablemodifer_1_0=ruleVARIABLE_MODIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"variablemodifer",
        		lv_variablemodifer_1_0, 
        		"VARIABLE_MODIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeUseTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getDimDimParserRuleCall_3_0()); 
	    }
		lv_dim_3_0=ruleDim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		add(
       			$current, 
       			"dim",
        		lv_dim_3_0, 
        		"Dim");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getNameFieldNameParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleFieldName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"FieldName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFieldAccess().getEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getVariniVariableInitializerParserRuleCall_5_1_0()); 
	    }
		lv_varini_6_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"varini",
        		lv_varini_6_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFieldAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleConstructorMethod
entryRuleConstructorMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorMethodRule()); }
	 iv_ruleConstructorMethod=ruleConstructorMethod 
	 { $current=$iv_ruleConstructorMethod.current; } 
	 EOF 
;

// Rule ConstructorMethod
ruleConstructorMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConstructorMethodAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstructorMethodAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorMethodAccess().getParamsParameterParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstructorMethodAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorMethodAccess().getParamsParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstructorMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstructorMethodAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorMethodAccess().getBodyMethodBodyParserRuleCall_5_0()); 
	    }
		lv_body_7_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"MethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstructorMethodAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getMethodAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getTypeUseTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getDimDimParserRuleCall_2_0()); 
	    }
		lv_dim_2_0=ruleDim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"dim",
        		lv_dim_2_0, 
        		"Dim");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_5_0_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_5_1_1_0()); 
	    }
		lv_params_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getRightParenthesisKeyword_6());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyMethodBodyParserRuleCall_8_0()); 
	    }
		lv_body_10_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_10_0, 
        		"MethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleAbstractMethod
entryRuleAbstractMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractMethodRule()); }
	 iv_ruleAbstractMethod=ruleAbstractMethod 
	 { $current=$iv_ruleAbstractMethod.current; } 
	 EOF 
;

// Rule AbstractMethod
ruleAbstractMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getAbstractContinuousMethodParserRuleCall_0()); 
    }
    this_AbstractContinuousMethod_0=ruleAbstractContinuousMethod
    { 
        $current = $this_AbstractContinuousMethod_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getAbstractDiscreteMethodParserRuleCall_1()); 
    }
    this_AbstractDiscreteMethod_1=ruleAbstractDiscreteMethod
    { 
        $current = $this_AbstractDiscreteMethod_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getNativeStartMethodParserRuleCall_2()); 
    }
    this_NativeStartMethod_2=ruleNativeStartMethod
    { 
        $current = $this_NativeStartMethod_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getAbstractCompositionMethodParserRuleCall_3()); 
    }
    this_AbstractCompositionMethod_3=ruleAbstractCompositionMethod
    { 
        $current = $this_AbstractCompositionMethod_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getAbstractInitMethodParserRuleCall_4()); 
    }
    this_AbstractInitMethod_4=ruleAbstractInitMethod
    { 
        $current = $this_AbstractInitMethod_4.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getModifierParserRuleCall_5_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getAbstractMethodAccess().getBuiltInModifierParserRuleCall_5_1()); 
    }
ruleBuiltInModifier
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getTypeUseTypeParserRuleCall_5_2_0()); 
	    }
		lv_type_7_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_8_0=RULE_ID
		{
			newLeafNode(lv_name_8_0, grammarAccess.getAbstractMethodAccess().getNameIDTerminalRuleCall_5_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_8_0, 
        		"ID");
	    }

)
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAbstractMethodAccess().getLeftParenthesisKeyword_5_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getParamsParameterParserRuleCall_5_5_0_0()); 
	    }
		lv_params_10_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_10_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAbstractMethodAccess().getCommaKeyword_5_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getParamsParameterParserRuleCall_5_5_1_1_0()); 
	    }
		lv_params_12_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_12_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAbstractMethodAccess().getRightParenthesisKeyword_5_6());
    }
(	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAbstractMethodAccess().getLeftCurlyBracketKeyword_5_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractMethodAccess().getBodyAbstractMethodBodyParserRuleCall_5_7_1_0()); 
	    }
		lv_body_15_0=ruleAbstractMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_15_0, 
        		"AbstractMethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAbstractMethodAccess().getRightCurlyBracketKeyword_5_7_2());
    }
)?	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getAbstractMethodAccess().getSemicolonKeyword_5_8());
    }
))
;





// Entry rule entryRuleUseType
entryRuleUseType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseTypeRule()); }
	 iv_ruleUseType=ruleUseType 
	 { $current=$iv_ruleUseType.current; } 
	 EOF 
;

// Rule UseType
ruleUseType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUseTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getUseTypeAccess().getReftypeRefTypeCrossReference_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUseTypeAccess().getTypeNonRefTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleNonRefType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"NonRefType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeUseTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getDimDimParserRuleCall_1_0()); 
	    }
		lv_dim_1_0=ruleDim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		add(
       			$current, 
       			"dim",
        		lv_dim_1_0, 
        		"Dim");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	 iv_ruleMethodBody=ruleMethodBody 
	 { $current=$iv_ruleMethodBody.current; } 
	 EOF 
;

// Rule MethodBody
ruleMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodBodyAccess().getBodyAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodBodyAccess().getStatementsBlockStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodBodyRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAbstractMethodBody
entryRuleAbstractMethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractMethodBodyRule()); }
	 iv_ruleAbstractMethodBody=ruleAbstractMethodBody 
	 { $current=$iv_ruleAbstractMethodBody.current; } 
	 EOF 
;

// Rule AbstractMethodBody
ruleAbstractMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAbstractMethodBodyAccess().getRequiresAbstractCompositionParserRuleCall()); 
    }
    this_RequiresAbstractComposition_0=ruleRequiresAbstractComposition
    { 
        $current = $this_RequiresAbstractComposition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLocalVarName
entryRuleLocalVarName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarNameRule()); } 
	 iv_ruleLocalVarName=ruleLocalVarName 
	 { $current=$iv_ruleLocalVarName.current.getText(); }  
	 EOF 
;

// Rule LocalVarName
ruleLocalVarName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLocalVarNameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleVariableInitializer
entryRuleVariableInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableInitializerRule()); }
	 iv_ruleVariableInitializer=ruleVariableInitializer 
	 { $current=$iv_ruleVariableInitializer.current; } 
	 EOF 
;

// Rule VariableInitializer
ruleVariableInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableInitializerAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableInitializerAccess().getLeftCurlyBracketKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getVariableInitializerAccess().getExpressionListParserRuleCall_1_1()); 
    }
    this_ExpressionList_2=ruleExpressionList
    { 
        $current = $this_ExpressionList_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableInitializerAccess().getRightCurlyBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAMOUNT
entryRuleAMOUNT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMOUNTRule()); } 
	 iv_ruleAMOUNT=ruleAMOUNT 
	 { $current=$iv_ruleAMOUNT.current.getText(); }  
	 EOF 
;

// Rule AMOUNT
ruleAMOUNT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_AMOUNT_GEONE_0=RULE_AMOUNT_GEONE    {
		$current.merge(this_AMOUNT_GEONE_0);
    }

    { 
    newLeafNode(this_AMOUNT_GEONE_0, grammarAccess.getAMOUNTAccess().getAMOUNT_GEONETerminalRuleCall_0()); 
    }

    |    this_AMOUNT_ONE_OR_ZERO_1=RULE_AMOUNT_ONE_OR_ZERO    {
		$current.merge(this_AMOUNT_ONE_OR_ZERO_1);
    }

    { 
    newLeafNode(this_AMOUNT_ONE_OR_ZERO_1, grammarAccess.getAMOUNTAccess().getAMOUNT_ONE_OR_ZEROTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleAbstractInterfaceElement
entryRuleAbstractInterfaceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractInterfaceElementRule()); }
	 iv_ruleAbstractInterfaceElement=ruleAbstractInterfaceElement 
	 { $current=$iv_ruleAbstractInterfaceElement.current; } 
	 EOF 
;

// Rule AbstractInterfaceElement
ruleAbstractInterfaceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getAbstractMethodParserRuleCall_0()); 
    }
    this_AbstractMethod_0=ruleAbstractMethod
    { 
        $current = $this_AbstractMethod_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getRequiresParserRuleCall_1()); 
    }
    this_Requires_1=ruleRequires
    { 
        $current = $this_Requires_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getClockConstraintParserRuleCall_2()); 
    }
    this_ClockConstraint_2=ruleClockConstraint
    { 
        $current = $this_ClockConstraint_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractInterfaceElementAccess().getAbstractInvariantParserRuleCall_3()); 
    }
    this_AbstractInvariant_3=ruleAbstractInvariant
    { 
        $current = $this_AbstractInvariant_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRequires
entryRuleRequires returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresRule()); }
	 iv_ruleRequires=ruleRequires 
	 { $current=$iv_ruleRequires.current; } 
	 EOF 
;

// Rule Requires
ruleRequires returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiresAccess().getRequiresKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequiresAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequiresAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAccess().getAMOUNTParserRuleCall_3()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiresAccess().getRightSquareBracketKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRequiresAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresAccess().getTypeUseTypeParserRuleCall_6_0()); 
	    }
		lv_type_6_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRequiresAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleAbstractDynamicSwitch
entryRuleAbstractDynamicSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDynamicSwitchRule()); }
	 iv_ruleAbstractDynamicSwitch=ruleAbstractDynamicSwitch 
	 { $current=$iv_ruleAbstractDynamicSwitch.current; } 
	 EOF 
;

// Rule AbstractDynamicSwitch
ruleAbstractDynamicSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractDynamicSwitchAccess().getLeftParenthesisKeyword_0());
    }
(
(
		lv_sname_1_0=RULE_ID
		{
			newLeafNode(lv_sname_1_0, grammarAccess.getAbstractDynamicSwitchAccess().getSnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sname",
        		lv_sname_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractDynamicSwitchAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getAbstractDynamicSwitchAccess().getAMOUNTParserRuleCall_3()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractDynamicSwitchAccess().getRightSquareBracketKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAbstractDynamicSwitchAccess().getColonKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getAbstractDynamicSwitchAccess().getType1RefTypeCrossReference_6_0()); 
	}

)
)(	otherlv_7='|' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAbstractDynamicSwitchAccess().getVerticalLineKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getAbstractDynamicSwitchAccess().getType2RefTypeCrossReference_7_1_0()); 
	}

)
))?	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAbstractDynamicSwitchAccess().getCommaKeyword_8());
    }
(
(
		lv_aname_10_0=RULE_ID
		{
			newLeafNode(lv_aname_10_0, grammarAccess.getAbstractDynamicSwitchAccess().getAnameIDTerminalRuleCall_9_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"aname",
        		lv_aname_10_0, 
        		"ID");
	    }

)
)	otherlv_11='[' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAbstractDynamicSwitchAccess().getLeftSquareBracketKeyword_10());
    }

    { 
        newCompositeNode(grammarAccess.getAbstractDynamicSwitchAccess().getAMOUNTParserRuleCall_11()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_13=']' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAbstractDynamicSwitchAccess().getRightSquareBracketKeyword_12());
    }
	otherlv_14=':' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAbstractDynamicSwitchAccess().getColonKeyword_13());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getAbstractDynamicSwitchAccess().getType3RefTypeCrossReference_14_0()); 
	}

)
)	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAbstractDynamicSwitchAccess().getCommaKeyword_15());
    }
(
(
		lv_dname_17_0=RULE_ID
		{
			newLeafNode(lv_dname_17_0, grammarAccess.getAbstractDynamicSwitchAccess().getDnameIDTerminalRuleCall_16_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dname",
        		lv_dname_17_0, 
        		"ID");
	    }

)
)	otherlv_18='[' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getAbstractDynamicSwitchAccess().getLeftSquareBracketKeyword_17());
    }

    { 
        newCompositeNode(grammarAccess.getAbstractDynamicSwitchAccess().getAMOUNTParserRuleCall_18()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_20=']' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getAbstractDynamicSwitchAccess().getRightSquareBracketKeyword_19());
    }
	otherlv_21=':' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getAbstractDynamicSwitchAccess().getColonKeyword_20());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_22=RULE_ID
	{
		newLeafNode(otherlv_22, grammarAccess.getAbstractDynamicSwitchAccess().getType4RefTypeCrossReference_21_0()); 
	}

)
)(	otherlv_23='|' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getAbstractDynamicSwitchAccess().getVerticalLineKeyword_22_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDynamicSwitchRule());
	        }
        }
	otherlv_24=RULE_ID
	{
		newLeafNode(otherlv_24, grammarAccess.getAbstractDynamicSwitchAccess().getType5RefTypeCrossReference_22_1_0()); 
	}

)
))?	otherlv_25=')' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getAbstractDynamicSwitchAccess().getRightParenthesisKeyword_23());
    }
)
;





// Entry rule entryRuleABSTRACT_CONDTION
entryRuleABSTRACT_CONDTION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getABSTRACT_CONDTIONRule()); } 
	 iv_ruleABSTRACT_CONDTION=ruleABSTRACT_CONDTION 
	 { $current=$iv_ruleABSTRACT_CONDTION.current.getText(); }  
	 EOF 
;

// Rule ABSTRACT_CONDTION
ruleABSTRACT_CONDTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Condition' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_CONDTIONAccess().getConditionKeyword_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_CONDTIONAccess().getLeftCurlyBracketKeyword_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_CONDTIONAccess().getRightCurlyBracketKeyword_2()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_CONDTIONAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAbstractCompositionMethod
entryRuleAbstractCompositionMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractCompositionMethodRule()); }
	 iv_ruleAbstractCompositionMethod=ruleAbstractCompositionMethod 
	 { $current=$iv_ruleAbstractCompositionMethod.current; } 
	 EOF 
;

// Rule AbstractCompositionMethod
ruleAbstractCompositionMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractCompositionMethodAccess().getVoidKeyword_0());
    }
(
(
		lv_name_1_0=	'Composition' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getAbstractCompositionMethodAccess().getNameCompositionKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractCompositionMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Composition");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractCompositionMethodAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbstractCompositionMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractCompositionMethodAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractCompositionMethodAccess().getRacRequiresAbstractCompositionParserRuleCall_5_0()); 
	    }
		lv_rac_5_0=ruleRequiresAbstractComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractCompositionMethodRule());
	        }
       		set(
       			$current, 
       			"rac",
        		lv_rac_5_0, 
        		"RequiresAbstractComposition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAbstractCompositionMethodAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAbstractCompositionMethodAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleNativeStartMethod
entryRuleNativeStartMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNativeStartMethodRule()); }
	 iv_ruleNativeStartMethod=ruleNativeStartMethod 
	 { $current=$iv_ruleNativeStartMethod.current; } 
	 EOF 
;

// Rule NativeStartMethod
ruleNativeStartMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Native' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNativeStartMethodAccess().getNativeKeyword_0());
    }
	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNativeStartMethodAccess().getVoidKeyword_1());
    }
(
(
		lv_name_2_0=	'Start' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getNativeStartMethodAccess().getNameStartKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNativeStartMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "Start");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNativeStartMethodAccess().getLeftParenthesisKeyword_3());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNativeStartMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNativeStartMethodAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleRequiresAbstractComposition
entryRuleRequiresAbstractComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresAbstractCompositionRule()); }
	 iv_ruleRequiresAbstractComposition=ruleRequiresAbstractComposition 
	 { $current=$iv_ruleRequiresAbstractComposition.current; } 
	 EOF 
;

// Rule RequiresAbstractComposition
ruleRequiresAbstractComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiresAbstractCompositionAccess().getRequiresKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRequiresAbstractCompositionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresAbstractCompositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequiresAbstractCompositionAccess().getLeftSquareBracketKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getAMOUNTParserRuleCall_3()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiresAbstractCompositionAccess().getRightSquareBracketKeyword_4());
    }
this_ASYACTIONS_5=RULE_ASYACTIONS
    { 
    newLeafNode(this_ASYACTIONS_5, grammarAccess.getRequiresAbstractCompositionAccess().getASYACTIONSTerminalRuleCall_5()); 
    }
	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRequiresAbstractCompositionAccess().getLeftSquareBracketKeyword_6());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getAMOUNTParserRuleCall_7()); 
    }
ruleAMOUNT
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRequiresAbstractCompositionAccess().getRightSquareBracketKeyword_8());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRequiresAbstractCompositionAccess().getColonKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getAbstract_dynamic_switchAbstractDynamicSwitchParserRuleCall_10_0()); 
	    }
		lv_abstract_dynamic_switch_10_0=ruleAbstractDynamicSwitch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresAbstractCompositionRule());
	        }
       		set(
       			$current, 
       			"abstract_dynamic_switch",
        		lv_abstract_dynamic_switch_10_0, 
        		"AbstractDynamicSwitch");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRequiresAbstractCompositionAccess().getLeftCurlyBracketKeyword_11());
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getABSTRACT_CONDTIONParserRuleCall_12()); 
    }
ruleABSTRACT_CONDTION
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getRequiresAbstractCompositionAccess().getABSTRACT_DISCRETEParserRuleCall_13()); 
    }
ruleABSTRACT_DISCRETE
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRequiresAbstractCompositionAccess().getRightCurlyBracketKeyword_14());
    }
	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRequiresAbstractCompositionAccess().getSemicolonKeyword_15());
    }
)
;





// Entry rule entryRuleABSTRACT_DISCRETE
entryRuleABSTRACT_DISCRETE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getABSTRACT_DISCRETERule()); } 
	 iv_ruleABSTRACT_DISCRETE=ruleABSTRACT_DISCRETE 
	 { $current=$iv_ruleABSTRACT_DISCRETE.current.getText(); }  
	 EOF 
;

// Rule ABSTRACT_DISCRETE
ruleABSTRACT_DISCRETE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Discrete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_DISCRETEAccess().getDiscreteKeyword_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_DISCRETEAccess().getLeftCurlyBracketKeyword_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_DISCRETEAccess().getRightCurlyBracketKeyword_2()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getABSTRACT_DISCRETEAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleClockConstraint
entryRuleClockConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockConstraintRule()); }
	 iv_ruleClockConstraint=ruleClockConstraint 
	 { $current=$iv_ruleClockConstraint.current; } 
	 EOF 
;

// Rule ClockConstraint
ruleClockConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClockConstraintAccess().getClockConstraintAction_0(),
            $current);
    }
)	otherlv_1='Constraint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClockConstraintAccess().getConstraintKeyword_1());
    }
(
(
		lv_name_2_0=RULE_CLOCK
		{
			newLeafNode(lv_name_2_0, grammarAccess.getClockConstraintAccess().getNameCLOCKTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"CLOCK");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClockConstraintAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAbstractInvariant
entryRuleAbstractInvariant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractInvariantRule()); }
	 iv_ruleAbstractInvariant=ruleAbstractInvariant 
	 { $current=$iv_ruleAbstractInvariant.current; } 
	 EOF 
;

// Rule AbstractInvariant
ruleAbstractInvariant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAbstractInvariantAccess().getAbstractInvariantAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=	'Invariant' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getAbstractInvariantAccess().getNameInvariantKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractInvariantRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Invariant");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractInvariantAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbstractInvariantAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractInvariantAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_0()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
(
ruleAssignmentOperator
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentoperatorAssignmentOperatorParserRuleCall_1_0_0()); 
	    }
		lv_assignmentoperator_1_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"assignmentoperator",
        		lv_assignmentoperator_1_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); } 
	 iv_ruleAssignmentOperator=ruleAssignmentOperator 
	 { $current=$iv_ruleAssignmentOperator.current.getText(); }  
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_1()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_2()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_3()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_4()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_5()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_6()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_7()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getConditionalorexpressionConditionalOrExpressionParserRuleCall_0_0()); 
	    }
		lv_conditionalorexpression_0_0=ruleConditionalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"conditionalorexpression",
        		lv_conditionalorexpression_0_0, 
        		"ConditionalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression1ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression1_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpression2ExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expression2_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalOrExpressionRule()); }
	 iv_ruleConditionalOrExpression=ruleConditionalOrExpression 
	 { $current=$iv_ruleConditionalOrExpression.current; } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getConditionalandexpressionConditionalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_conditionalandexpression_0_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"conditionalandexpression",
        		lv_conditionalandexpression_0_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalOrExpressionAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getConditionalandexpressionConditionalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_conditionalandexpression_2_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"conditionalandexpression",
        		lv_conditionalandexpression_2_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalAndExpressionRule()); }
	 iv_ruleConditionalAndExpression=ruleConditionalAndExpression 
	 { $current=$iv_ruleConditionalAndExpression.current; } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_0_0()); 
	    }
		lv_exclusiveorexpression_0_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exclusiveorexpression",
        		lv_exclusiveorexpression_0_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalAndExpressionAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExclusiveorexpressionExclusiveOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exclusiveorexpression_2_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"exclusiveorexpression",
        		lv_exclusiveorexpression_2_0, 
        		"ExclusiveOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusiveOrExpressionRule()); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getEqualityexpressionEqualityExpressionParserRuleCall_0_0()); 
	    }
		lv_equalityexpression_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"equalityexpression",
        		lv_equalityexpression_0_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='xor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExclusiveOrExpressionAccess().getXorKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getEqualityexpressionEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_equalityexpression_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusiveOrExpressionRule());
	        }
       		add(
       			$current, 
       			"equalityexpression",
        		lv_equalityexpression_2_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofexpressionInstanceOfExpressionParserRuleCall_0_0()); 
	    }
		lv_instanceofexpression_0_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"instanceofexpression",
        		lv_instanceofexpression_0_0, 
        		"InstanceOfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='==' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
    }

    |	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofexpressionInstanceOfExpressionParserRuleCall_1_1_0()); 
	    }
		lv_instanceofexpression_3_0=ruleInstanceOfExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		add(
       			$current, 
       			"instanceofexpression",
        		lv_instanceofexpression_3_0, 
        		"InstanceOfExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOfExpression
entryRuleInstanceOfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceOfExpressionRule()); }
	 iv_ruleInstanceOfExpression=ruleInstanceOfExpression 
	 { $current=$iv_ruleInstanceOfExpression.current; } 
	 EOF 
;

// Rule InstanceOfExpression
ruleInstanceOfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getLeftRelationalExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='instanceof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceOfExpressionAccess().getInstanceofKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExpressionAccess().getTypeUseTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveexpressionAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_additiveexpression_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"additiveexpression",
        		lv_additiveexpression_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalopRelationalOpParserRuleCall_1_0_0()); 
	    }
		lv_relationalop_1_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"relationalop",
        		lv_relationalop_1_0, 
        		"RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveexpressionAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_additiveexpression_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		add(
       			$current, 
       			"additiveexpression",
        		lv_additiveexpression_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getInKeyword_4()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getVerticalLineVerticalLineKeyword_5()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getTildeKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_0_0()); 
	    }
		lv_multiplicativeexpression_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multiplicativeexpression",
        		lv_multiplicativeexpression_0_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeexpressionMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_multiplicativeexpression_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"multiplicativeexpression",
        		lv_multiplicativeexpression_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryexpressionUnaryExpressionParserRuleCall_0_0()); 
	    }
		lv_unaryexpression_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_0_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_0_1());
    }

    |	otherlv_3='%' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicativeExpressionAccess().getPercentSignKeyword_1_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryexpressionUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_unaryexpression_4_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_4_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_0_1()); 
    }
    this_UnaryExpression_1=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_1_1()); 
    }
    this_UnaryExpression_3=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='++' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionAccess().getPlusSignPlusSignKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_2_1()); 
    }
    this_UnaryExpression_5=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='--' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryExpressionAccess().getHyphenMinusHyphenMinusKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_3_1()); 
    }
    this_UnaryExpression_7=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnaryExpressionAccess().getLeftSquareBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getFromExpressionParserRuleCall_4_1_0()); 
	    }
		lv_from_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getUnaryExpressionAccess().getCommaKeyword_4_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getToExpressionParserRuleCall_4_3_0()); 
	    }
		lv_to_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getUnaryExpressionAccess().getRightSquareBracketKeyword_4_4());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionNotPlusMinusParserRuleCall_5()); 
    }
    this_UnaryExpressionNotPlusMinus_13=ruleUnaryExpressionNotPlusMinus
    { 
        $current = $this_UnaryExpressionNotPlusMinus_13.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnaryExpressionNotPlusMinus
entryRuleUnaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule()); }
	 iv_ruleUnaryExpressionNotPlusMinus=ruleUnaryExpressionNotPlusMinus 
	 { $current=$iv_ruleUnaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule UnaryExpressionNotPlusMinus
ruleUnaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionNotPlusMinusAction_0(),
            $current);
    }
)((	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryexpressionUnaryExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_unaryexpression_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionNotPlusMinusRule());
	        }
       		set(
       			$current, 
       			"unaryexpression",
        		lv_unaryexpression_2_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
ruleCastExpression
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getCastexpressionCastExpressionParserRuleCall_1_1_0()); 
	    }
		lv_castexpression_3_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionNotPlusMinusRule());
	        }
       		set(
       			$current, 
       			"castexpression",
        		lv_castexpression_3_0, 
        		"CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_primary_4_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionNotPlusMinusRule());
	        }
       		set(
       			$current, 
       			"primary",
        		lv_primary_4_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getBuiltinBuilt_In_MethodsParserRuleCall_1_3_0()); 
	    }
		lv_builtin_5_0=ruleBuilt_In_Methods		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionNotPlusMinusRule());
	        }
       		set(
       			$current, 
       			"builtin",
        		lv_builtin_5_0, 
        		"Built_In_Methods");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPrimaryAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getParexpressionParExpressionParserRuleCall_1_0_0()); 
	    }
		lv_parexpression_1_0=ruleParExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"parexpression",
        		lv_parexpression_1_0, 
        		"ParExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getLiteralLiteralParserRuleCall_1_1_0()); 
	    }
		lv_literal_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getNewobjectNewByClassParserRuleCall_1_2_0()); 
	    }
		lv_newobject_3_0=ruleNewByClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"newobject",
        		lv_newobject_3_0, 
        		"NewByClass");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getNewarrayNewArrayParserRuleCall_1_3_0()); 
	    }
		lv_newarray_4_0=ruleNewArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"newarray",
        		lv_newarray_4_0, 
        		"NewArray");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_5='this' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getThisKeyword_1_4_0());
    }
(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryAccess().getFullStopKeyword_1_4_1_0());
    }
(
(
		lv_identifier_7_0=RULE_ID
		{
			newLeafNode(lv_identifier_7_0, grammarAccess.getPrimaryAccess().getIdentifierIDTerminalRuleCall_1_4_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_7_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getDimerDimExprParserRuleCall_1_4_1_2_0()); 
	    }
		lv_dimer_8_0=ruleDimExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		add(
       			$current, 
       			"dimer",
        		lv_dimer_8_0, 
        		"DimExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*((
(
ruleIdentifierSuffix
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getIdentifiersuffixIdentifierSuffixParserRuleCall_1_4_2_0()); 
	    }
		lv_identifiersuffix_9_0=ruleIdentifierSuffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"identifiersuffix",
        		lv_identifiersuffix_9_0, 
        		"IdentifierSuffix");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		lv_identifier_10_0=RULE_ID
		{
			newLeafNode(lv_identifier_10_0, grammarAccess.getPrimaryAccess().getIdentifierIDTerminalRuleCall_1_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_10_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getDimerDimExprParserRuleCall_1_5_1_0()); 
	    }
		lv_dimer_11_0=ruleDimExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		add(
       			$current, 
       			"dimer",
        		lv_dimer_11_0, 
        		"DimExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_12='.' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimaryAccess().getFullStopKeyword_1_5_2_0());
    }
(
(
		lv_identifier_13_0=RULE_ID
		{
			newLeafNode(lv_identifier_13_0, grammarAccess.getPrimaryAccess().getIdentifierIDTerminalRuleCall_1_5_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_13_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getDimerDimExprParserRuleCall_1_5_2_2_0()); 
	    }
		lv_dimer_14_0=ruleDimExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		add(
       			$current, 
       			"dimer",
        		lv_dimer_14_0, 
        		"DimExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*((
(
ruleIdentifierSuffix
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getIdentifiersuffixIdentifierSuffixParserRuleCall_1_5_3_0()); 
	    }
		lv_identifiersuffix_15_0=ruleIdentifierSuffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"identifiersuffix",
        		lv_identifiersuffix_15_0, 
        		"IdentifierSuffix");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleIdentifierSuffix
entryRuleIdentifierSuffix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierSuffixRule()); }
	 iv_ruleIdentifierSuffix=ruleIdentifierSuffix 
	 { $current=$iv_ruleIdentifierSuffix.current; } 
	 EOF 
;

// Rule IdentifierSuffix
ruleIdentifierSuffix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentifierSuffixAccess().getIdentifierSuffixAction_0(),
            $current);
    }
)(((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdentifierSuffixAccess().getLeftSquareBracketKeyword_1_0_0_0());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIdentifierSuffixAccess().getRightSquareBracketKeyword_1_0_0_1());
    }
)+	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_0_1());
    }
	otherlv_4='class' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIdentifierSuffixAccess().getClassKeyword_1_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierSuffixAccess().getArgumentsArgumentsParserRuleCall_1_1_0()); 
	    }
		lv_arguments_5_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierSuffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_2_0());
    }
	otherlv_7='class' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIdentifierSuffixAccess().getClassKeyword_1_2_1());
    }
)
    |(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_3_0());
    }
	otherlv_9='this' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getIdentifierSuffixAccess().getThisKeyword_1_3_1());
    }
)
    |(	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_4_0());
    }
	otherlv_11='super' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIdentifierSuffixAccess().getSuperKeyword_1_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierSuffixAccess().getArgumentsArgumentsParserRuleCall_1_4_2_0()); 
	    }
		lv_arguments_12_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierSuffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_13='.' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_5_0());
    }
(
(
		lv_getvalue_14_0=	'at' 
    {
        newLeafNode(lv_getvalue_14_0, grammarAccess.getIdentifierSuffixAccess().getGetvalueAtKeyword_1_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentifierSuffixRule());
	        }
       		setWithLastConsumed($current, "getvalue", lv_getvalue_14_0, "at");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierSuffixAccess().getArgumentsArgumentsParserRuleCall_1_5_2_0()); 
	    }
		lv_arguments_15_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierSuffixRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_15_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_16='.' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_6_0());
    }
	otherlv_17='Composition' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getIdentifierSuffixAccess().getCompositionKeyword_1_6_1());
    }
	otherlv_18='(' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getIdentifierSuffixAccess().getLeftParenthesisKeyword_1_6_2());
    }
	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getIdentifierSuffixAccess().getRightParenthesisKeyword_1_6_3());
    }
)
    |(	otherlv_20='.' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getIdentifierSuffixAccess().getFullStopKeyword_1_7_0());
    }
	otherlv_21='Start' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getIdentifierSuffixAccess().getStartKeyword_1_7_1());
    }
	otherlv_22='(' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getIdentifierSuffixAccess().getLeftParenthesisKeyword_1_7_2());
    }
	otherlv_23=')' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getIdentifierSuffixAccess().getRightParenthesisKeyword_1_7_3());
    }
)
    |	otherlv_24='(!)' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getIdentifierSuffixAccess().getLeftParenthesisExclamationMarkRightParenthesisKeyword_1_8());
    }

    |	otherlv_25='(?)' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getIdentifierSuffixAccess().getLeftParenthesisQuestionMarkRightParenthesisKeyword_1_9());
    }
))
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionlistExpressionListParserRuleCall_2_0()); 
	    }
		lv_expressionlist_2_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		set(
       			$current, 
       			"expressionlist",
        		lv_expressionlist_2_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpression1ExpressionParserRuleCall_0_0()); 
	    }
		lv_expression1_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpression2ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression2_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expression2",
        		lv_expression2_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	 iv_ruleCastExpression=ruleCastExpression 
	 { $current=$iv_ruleCastExpression.current; } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCastExpressionAccess().getCastExpressionAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getTypeUseTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getExpressionUnaryExpressionNotPlusMinusParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleUnaryExpressionNotPlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"UnaryExpressionNotPlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParExpression
entryRuleParExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParExpressionRule()); }
	 iv_ruleParExpression=ruleParExpression 
	 { $current=$iv_ruleParExpression.current; } 
	 EOF 
;

// Rule ParExpression
ruleParExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParExpressionAccess().getExpression1ExpressionParserRuleCall_1_0()); 
	    }
		lv_expression1_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParExpressionRule());
	        }
       		set(
       			$current, 
       			"expression1",
        		lv_expression1_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParExpressionAccess().getExpression2ExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression2_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParExpressionRule());
	        }
       		add(
       			$current, 
       			"expression2",
        		lv_expression2_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getInfiniteLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=	'Inf' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getLiteralAccess().getValueInfKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_0, "Inf");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getIntegerLiteralAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getValueIntegerLiteralParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"IntegerLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getFloatingPointLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_FLOATING_POINT_LITERAL
		{
			newLeafNode(lv_value_5_0, grammarAccess.getLiteralAccess().getValueFLOATING_POINT_LITERALTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"FLOATING_POINT_LITERAL");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getCharacterLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_value_7_0=RULE_CHARACTER_LITERAL
		{
			newLeafNode(lv_value_7_0, grammarAccess.getLiteralAccess().getValueCHARACTER_LITERALTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"CHARACTER_LITERAL");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getStringLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_value_9_0=RULE_STRING_LITERAL
		{
			newLeafNode(lv_value_9_0, grammarAccess.getLiteralAccess().getValueSTRING_LITERALTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"STRING_LITERAL");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getBooleanLiteralAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getValueBooleanLiteralParserRuleCall_5_1_0()); 
	    }
		lv_value_11_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getNullLiteralAction_6_0(),
            $current);
    }
)(
(
		lv_value_13_0=	'null' 
    {
        newLeafNode(lv_value_13_0, grammarAccess.getLiteralAccess().getValueNullKeyword_6_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_13_0, "null");
	    }

)
)))
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    newLeafNode(this_HEX_LITERAL_0, grammarAccess.getIntegerLiteralAccess().getHEX_LITERALTerminalRuleCall_0()); 
    }

    |    this_OCTAL_LITERAL_1=RULE_OCTAL_LITERAL    {
		$current.merge(this_OCTAL_LITERAL_1);
    }

    { 
    newLeafNode(this_OCTAL_LITERAL_1, grammarAccess.getIntegerLiteralAccess().getOCTAL_LITERALTerminalRuleCall_1()); 
    }

    |    this_DECIMAL_LITERAL_2=RULE_DECIMAL_LITERAL    {
		$current.merge(this_DECIMAL_LITERAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_LITERAL_2, grammarAccess.getIntegerLiteralAccess().getDECIMAL_LITERALTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); } 
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current.getText(); }  
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleDE_LHS
entryRuleDE_LHS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDE_LHSRule()); }
	 iv_ruleDE_LHS=ruleDE_LHS 
	 { $current=$iv_ruleDE_LHS.current; } 
	 EOF 
;

// Rule DE_LHS
ruleDE_LHS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dot' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDE_LHSAccess().getDotKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDE_LHSAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_var1_2_0=RULE_ID
		{
			newLeafNode(lv_var1_2_0, grammarAccess.getDE_LHSAccess().getVar1IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDE_LHSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var1",
        		lv_var1_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDE_LHSAccess().getCommaKeyword_3_0());
    }
(
(
		lv_var2_4_0=RULE_ID
		{
			newLeafNode(lv_var2_4_0, grammarAccess.getDE_LHSAccess().getVar2IDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDE_LHSRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var2",
        		lv_var2_4_0, 
        		"ID");
	    }

)
))?	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDE_LHSAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDE_LHSAccess().getOrderIntegerLiteralParserRuleCall_5_0()); 
	    }
		lv_order_6_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDE_LHSRule());
	        }
       		set(
       			$current, 
       			"order",
        		lv_order_6_0, 
        		"IntegerLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDE_LHSAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleDifferentialEquation
entryRuleDifferentialEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDifferentialEquationRule()); }
	 iv_ruleDifferentialEquation=ruleDifferentialEquation 
	 { $current=$iv_ruleDifferentialEquation.current; } 
	 EOF 
;

// Rule DifferentialEquation
ruleDifferentialEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Equation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDifferentialEquationAccess().getEquationKeyword_0());
    }
)?(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDifferentialEquationAccess().getColonKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDifferentialEquationAccess().getLHSDE_LHSParserRuleCall_2_0()); 
	    }
		lv_LHS_2_0=ruleDE_LHS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDifferentialEquationRule());
	        }
       		set(
       			$current, 
       			"LHS",
        		lv_LHS_2_0, 
        		"DE_LHS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='==' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDifferentialEquationAccess().getEqualsSignEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDifferentialEquationAccess().getRHSAdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_RHS_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDifferentialEquationRule());
	        }
       		set(
       			$current, 
       			"RHS",
        		lv_RHS_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleContinuousMethod
entryRuleContinuousMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinuousMethodRule()); }
	 iv_ruleContinuousMethod=ruleContinuousMethod 
	 { $current=$iv_ruleContinuousMethod.current; } 
	 EOF 
;

// Rule ContinuousMethod
ruleContinuousMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContinuousMethodAccess().getContinuousMethodAction_0(),
            $current);
    }
)	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContinuousMethodAccess().getVoidKeyword_1());
    }
(
(
		lv_name_2_0=	'Continuous' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getContinuousMethodAccess().getNameContinuousKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContinuousMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "Continuous");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContinuousMethodAccess().getLeftParenthesisKeyword_3());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getContinuousMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContinuousMethodAccess().getLeftCurlyBracketKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getContinuousMethodAccess().getDESDifferentialEquationParserRuleCall_6_0_0()); 
	    }
		lv_DES_6_0=ruleDifferentialEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContinuousMethodRule());
	        }
       		add(
       			$current, 
       			"DES",
        		lv_DES_6_0, 
        		"DifferentialEquation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getContinuousMethodAccess().getSemicolonKeyword_6_1());
    }
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getContinuousMethodAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleAbstractContinuousMethod
entryRuleAbstractContinuousMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractContinuousMethodRule()); }
	 iv_ruleAbstractContinuousMethod=ruleAbstractContinuousMethod 
	 { $current=$iv_ruleAbstractContinuousMethod.current; } 
	 EOF 
;

// Rule AbstractContinuousMethod
ruleAbstractContinuousMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAbstractContinuousMethodAccess().getAbstractContinuousMethodAction_0(),
            $current);
    }
)	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbstractContinuousMethodAccess().getVoidKeyword_1());
    }
(
(
		lv_name_2_0=	'Continuous' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getAbstractContinuousMethodAccess().getNameContinuousKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractContinuousMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "Continuous");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbstractContinuousMethodAccess().getLeftParenthesisKeyword_3());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractContinuousMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAbstractContinuousMethodAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleBuilt_In_Methods
entryRuleBuilt_In_Methods returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuilt_In_MethodsRule()); }
	 iv_ruleBuilt_In_Methods=ruleBuilt_In_Methods 
	 { $current=$iv_ruleBuilt_In_Methods.current; } 
	 EOF 
;

// Rule Built_In_Methods
ruleBuilt_In_Methods returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getSqrtParserRuleCall_0()); 
    }
    this_Sqrt_0=ruleSqrt
    { 
        $current = $this_Sqrt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getSinParserRuleCall_1()); 
    }
    this_Sin_1=ruleSin
    { 
        $current = $this_Sin_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getCosParserRuleCall_2()); 
    }
    this_Cos_2=ruleCos
    { 
        $current = $this_Cos_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getTanParserRuleCall_3()); 
    }
    this_Tan_3=ruleTan
    { 
        $current = $this_Tan_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getCotParserRuleCall_4()); 
    }
    this_Cot_4=ruleCot
    { 
        $current = $this_Cot_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getSecParserRuleCall_5()); 
    }
    this_Sec_5=ruleSec
    { 
        $current = $this_Sec_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getCscParserRuleCall_6()); 
    }
    this_Csc_6=ruleCsc
    { 
        $current = $this_Csc_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getRoundParserRuleCall_7()); 
    }
    this_Round_7=ruleRound
    { 
        $current = $this_Round_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getFloorParserRuleCall_8()); 
    }
    this_Floor_8=ruleFloor
    { 
        $current = $this_Floor_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getCeilParserRuleCall_9()); 
    }
    this_Ceil_9=ruleCeil
    { 
        $current = $this_Ceil_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getDivParserRuleCall_10()); 
    }
    this_Div_10=ruleDiv
    { 
        $current = $this_Div_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getFldParserRuleCall_11()); 
    }
    this_Fld_11=ruleFld
    { 
        $current = $this_Fld_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getRemParserRuleCall_12()); 
    }
    this_Rem_12=ruleRem
    { 
        $current = $this_Rem_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getModParserRuleCall_13()); 
    }
    this_Mod_13=ruleMod
    { 
        $current = $this_Mod_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getGcdParserRuleCall_14()); 
    }
    this_Gcd_14=ruleGcd
    { 
        $current = $this_Gcd_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getLcmParserRuleCall_15()); 
    }
    this_Lcm_15=ruleLcm
    { 
        $current = $this_Lcm_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getAbsParserRuleCall_16()); 
    }
    this_Abs_16=ruleAbs
    { 
        $current = $this_Abs_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getSignParserRuleCall_17()); 
    }
    this_Sign_17=ruleSign
    { 
        $current = $this_Sign_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getRootParserRuleCall_18()); 
    }
    this_Root_18=ruleRoot
    { 
        $current = $this_Root_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getHypotParserRuleCall_19()); 
    }
    this_Hypot_19=ruleHypot
    { 
        $current = $this_Hypot_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getPowParserRuleCall_20()); 
    }
    this_Pow_20=rulePow
    { 
        $current = $this_Pow_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getExpParserRuleCall_21()); 
    }
    this_Exp_21=ruleExp
    { 
        $current = $this_Exp_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getLogParserRuleCall_22()); 
    }
    this_Log_22=ruleLog
    { 
        $current = $this_Log_22.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getErfParserRuleCall_23()); 
    }
    this_Erf_23=ruleErf
    { 
        $current = $this_Erf_23.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getGammaParserRuleCall_24()); 
    }
    this_Gamma_24=ruleGamma
    { 
        $current = $this_Gamma_24.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getMaxParserRuleCall_25()); 
    }
    this_Max_25=ruleMax
    { 
        $current = $this_Max_25.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getMinParserRuleCall_26()); 
    }
    this_Min_26=ruleMin
    { 
        $current = $this_Min_26.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getPauseParserRuleCall_27()); 
    }
    this_Pause_27=rulePause
    { 
        $current = $this_Pause_27.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getDE_LHSParserRuleCall_28()); 
    }
    this_DE_LHS_28=ruleDE_LHS
    { 
        $current = $this_DE_LHS_28.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuilt_In_MethodsAccess().getSizeParserRuleCall_29()); 
    }
    this_Size_29=ruleSize
    { 
        $current = $this_Size_29.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSqrt
entryRuleSqrt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSqrtRule()); }
	 iv_ruleSqrt=ruleSqrt 
	 { $current=$iv_ruleSqrt.current; } 
	 EOF 
;

// Rule Sqrt
ruleSqrt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'sqrt' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getSqrtAccess().getBuiltInNameSqrtKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSqrtRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "sqrt");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSqrtAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSqrtAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqrtRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSqrtAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSin
entryRuleSin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSinRule()); }
	 iv_ruleSin=ruleSin 
	 { $current=$iv_ruleSin.current; } 
	 EOF 
;

// Rule Sin
ruleSin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'sin' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getSinAccess().getBuiltInNameSinKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSinRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "sin");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSinAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSinAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSinRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSinAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCos
entryRuleCos returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCosRule()); }
	 iv_ruleCos=ruleCos 
	 { $current=$iv_ruleCos.current; } 
	 EOF 
;

// Rule Cos
ruleCos returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'cos' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getCosAccess().getBuiltInNameCosKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCosRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "cos");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCosAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCosAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCosRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCosAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTan
entryRuleTan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTanRule()); }
	 iv_ruleTan=ruleTan 
	 { $current=$iv_ruleTan.current; } 
	 EOF 
;

// Rule Tan
ruleTan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'tan' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getTanAccess().getBuiltInNameTanKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTanRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "tan");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTanAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTanAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTanRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTanAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCot
entryRuleCot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCotRule()); }
	 iv_ruleCot=ruleCot 
	 { $current=$iv_ruleCot.current; } 
	 EOF 
;

// Rule Cot
ruleCot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'cot' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getCotAccess().getBuiltInNameCotKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCotRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "cot");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCotAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCotAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCotRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCotAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSec
entryRuleSec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSecRule()); }
	 iv_ruleSec=ruleSec 
	 { $current=$iv_ruleSec.current; } 
	 EOF 
;

// Rule Sec
ruleSec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'sec' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getSecAccess().getBuiltInNameSecKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSecRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "sec");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSecAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSecAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSecRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSecAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCsc
entryRuleCsc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCscRule()); }
	 iv_ruleCsc=ruleCsc 
	 { $current=$iv_ruleCsc.current; } 
	 EOF 
;

// Rule Csc
ruleCsc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'csc' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getCscAccess().getBuiltInNameCscKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCscRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "csc");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCscAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCscAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCscRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCscAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRound
entryRuleRound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoundRule()); }
	 iv_ruleRound=ruleRound 
	 { $current=$iv_ruleRound.current; } 
	 EOF 
;

// Rule Round
ruleRound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'round' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getRoundAccess().getBuiltInNameRoundKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoundRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "round");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRoundAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRoundAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoundRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRoundAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFloor
entryRuleFloor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloorRule()); }
	 iv_ruleFloor=ruleFloor 
	 { $current=$iv_ruleFloor.current; } 
	 EOF 
;

// Rule Floor
ruleFloor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'floor' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getFloorAccess().getBuiltInNameFloorKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloorRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "floor");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloorAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFloorAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloorRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFloorAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCeil
entryRuleCeil returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCeilRule()); }
	 iv_ruleCeil=ruleCeil 
	 { $current=$iv_ruleCeil.current; } 
	 EOF 
;

// Rule Ceil
ruleCeil returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'ceil' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getCeilAccess().getBuiltInNameCeilKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCeilRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "ceil");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCeilAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCeilAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCeilRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCeilAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleDiv
entryRuleDiv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivRule()); }
	 iv_ruleDiv=ruleDiv 
	 { $current=$iv_ruleDiv.current; } 
	 EOF 
;

// Rule Div
ruleDiv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'div' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getDivAccess().getBuiltInNameDivKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDivRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "div");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDivAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDivAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDivAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleFld
entryRuleFld returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFldRule()); }
	 iv_ruleFld=ruleFld 
	 { $current=$iv_ruleFld.current; } 
	 EOF 
;

// Rule Fld
ruleFld returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'fld' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getFldAccess().getBuiltInNameFldKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFldRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "fld");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFldAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFldAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFldRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFldAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFldAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFldRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFldAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleRem
entryRuleRem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRemRule()); }
	 iv_ruleRem=ruleRem 
	 { $current=$iv_ruleRem.current; } 
	 EOF 
;

// Rule Rem
ruleRem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'rem' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getRemAccess().getBuiltInNameRemKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRemRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "rem");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRemAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRemAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRemRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRemAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRemAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRemRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRemAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleMod
entryRuleMod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModRule()); }
	 iv_ruleMod=ruleMod 
	 { $current=$iv_ruleMod.current; } 
	 EOF 
;

// Rule Mod
ruleMod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'mod' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getModAccess().getBuiltInNameModKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "mod");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleGcd
entryRuleGcd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGcdRule()); }
	 iv_ruleGcd=ruleGcd 
	 { $current=$iv_ruleGcd.current; } 
	 EOF 
;

// Rule Gcd
ruleGcd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'gcd' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getGcdAccess().getBuiltInNameGcdKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGcdRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "gcd");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGcdAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGcdAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGcdRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGcdAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGcdAccess().getE2AdditiveExpressionParserRuleCall_3_1_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGcdRule());
	        }
       		add(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGcdAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleLcm
entryRuleLcm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLcmRule()); }
	 iv_ruleLcm=ruleLcm 
	 { $current=$iv_ruleLcm.current; } 
	 EOF 
;

// Rule Lcm
ruleLcm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'lcm' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getLcmAccess().getBuiltInNameLcmKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLcmRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "lcm");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLcmAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLcmAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLcmRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLcmAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLcmAccess().getE2AdditiveExpressionParserRuleCall_3_1_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLcmRule());
	        }
       		add(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLcmAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAbs
entryRuleAbs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbsRule()); }
	 iv_ruleAbs=ruleAbs 
	 { $current=$iv_ruleAbs.current; } 
	 EOF 
;

// Rule Abs
ruleAbs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'abs' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getAbsAccess().getBuiltInNameAbsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbsRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "abs");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbsAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbsRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbsAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSign
entryRuleSign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	 iv_ruleSign=ruleSign 
	 { $current=$iv_ruleSign.current; } 
	 EOF 
;

// Rule Sign
ruleSign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'sign' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getSignAccess().getBuiltInNameSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "sign");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'root' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getRootAccess().getBuiltInNameRootKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRootRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "root");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRootAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRootAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRootAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleHypot
entryRuleHypot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHypotRule()); }
	 iv_ruleHypot=ruleHypot 
	 { $current=$iv_ruleHypot.current; } 
	 EOF 
;

// Rule Hypot
ruleHypot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'hypot' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getHypotAccess().getBuiltInNameHypotKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypotRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "hypot");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHypotAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHypotAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHypotRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHypotAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHypotAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHypotRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHypotAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRulePow
entryRulePow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowRule()); }
	 iv_rulePow=rulePow 
	 { $current=$iv_rulePow.current; } 
	 EOF 
;

// Rule Pow
rulePow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'pow' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getPowAccess().getBuiltInNamePowKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "pow");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPowAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPowAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowAccess().getE2AdditiveExpressionParserRuleCall_4_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPowAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	 iv_ruleExp=ruleExp 
	 { $current=$iv_ruleExp.current; } 
	 EOF 
;

// Rule Exp
ruleExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'exp' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getExpAccess().getBuiltInNameExpKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "exp");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleLog
entryRuleLog returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogRule()); }
	 iv_ruleLog=ruleLog 
	 { $current=$iv_ruleLog.current; } 
	 EOF 
;

// Rule Log
ruleLog returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'log' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getLogAccess().getBuiltInNameLogKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "log");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogAccess().getE2AdditiveExpressionParserRuleCall_3_1_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogRule());
	        }
       		add(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLogAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleErf
entryRuleErf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getErfRule()); }
	 iv_ruleErf=ruleErf 
	 { $current=$iv_ruleErf.current; } 
	 EOF 
;

// Rule Erf
ruleErf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'erf' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getErfAccess().getBuiltInNameErfKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getErfRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "erf");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getErfAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getErfAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getErfRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getErfAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleGamma
entryRuleGamma returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGammaRule()); }
	 iv_ruleGamma=ruleGamma 
	 { $current=$iv_ruleGamma.current; } 
	 EOF 
;

// Rule Gamma
ruleGamma returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'gamma' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getGammaAccess().getBuiltInNameGammaKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGammaRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "gamma");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGammaAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGammaAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGammaRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGammaAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMax
entryRuleMax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaxRule()); }
	 iv_ruleMax=ruleMax 
	 { $current=$iv_ruleMax.current; } 
	 EOF 
;

// Rule Max
ruleMax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'max' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getMaxAccess().getBuiltInNameMaxKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMaxRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "max");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaxAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMaxAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxAccess().getE2AdditiveExpressionParserRuleCall_3_1_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxRule());
	        }
       		add(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMaxAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMin
entryRuleMin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinRule()); }
	 iv_ruleMin=ruleMin 
	 { $current=$iv_ruleMin.current; } 
	 EOF 
;

// Rule Min
ruleMin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'min' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getMinAccess().getBuiltInNameMinKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMinRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "min");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinAccess().getE1AdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_e1_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMinAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinAccess().getE2AdditiveExpressionParserRuleCall_3_1_0()); 
	    }
		lv_e2_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinRule());
	        }
       		add(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMinAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPauseRule()); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'pause' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getPauseAccess().getBuiltInNamePauseKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPauseRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "pause");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPauseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPauseAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPauseRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPauseAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	 iv_ruleSize=ruleSize 
	 { $current=$iv_ruleSize.current; } 
	 EOF 
;

// Rule Size
ruleSize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'size' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getSizeAccess().getBuiltInNameSizeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSizeRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "size");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSizeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSizeAccess().getExAdditiveExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSizeRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSizeAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleInvariantBlock
entryRuleInvariantBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvariantBlockRule()); }
	 iv_ruleInvariantBlock=ruleInvariantBlock 
	 { $current=$iv_ruleInvariantBlock.current; } 
	 EOF 
;

// Rule InvariantBlock
ruleInvariantBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'Invariant' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getInvariantBlockAccess().getNameInvariantKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInvariantBlockRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Invariant");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInvariantBlockAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInvariantBlockAccess().getConditionsConditionalExpressionParserRuleCall_2_0_0()); 
	    }
		lv_conditions_2_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvariantBlockRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_2_0, 
        		"ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInvariantBlockAccess().getSemicolonKeyword_2_1());
    }
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInvariantBlockAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInvariantBlockAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getBlockstatementBlockStatementParserRuleCall_2_0()); 
	    }
		lv_blockstatement_2_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"blockstatement",
        		lv_blockstatement_2_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getStatementParserRuleCall_0()); 
    }
    this_Statement_0=ruleStatement
    { 
        $current = $this_Statement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getLocalVarDecStatementParserRuleCall_1()); 
    }
    this_LocalVarDecStatement_1=ruleLocalVarDecStatement
    { 
        $current = $this_LocalVarDecStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLocalVarDecStatement
entryRuleLocalVarDecStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarDecStatementRule()); }
	 iv_ruleLocalVarDecStatement=ruleLocalVarDecStatement 
	 { $current=$iv_ruleLocalVarDecStatement.current; } 
	 EOF 
;

// Rule LocalVarDecStatement
ruleLocalVarDecStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLocalVarDecStatementAccess().getLocalVarDecParserRuleCall_0()); 
    }
    this_LocalVarDec_0=ruleLocalVarDec
    { 
        $current = $this_LocalVarDec_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVarDecStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleLocalVarDec
entryRuleLocalVarDec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVarDecRule()); }
	 iv_ruleLocalVarDec=ruleLocalVarDec 
	 { $current=$iv_ruleLocalVarDec.current; } 
	 EOF 
;

// Rule LocalVarDec
ruleLocalVarDec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getVariablemodiferVARIABLE_MODIFIERParserRuleCall_0_0()); 
	    }
		lv_variablemodifer_0_0=ruleVARIABLE_MODIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"variablemodifer",
        		lv_variablemodifer_0_0, 
        		"VARIABLE_MODIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getTypeUseTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getDimDimParserRuleCall_2_0()); 
	    }
		lv_dim_2_0=ruleDim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		add(
       			$current, 
       			"dim",
        		lv_dim_2_0, 
        		"Dim");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getNameLocalVarNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleLocalVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"LocalVarName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalVarDecAccess().getEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVarDecAccess().getVariniVariableInitializerParserRuleCall_4_1_0()); 
	    }
		lv_varini_5_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVarDecRule());
	        }
       		set(
       			$current, 
       			"varini",
        		lv_varini_5_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getBlockBlockParserRuleCall_1_0_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getIfKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getParexpressionParExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_parexpression_3_0=ruleParExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"parexpression",
        		lv_parexpression_3_0, 
        		"ParExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getIfstatementStatementParserRuleCall_1_1_2_0()); 
	    }
		lv_ifstatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"ifstatement",
        		lv_ifstatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getElseKeyword_1_1_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getElsestatementStatementParserRuleCall_1_1_3_1_0()); 
	    }
		lv_elsestatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"elsestatement",
        		lv_elsestatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_7='for' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getForKeyword_1_2_0());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getForcontrolForControlParserRuleCall_1_2_2_0()); 
	    }
		lv_forcontrol_9_0=ruleForControl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"forcontrol",
        		lv_forcontrol_9_0, 
        		"ForControl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStatementAccess().getRightParenthesisKeyword_1_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getForstatementStatementParserRuleCall_1_2_4_0()); 
	    }
		lv_forstatement_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"forstatement",
        		lv_forstatement_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_12='break' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatementAccess().getBreakKeyword_1_3_0());
    }
(
(
		lv_identifier_13_0=RULE_ID
		{
			newLeafNode(lv_identifier_13_0, grammarAccess.getStatementAccess().getIdentifierIDTerminalRuleCall_1_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_13_0, 
        		"ID");
	    }

)
)?	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStatementAccess().getSemicolonKeyword_1_3_2());
    }
)
    |(	otherlv_15='continue' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getContinueKeyword_1_4_0());
    }
(
(
		lv_identifier_16_0=RULE_ID
		{
			newLeafNode(lv_identifier_16_0, grammarAccess.getStatementAccess().getIdentifierIDTerminalRuleCall_1_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_16_0, 
        		"ID");
	    }

)
)?	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatementAccess().getSemicolonKeyword_1_4_2());
    }
)
    |(	otherlv_18='while' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStatementAccess().getWhileKeyword_1_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getParexpressionParExpressionParserRuleCall_1_5_1_0()); 
	    }
		lv_parexpression_19_0=ruleParExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"parexpression",
        		lv_parexpression_19_0, 
        		"ParExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getWhilestatementStatementParserRuleCall_1_5_2_0()); 
	    }
		lv_whilestatement_20_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"whilestatement",
        		lv_whilestatement_20_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getReturnReturnStatementParserRuleCall_1_6_0()); 
	    }
		lv_return_21_0=ruleReturnStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_21_0, 
        		"ReturnStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatementexpressionExpressionParserRuleCall_1_7_0_0()); 
	    }
		lv_statementexpression_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statementexpression",
        		lv_statementexpression_22_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStatementAccess().getSemicolonKeyword_1_7_1());
    }
)
    |	otherlv_24=';' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getStatementAccess().getSemicolonKeyword_1_8());
    }
))
;





// Entry rule entryRuleForControl
entryRuleForControl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForControlRule()); }
	 iv_ruleForControl=ruleForControl 
	 { $current=$iv_ruleForControl.current; } 
	 EOF 
;

// Rule ForControl
ruleForControl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForControlAccess().getForControlAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getEnhancedforcontrolEnhancedForControlParserRuleCall_1_0_0()); 
	    }
		lv_enhancedforcontrol_1_0=ruleEnhancedForControl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"enhancedforcontrol",
        		lv_enhancedforcontrol_1_0, 
        		"EnhancedForControl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getForinitForInitParserRuleCall_1_1_0_0()); 
	    }
		lv_forinit_2_0=ruleForInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"forinit",
        		lv_forinit_2_0, 
        		"ForInit");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForControlAccess().getSemicolonKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getExpressionExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForControlAccess().getSemicolonKeyword_1_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForControlAccess().getForupdateForUpdateParserRuleCall_1_1_4_0()); 
	    }
		lv_forupdate_6_0=ruleForUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForControlRule());
	        }
       		set(
       			$current, 
       			"forupdate",
        		lv_forupdate_6_0, 
        		"ForUpdate");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleEnhancedForControl
entryRuleEnhancedForControl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnhancedForControlRule()); }
	 iv_ruleEnhancedForControl=ruleEnhancedForControl 
	 { $current=$iv_ruleEnhancedForControl.current; } 
	 EOF 
;

// Rule EnhancedForControl
ruleEnhancedForControl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnhancedForControlAccess().getTypeUseTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnhancedForControlRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getEnhancedForControlAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnhancedForControlRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnhancedForControlAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnhancedForControlAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnhancedForControlRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForInit
entryRuleForInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInitRule()); }
	 iv_ruleForInit=ruleForInit 
	 { $current=$iv_ruleForInit.current; } 
	 EOF 
;

// Rule ForInit
ruleForInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getForInitAccess().getExpressionListParserRuleCall()); 
    }
    this_ExpressionList_0=ruleExpressionList
    { 
        $current = $this_ExpressionList_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleForUpdate
entryRuleForUpdate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForUpdateRule()); }
	 iv_ruleForUpdate=ruleForUpdate 
	 { $current=$iv_ruleForUpdate.current; } 
	 EOF 
;

// Rule ForUpdate
ruleForUpdate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getForUpdateAccess().getExpressionListParserRuleCall()); 
    }
    this_ExpressionList_0=ruleExpressionList
    { 
        $current = $this_ExpressionList_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCompositionMethod
entryRuleCompositionMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositionMethodRule()); }
	 iv_ruleCompositionMethod=ruleCompositionMethod 
	 { $current=$iv_ruleCompositionMethod.current; } 
	 EOF 
;

// Rule CompositionMethod
ruleCompositionMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompositionMethodAccess().getVoidKeyword_0());
    }
(
(
		lv_name_1_0=	'Composition' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getCompositionMethodAccess().getNameCompositionKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompositionMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Composition");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCompositionMethodAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCompositionMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompositionMethodAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionMethodAccess().getMembersControlSwitchCompositionParserRuleCall_5_0()); 
	    }
		lv_members_5_0=ruleControlSwitchComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionMethodRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_0, 
        		"ControlSwitchComposition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCompositionMethodAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleControlSwitchComposition
entryRuleControlSwitchComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlSwitchCompositionRule()); }
	 iv_ruleControlSwitchComposition=ruleControlSwitchComposition 
	 { $current=$iv_ruleControlSwitchComposition.current; } 
	 EOF 
;

// Rule ControlSwitchComposition
ruleControlSwitchComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getControlSwitchCompositionAccess().getControlSwitchCompositionAction_0(),
            $current);
    }
)((
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getControlSwitchCompositionAccess().getIdIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlSwitchCompositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)(((
(
		lv_sync_2_0=	'(' 
    {
        newLeafNode(lv_sync_2_0, grammarAccess.getControlSwitchCompositionAccess().getSyncLeftParenthesisKeyword_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlSwitchCompositionRule());
	        }
       		setWithLastConsumed($current, "sync", lv_sync_2_0, "(");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getControlSwitchCompositionAccess().getRightParenthesisKeyword_1_1_0_1());
    }
)
    |(
(
		lv_recev_4_0=	'(?)' 
    {
        newLeafNode(lv_recev_4_0, grammarAccess.getControlSwitchCompositionAccess().getRecevLeftParenthesisQuestionMarkRightParenthesisKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlSwitchCompositionRule());
	        }
       		setWithLastConsumed($current, "recev", lv_recev_4_0, "(?)");
	    }

)
)
    |(
(
		lv_send_5_0=	'(!)' 
    {
        newLeafNode(lv_send_5_0, grammarAccess.getControlSwitchCompositionAccess().getSendLeftParenthesisExclamationMarkRightParenthesisKeyword_1_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlSwitchCompositionRule());
	        }
       		setWithLastConsumed($current, "send", lv_send_5_0, "(!)");
	    }

)
))?	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getControlSwitchCompositionAccess().getLeftParenthesisKeyword_1_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getSourceExpressionParserRuleCall_1_3_0_0()); 
	    }
		lv_source_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getControlSwitchCompositionAccess().getLeftCurlyBracketKeyword_1_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getSourcelistExpressionListParserRuleCall_1_3_1_1_0()); 
	    }
		lv_sourcelist_9_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"sourcelist",
        		lv_sourcelist_9_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getControlSwitchCompositionAccess().getRightCurlyBracketKeyword_1_3_1_2());
    }
))	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getControlSwitchCompositionAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getActionExpressionParserRuleCall_1_5_0()); 
	    }
		lv_action_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_12_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getControlSwitchCompositionAccess().getCommaKeyword_1_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getDestinationExpressionParserRuleCall_1_7_0_0()); 
	    }
		lv_destination_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"destination",
        		lv_destination_14_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getControlSwitchCompositionAccess().getLeftCurlyBracketKeyword_1_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getDestinationlistExpressionListParserRuleCall_1_7_1_1_0()); 
	    }
		lv_destinationlist_16_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"destinationlist",
        		lv_destinationlist_16_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getControlSwitchCompositionAccess().getRightCurlyBracketKeyword_1_7_1_2());
    }
))	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getControlSwitchCompositionAccess().getRightParenthesisKeyword_1_8());
    }
	otherlv_19='{' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getControlSwitchCompositionAccess().getLeftCurlyBracketKeyword_1_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getConditionConditionBlockParserRuleCall_1_10_0()); 
	    }
		lv_condition_20_0=ruleConditionBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_20_0, 
        		"ConditionBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getControlSwitchCompositionAccess().getDiscreteDiscreteBlockParserRuleCall_1_11_0()); 
	    }
		lv_discrete_21_0=ruleDiscreteBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlSwitchCompositionRule());
	        }
       		set(
       			$current, 
       			"discrete",
        		lv_discrete_21_0, 
        		"DiscreteBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getControlSwitchCompositionAccess().getRightCurlyBracketKeyword_1_12());
    }
))
;





// Entry rule entryRuleDiscreteBlock
entryRuleDiscreteBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDiscreteBlockRule()); }
	 iv_ruleDiscreteBlock=ruleDiscreteBlock 
	 { $current=$iv_ruleDiscreteBlock.current; } 
	 EOF 
;

// Rule DiscreteBlock
ruleDiscreteBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'Discrete' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getDiscreteBlockAccess().getBuiltInNameDiscreteKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDiscreteBlockRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "Discrete");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDiscreteBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiscreteBlockAccess().getStatementsBlockStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiscreteBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDiscreteBlockAccess().getRightCurlyBracketKeyword_3());
    }
(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDiscreteBlockAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleConditionBlock
entryRuleConditionBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionBlockRule()); }
	 iv_ruleConditionBlock=ruleConditionBlock 
	 { $current=$iv_ruleConditionBlock.current; } 
	 EOF 
;

// Rule ConditionBlock
ruleConditionBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_BuiltInName_0_0=	'Condition' 
    {
        newLeafNode(lv_BuiltInName_0_0, grammarAccess.getConditionBlockAccess().getBuiltInNameConditionKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionBlockRule());
	        }
       		setWithLastConsumed($current, "BuiltInName", lv_BuiltInName_0_0, "Condition");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionBlockAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionBlockAccess().getConditionsConditionalExpressionParserRuleCall_2_0_0()); 
	    }
		lv_conditions_2_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionBlockRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_2_0, 
        		"ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionBlockAccess().getSemicolonKeyword_2_1());
    }
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionBlockAccess().getRightCurlyBracketKeyword_3());
    }
(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConditionBlockAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleDiscreteMethod
entryRuleDiscreteMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDiscreteMethodRule()); }
	 iv_ruleDiscreteMethod=ruleDiscreteMethod 
	 { $current=$iv_ruleDiscreteMethod.current; } 
	 EOF 
;

// Rule DiscreteMethod
ruleDiscreteMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDiscreteMethodAccess().getVoidKeyword_0());
    }
(
(
		lv_name_1_0=	'Discrete' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getDiscreteMethodAccess().getNameDiscreteKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDiscreteMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Discrete");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDiscreteMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDiscreteMethodAccess().getParamsParameterParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiscreteMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDiscreteMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiscreteMethodAccess().getParamsParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiscreteMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDiscreteMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDiscreteMethodAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiscreteMethodAccess().getStatementsBlockStatementParserRuleCall_6_0()); 
	    }
		lv_statements_8_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiscreteMethodRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDiscreteMethodAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleAbstractDiscreteMethod
entryRuleAbstractDiscreteMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDiscreteMethodRule()); }
	 iv_ruleAbstractDiscreteMethod=ruleAbstractDiscreteMethod 
	 { $current=$iv_ruleAbstractDiscreteMethod.current; } 
	 EOF 
;

// Rule AbstractDiscreteMethod
ruleAbstractDiscreteMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractDiscreteMethodAccess().getVoidKeyword_0());
    }
(
(
		lv_name_1_0=	'Discrete' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getAbstractDiscreteMethodAccess().getNameDiscreteKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractDiscreteMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Discrete");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractDiscreteMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDiscreteMethodAccess().getParamsParameterParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDiscreteMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractDiscreteMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDiscreteMethodAccess().getParamsParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDiscreteMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAbstractDiscreteMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAbstractDiscreteMethodAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleInitMethod
entryRuleInitMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitMethodRule()); }
	 iv_ruleInitMethod=ruleInitMethod 
	 { $current=$iv_ruleInitMethod.current; } 
	 EOF 
;

// Rule InitMethod
ruleInitMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitMethodAccess().getVoidKeyword_0());
    }
(
(
		lv_name_1_0=	'Init' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getInitMethodAccess().getNameInitKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInitMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Init");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInitMethodAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInitMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInitMethodAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitMethodAccess().getStatementsBlockStatementParserRuleCall_5_0()); 
	    }
		lv_statements_5_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitMethodRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInitMethodAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleAbstractInitMethod
entryRuleAbstractInitMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractInitMethodRule()); }
	 iv_ruleAbstractInitMethod=ruleAbstractInitMethod 
	 { $current=$iv_ruleAbstractInitMethod.current; } 
	 EOF 
;

// Rule AbstractInitMethod
ruleAbstractInitMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='void' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractInitMethodAccess().getVoidKeyword_0());
    }
(
(
		lv_name_1_0=	'Init' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getAbstractInitMethodAccess().getNameInitKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbstractInitMethodRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "Init");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractInitMethodAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAbstractInitMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbstractInitMethodAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleNewByClass
entryRuleNewByClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewByClassRule()); }
	 iv_ruleNewByClass=ruleNewByClass 
	 { $current=$iv_ruleNewByClass.current; } 
	 EOF 
;

// Rule NewByClass
ruleNewByClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewByClassAccess().getNewKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewByClassRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getNewByClassAccess().getTypeClassCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNewByClassAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNewByClassAccess().getArgsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewByClassRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNewByClassAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewByClassAccess().getArgsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewByClassRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNewByClassAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleNewArray
entryRuleNewArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewArrayRule()); }
	 iv_ruleNewArray=ruleNewArray 
	 { $current=$iv_ruleNewArray.current; } 
	 EOF 
;

// Rule NewArray
ruleNewArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewArrayAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewArrayAccess().getTypeUseTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleUseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewArrayRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"UseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNewArrayAccess().getDimeDimExprParserRuleCall_2_0()); 
	    }
		lv_dime_2_0=ruleDimExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewArrayRule());
	        }
       		add(
       			$current, 
       			"dime",
        		lv_dime_2_0, 
        		"DimExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleDimExpr
entryRuleDimExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDimExprRule()); }
	 iv_ruleDimExpr=ruleDimExpr 
	 { $current=$iv_ruleDimExpr.current; } 
	 EOF 
;

// Rule DimExpr
ruleDimExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimExprAccess().getDimexAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDimExprAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDimExprAccess().getIndexExpressionParserRuleCall_2_0()); 
	    }
		lv_index_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDimExprRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDimExprAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleDim
entryRuleDim returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDimRule()); } 
	 iv_ruleDim=ruleDim 
	 { $current=$iv_ruleDim.current.getText(); }  
	 EOF 
;

// Rule Dim
ruleDim returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='[]' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDimAccess().getLeftSquareBracketRightSquareBracketKeyword()); 
    }

    ;





RULE_AMOUNT_GEONE : '1..*';

RULE_AMOUNT_ONE_OR_ZERO : '0..1';

RULE_ASYACTIONS : '(' '?' '|' '!' ')';

RULE_CLOCK : 'clock';

RULE_HEX_LITERAL : '0' ('x'|'X') RULE_HEX_DIGIT+ RULE_INTEGER_TYPE_SUFFIX?;

RULE_DECIMAL_LITERAL : ('0'|'1'..'9' ('0'..'9')*) RULE_INTEGER_TYPE_SUFFIX?;

RULE_OCTAL_LITERAL : '0' ('0'..'7')+ RULE_INTEGER_TYPE_SUFFIX?;

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_INTEGER_TYPE_SUFFIX : ('l'|'L');

RULE_FLOATING_POINT_LITERAL : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|'.' ('0'..'9')+ RULE_EXPONENT? RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOAT_TYPE_SUFFIX?|('0'..'9')+ RULE_FLOAT_TYPE_SUFFIX);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOAT_TYPE_SUFFIX : ('f'|'F'|'d'|'D');

RULE_CHARACTER_LITERAL : '\'' (RULE_ESCAPE_SEQUENCE|~(('\''|'\\'))) '\'';

RULE_STRING_LITERAL : '"' (RULE_ESCAPE_SEQUENCE|~(('\\'|'"')))* '"';

fragment RULE_ESCAPE_SEQUENCE : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|RULE_UNICODE_ESCAPE|RULE_OCTAL_ESCAPE);

fragment RULE_OCTAL_ESCAPE : ('\\' '0'..'3' '0'..'7' '0'..'7'|'\\' '0'..'7' '0'..'7'|'\\' '0'..'7');

fragment RULE_UNICODE_ESCAPE : '\\' 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


